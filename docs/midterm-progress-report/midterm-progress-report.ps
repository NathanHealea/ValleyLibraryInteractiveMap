%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: midterm-progress-report.dvi
%%CreationDate: Fri Feb 17 19:46:56 2017
%%Pages: 8
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-Regu Dingbats NimbusSanL-Bold
%%+ URWPalladioL-Roma URWPalladioL-Bold
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter
%+ midterm-progress-report.dvi -o midterm-progress-report.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.02.17:1946
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C4B19E33
F046CE97B53DEB549FEA96CF6CE66357C4904B7932F5B1CE03CFE3A10C976B9C
C9AD11D7A02816F8E11666CA8B3EE1411DF2CA94172659BAD929E3E3E5248F48
0690CEC6D8F7061608CF2672F65ABDC96B4FCA84D5C847440CF9523D3BF23F6B
D4365582E4B187B6A1A0282ED323BF221EDD0A4CE11CE7EDA738D1AF48B2E19F
EB3DA1664DE99C447C35DFD45069FDED1FCD70B4A6855E91FFBD7146EFE88012
0BFF1D6D1ACB53D5E07FB5795F561A4A3E953BBA7C03A9762ADAE18E58DCE6B3
B1A703122EF3B16963AC7CB9682CE60E17947E7E675D19901C7E8272CE4C9FDF
536ABDFFA429B820A82AEE9A73D7DCF77DDE4D8E251CB3B3A5B0A91C0FCD7FBB
EAD7A812FF194FD049F28B82F4C2D73E41CC73C1C9F668931A2C7EBA5400A1B9
0902EFE6792F207136E1E16B41794E6CBF7316889A602D35C37EF36DEC95AF26
E9BB0900456F2EBF2705ECCE7B2ED90343D23E006ECB282D4B3629BB0C3892F3
FF9C17FE6C5FAB68358E1CD44AFF021948AC9FB8410A3DE22E0A01E367C52470
2A8CFD284CF9E8F505D5DBD7BBE242FE071FEA0094A55ED1CD7C9BE6B7C56C98
16AD1985FB7624F5E48CF6C0C2ED85B466F64C52F017B20CDABB85D24452E086
3942362E764A2BDA0F6C1B24426E302DDC4403A087EFB2850CF3275C7B24275A
AE270F212831F4C4A5D95DEAB61923CA126E587E8F5ED4F2D5738F06E8C4F911
B346B8ECDAC481DEDD2F546305A7CD63CB67D40093C618FBBDF498C8D7EAD8C7
1F5F022D0BBCFAA8670E3B3B999A1697C947AF38D7E1A360E3F0825A9AA77840
D7A9DFD575CE2F04D308F7C553EBF569AC84F2C12AA0869CE107C713A3CCE624
5059BFB3F5AA27D10E337086144AB09286BE3825A3482C5422454C6A9CBBF205
833316780EB88302796FC427A0FB9E53A7BF24577FEB3FA5D85CB6344F908007
183522D3C760C11FC7DA8D14BB5DD800576A6B4D1B991C1BF3DB0F9CA2AC5D22
91079A199F2F6E6DC68213D33EA893B74F6AFF30ED1B51F8B53A015FFD4D2076
B71F73225B151CFCF11E2A2917CF1B3F60E2B4D442307C394E1625F7E60EB12A
F2EB9CA7B17B082F1664D09CB7A3F38AEA99A13F659089426126F47FAD5B6DC7
64101CD437DA3C22BC43E7A8DE07253EB371470EE1E4E42A5D1FA2C4DB5565AD
79D6271AE28E8FDE5D4CB24064C145DE44ED486A1E7DF2DF921F2B1BE5FDB120
D8B781C3655EA72DC22A2A2D37579F0AF60B42320AB25C8D769124352448A154
7A381B388A4D9A54E82F199BA35F1A3981823AB698E3F87D38D32ADDD4F13832
77FCC9ACEE7FBD3285F689A85B76D0FEB9E70F09BAD0CE144770A6CC203CE40E
15912DE0E3465DBC7918E3EA49ADE57EE8C48C75937F5D25498C45170693067E
6902937C9B43AB6080111663D5DC6D88F72A39C5E7BAD677229498323A3E7A22
2FE2552B00CB91CE2848A1A53538B7AF2503A3671903E10DF0E9641DBB70577A
E828DD3CAE98FA9E1A74F4377F908D3CD79461408ED29832BC4C9865550CCB00
45359282255057A4BD4859915CF1E45ECDB7329F90BBF63E0A22A54B05C5ACD1
9C7C4DFC25482A27A20C7AB908546C3577E87ADE93EA46436314A0A7C524B892
4B012239E77CD65AE2949BBF7E46A5A2269B7FFB1CF8A5BC7EEA1944D2B0BF37
BFC36ADAD9A599FA133F77935F24EF518819D054345DF144731DD2332B0F7F5E
84C46AF486941CF1293E86EE719C9BAB6263470C7009C3933F1857B0A863E36C
288D37E6AC85E6A1B4E6E91C0A9FE367BEC427EA3713E8D1F0523ECFF6067717
244CA21C177968583815F023420A660F7AA4CDC8BF25AC3B3E429942B9F5123D
84234C186D9226487C76DFEF5D26165771C0E75F0ACE7E3882E49DE831B46C12
E30DC37395241D7619C05ABC40F5A36F8042B461FB6C3A5181F77B14E9E6D978
37356B4B31FAC3850DF1869063724316104C799B6A2F42C361A375E4D29EBA7F
850FE29EFBC2CEF627A25DB549A4D4C48F9FC9A2F32FA50C1CE6B5A545A95F7E
BF2E9ED710AE91ACE1281A44E49AEE4133CCC04926A6DBA24B721C21188C89A5
2A49745501CFAA4364CF49E3EC2A59D9EE46F33362634F9758827B199FD07DBA
939BD7387124656831862F70A97C5A05959572C74865F5902E95093FECDBEA3B
BBA9B47DACE807262DE0C7EF04843259F58A323471237CD573298C5D0A0650AD
2ACABD71CB44C63675192845E3D01B3B28AF871F347D4A460CC28D9E94409443
30E893D27B06132063AB727A38F447A2A4633D29ADAC01BDCCC7634E64DFDC55
9141F69E1202C4A0FD48479B0ED95A7605C94901373E1100A6CBFC113FCCE445
E0317CC94A8507DD637C37676954B9D34C6727AACF17285876DB16DD0E11384C
2B996E85E82FD8FD2B8F9B83BCCB398B997364F0DDB71E60CCC50CDD5D122EEC
C36B86A89FBBB5BFB227FBA3A7B7DE7C907E58780FC276C24FF066982691A97A
50D14362D27D790375A47162DECC53C5C11E8A7499788DFD86AEFFFE7E674AED
26706E2D079E9A571C6A32ACCC8C0DCF23508F58477D05F9A1FC679C0DA64254
27AE33293D02C9ECA01DAF2D0A1B07E5515D36E18CAA3AB1B6C5736DFDEFE384
DBCD244F0C11087A873C4501C6DE2A5A57E346FD3F92A0451E63FFF6B99C6DFC
64ED8673DC54EF6509D0D043925BCE39072FC64DDF2C49B8602D1A51EE822F19
D7B2135AA84626BFE3FF321A6BEC3A003AD97E7699CFA34BF41F9C2B38DF4794
CB5AE36C95F42B44212DE67A96CA9D047587998636673A031C4EB03CF1A55326
F5D94DDE75086B44F095EDE0068FB6B9D256759041CDA04ECACBD8D7784159AF
AE31A9C637D9A5C0C6840DD9E30EACC66D4D6FD6F12A603AA2DB3E9866693070
0D69CDDC416D4B76CF6B835C7BEBF914816B87EDCD5A24E346EBA2DDED30F5A0
DC033E93B040A6EE7F8AB3C44C61017C758C11C2E2FE3C4F18996287A48FA9F8
FD068C42D0D3384FF27C5A88EF630125562663EA48538CED34E669A162640CC4
A632B58E06954CF4C713ABB3BF00C64CCBC7EE25616CC076DC72794F25FFC373
2EBBA3D975C45DF75498814A7D567E49D4349B9C00118800FDE92A222F063821
36D3019843A99EA3280D9F3320A3FAFBE5AC5CA9E7D404FD4CF14F0E2EBBEC84
C9D839CF9231D4DE942B7951DF1804D445F8F69CA4B90D34988C1C1AE72CE581
E82E6EFDA1CCC13DF9EDB3667682F641A47FDA675076CA5532740B3786D471A1
D8C93305111126D997F57A72930168EECDFD0353655C34F87F1B1256C2FB1F63
53EBDDC0FA68594F0FFCD67CFCA984C6B248D7EA2C2E1DFB527EEF80A436AFFC
8EEF81C73EDE1E3FBB461368A9011398E0A8C3AAF39D9F496A65F1001A3D0E8A
24476C94A86E6B7E78D3EBC8EB5AC2B5FCFE088DB5E823BC168252F57DC0A89E
2A9411E6E10EB8C1FA2BDF71F8AD33A90EB1874FFB1225CF1DA2F46504F95468
8258D08038F789123FB2E24DD01DDA56E301FF3281A1FA090C15DDB60F7D3BB5
581A8CBE480C2BEB720B23DA1DABDD09610258D2F5282F9091C6CABD70903995
CFA9AAAB411CE997D06D44615E27C554AF4E41BE67DA3F39BD9741AC83611E93
6BAD2722E1CBB6E7011491F79087C03AB7FC544C630914DB5B7BE48A9B9A437A
12F4D60FD0B5888117010866B9A2FBA49B13802426474672A483FF21A6D13DED
00FBBD715C131435EE885780EC50DFD4D90B56815489A612E7D275AA4EE5B649
3B7A5CD7B1BB36A193F52C78AB3B0BFD0E16918EC392455628EA68EA1B38C17C
6F2E34212A72336D6DAAB732B3EC3376BD946A130649416E44403B68C635DA3B
F701BD39F5357499F091AF9A5B45C48F503DE04BEBF20EE1847119E030D3021D
30131137AB222A517C6353DBD5518545DB1F83C613AC47E2372B4552D66D524D
B3B2A8D3BB4E949A74D4FDE8251B5C7BA4C53E71A504255AB985B3705471CEED
CDBFE9250FC166EF726FC65FDA29EDFB3AD46BEB7DA7468011420DBE034D5AB6
7817DA21F12135A28BEEA68C46B8A633E82E5BEA048E3AAAC107F62C7A943CAF
8038C03C57418377255201AE91F48B7FC2AD355DC4DC23DCE672B0B37D0C8F4E
9E27D5F96361B50476A8D3D684C0382B6B7D81C888A16012044DC70985FF17A1
444B2D1596343B2564124D648B1E095CAE11DEFD951E217AFDC64E2D43ED4C17
ED20CEC6DE51C656FD651519D070EC6CEED07A2EAB72E1250A760472788C713A
4AF692E07EC86477FE3E284A31BB0224E75445B8E9CA449D085D67F778DEC082
D2BE30D6D165F5486545A515856136B974CF587736EE3C452DF907CC0DBCA8FF
2728C535BFEE05843D7A218066EACA4AC59618D3600C7881088CCB39E66B594B
B6BD224F9E55B1187997532BD69AAA7B9C6D8299AEE0EE143A1D053206A7C133
D547A1796A91FEC2EFF45791C0B02D2423C1BECF67261168C6F6A3E7B940AE0E
A50D2705694FD8A24D9F09821BD121F361A03C1E46CC88D64B426220DDE637EF
3A6FEDADFEC4CB816611EDD3FE02950666F95ADC75D6179A9BAA8ADF8EA8A475
339A318E0D4D159091D84806F35E28EB74E9242C6A9ACFBFB2D85D6C96712AC0
C6122486E3DCD3F9297E8E733330ED0D0915C0A8E0A51ABF7D650E5F9288C410
487290808B88F9421D506386AC95CCE4F82784F8C6462D45076E249A857FC13D
34B4A0D9A7942EB68F6DD3BDAF7171A4AB4896F1BF2F8B8E0AE5AAC4C259DC3B
0AF48011BDC97BDC06FF7AA54AD786DF92CEC8B7369AED2AE9A79C74F3785F74
71D29E8F2AB2802B124246BD0C80708BBF71ACA21BCBF37A6420E5B6DD95D93E
A8979692E31AB41C36AE2967EA102B9CB19A99BAA3548AD2C9149783684C3A42
EBDFEF10936ECD858BFAC6925F4EB68ECA1427583FAC104825C3476C9720C302
B5EB151B1CF06B7265BC0B67F9079A1B18B0768FA4C03A720CDB13A9FFE96543
BEFC350D923102BA1448C23FA47C2951D0EA72ECDB33A01F8487932A162CCCA0
114944A1AC1E57C94A138FD2BCE8B254341CBCE44D26E0B6623D3AFA00CC0D25
F5EBB825558AF48224B94D25DB451DAC56B286F6F025877893216CEAFC953A90
95A7780A665FC8C7CDC6382E7442DB7B4B326C31FBAF8B19D2D62089576E72A5
14E5E0F33836F3298ECC4D6E8F5CED1ADB3F3EDC5FA135471F1C7F13DDDE39CB
3089E6B71B44B92D368C746FB31E330BE537CA6A1CBCE85CC06BC191CF269B50
648D224546A820C07FB64E61C281F4630A7BA2B826B9EE72F1662AB779230049
F0C6A624C294DA1AB1D23952059B2CE5626FE6E5093580207506E416DD19F79D
4A065C0271683F9A629D3A1A82FBCB193DACD0545F81798462925E2E742985DD
9909A74AD69BAD126EF8E6A373F4674AD17C4666FA1B48EDB72372D4A83DB9FC
9034429AC66F519E59A0C7119629D76D40531FC918AF87D5282DFD38AFF2D142
7BA238B6B49A621C2617036A56DC9D066628236BC4049E5ECFDD09FCEB805B56
FDC6112AC6BBB4EF30A953DECC50F65015051A44A07E6E7BCD1EE1996324B825
932C2779C3B008AF46AFF74781F045E3D3F22A3BFF1EDAB23E06267D9AB0488E
808426304BC76E6892FB2C4F4804329268F442AD41555878C048B6BC06A44D45
A2429C612FE54187EE39B47F21FA1BEBF910E32AB9E90FD9A6DEB8F502FFB275
DA635F98BCCE344AB716F852E839CD5ACC8A4A5E18EDED9A2A1841400C4D6498
5AAD55475614AC88C2CA45899C48AA38C3F13EC88F1F98A1C662D64846E23705
ADB3F5F2A1358044D7A182A84F3AAC817E86DC5DEB46FAFDF84E0F33A2EDCD9F
6667616502AD9FB72610F1DE95D4CBE4FB3ABC6B5061E68BAE41271E9558EDF9
314AF146E6642DD82DFA830E4ADFF1A3C4A6E985EC261F19E0FDC31E6E12E618
E401AD0BFF8E5C84932F5E76D5CFD4589215AD5964A7EB397C121E67A13792CA
4D169A46549F3057F6B9391A31A0D4154762679690F6BD7579131C2EF6C807E2
554D855442A4264BD59A1AB63F1268624640527DBEA18DEBEB76675CE8DEBF43
74FE4E64BC84085ACFF4027BD9AD7ECACCDEC0691A2A46B866F4C7596B3D3867
CBE5B6409D4903CF34661114F0F2278479E7168F2F4E058C0177456811B2D69B
DFD83F0578F4B87B292CF288ACFF876722171F40EEE1BB524C42C7A0919190FA
1658A2C697E273148590FBB65F2E28F90406AF4AC2B930BB0EE89A8DB1E5734F
292F0E04CD0E90ECD126615B9B3FE7B4B1680BD14BC5BA2B21A6CB648FF2E32C
AF4EB1D165EA43C1406D6CEC28B104191454F3BA5CE1AE0344F37396B21E7FF6
2240F7E99821189565AC86909FFDD31DB3764FC70F8B04049DF748C1248A238D
3B0860A12B928D1EB8BA9076F681AE2812BC4BBED2955244FA8A9651CFCD29E4
12FAE8FB58309330AA601915C33CFF111F801E3358E4F2E125D61FB011C8BF9A
79F4DF0F83D532C9C58E7D997A3DBC73AF1C90CBDA109F6CCC9B275F869ABF38
7B770292A4CA563E6403B454E1F43DC5C2A092953DC938880A72A0EB1FBE7B70
C8CE0AE57426572795B0826FCE0CCE49BBD3AF7E6E68A775B21757D17CB5968A
3848CA0BA8136687788653CA9F5ED3F9EA7A85CD0B6B77053EB71F354B6FA642
B5FDC187DA279FF7D54B40F95492F5710656EA8E2A01FC1F322750D4A79D8878
6814127A118BA16770B47D01CEA50E0D6555854323FE00320EEB97BA530F1F65
10D8F19ACD02E04943BA7EC7F18E90B5C8C7C8FA49F5377E16806EDACCB60F0D
8085FA97FE6F890EF8D6B0D502750247BB25006F466250647F37A368E6A35F2D
504F45CAA0E02507034F043B65E1238AC2BB78CC9C8C10D9D6717D8203BD4ED1
BD7AAFCF78B5AD0123ACC3E17FC27032E69A65588CD61115FC966FCFE51A1B44
BEE691D8D8ACA1B60FD474A38C925E0587A1CCE74D5654DAC27E5A307812B4B9
8D263364063B0E4937FACA6C2AD0085A705CC4D79163201A0CEFB50CC51C1C2F
D6C44253D63CFB795AA47F20934F710C5AD761E6DF3CFF00D18F5372E113BC61
8D2B53E10690B5CD1648CF500B25901B8E9D78CD26F0A8344662DAB3D9C52439
DE7BB6EE83627AA645BCBD7576320CCD85308E94F8C9FB4BE9A83209002A17DC
ADB0D655D022850FB206FC42AD1B38194C61F1909488B3C1295FB381FFE037D9
126BAEBC8F876254733A9A1DE3328CBCB8FF1DED4C52CF8342120BAAF0D17A18
61AE0DEBBC21E58DD7358A8F6299B5F77C003D3FD70D1FBE03B7E6E5B7FFD0EE
BBC826E2C4F58AB1E95CD5E610C1781A4E2DC6BB0CE22ECB78CF0C303A13DF4E
C5B2A93875AA2F4900120C59B9B2FE8226C328E5CD853C86BFA90C5B560C52B7
82804649F3E4B99BAB27191B4CDE8CFD7CD641B113D3A4716D2FC8CAF0DAFB63
A8C28130E159196FDCFD91362FE6C3206B35A1BFF49DC4C5835EC42810D26A65
497F9C3810DF01720DB290D43B3C3D6410395717A5A0B4134C30EDC7F97908DD
C6E7BB65CF8A58DE8E964B7528F422DFFD3B72A168E84519D138C233FED4D3A5
C33396FF5DB218AE2CA8EE74F547200678D6AA96214A3019013BDBCEFA209821
8C07205E981A506B03CA1FF837AB5D7E0B35306BD2180CD198138A8A4A8327DE
2EFBCF5B4B830993FB73790CF101C3BB9BFDF16CE4981DB05013560761994A7D
47CCAD33572C36AAF5787B9868A0DBC5B79E97D0F2752100481BBD994D8880B4
A972C02B5D33E488ABEE172D57263E165270A9347B262FC988621144A4E91AC2
C563B89563D05A459A2E96E54920E7C0DB557E430D938CD7975BAB77F6C261D3
6A96414FE18030F79C65F0D6BFADF71412B4D76F1F40D5A6380793C569B2FE0B
7C0B1CF72B5A6A05D214589C0523572E18F9A47F8CDFF8BF4BCDE29D4727F0C7
E3EB8C1EC1E854AE4B6EEBCB387ECC664BCF70081FBD2DF08A666132032C4DA8
7E55A0D1E4A989C114E050A967A3403B1CD3E5F08D92F8F5AB20DBE0BD38E910
EDAAC90F03566F3967F6E7AB615831FAE5CAE43F53ADD82F826B41851E9B0890
CD35A34EF817A488CDA0A235E795A2D32193DC806F265E007102DBF4D3ABD2F1
23D0002D0E42C20BB0F1488D22883A4EFFF39F0F907AD9B9E26CCE8137CF7FE2
C6A65986BE56B6963895212E9DBE3712DA72561558B91F2550B15231F9DF8A5F
4B2B49701005765E083A4F78B77DCED240B80FEA6352834FD958C0157DA1F07D
D34286466DBE31438217C67DD04A62CAC44D4F76DA5456FAF04D5039E891A4A3
412DD35CDA9013BD0FF60CDC31E3B9F373A6AD48E22864E72F06B7663DC6A9DE
3174421A62F05007859E6FDDFC38A6E18B0869CF6A19B54CE4FA4E2D3F269E4F
F903080EEBB6211CE96439F86F6EA431E262B0519776D08CDD2C316425589E93
77E778CF55790937BF3372B696F491B63CE0223E5AE204577B488B07659DAD28
B1CC9AB2133DA7E4FD58C7A5E674FE385E13DB82F67C62DFD74A789C9196E043
2FD4392EA526BEDB4F4C3E63275B9AF2D5F6FD071822720DC1A86D700009CC32
C72D96743FB38E256682C68F3D19096574A8F86F7808B3426844F93DEAFDF239
4E6D2BAA56E56F82678A43E3542802BB107E64A287F6060447B4B79D9D7507C7
A72000F255435532F9138D36D36570FEC5AA20CC8A59309EBE7C6BE531E1E395
30556DCF48BAA713117E64F1D2EBA4E79B74D458CFA81F454A817EF7F9687F33
31AE4838AD4F8B0EFA31A2F1D8F8E087F9F9E4CCE2FABA01AAFE06CBC8EA4D64
E540D26E9F06D1A19CBC2614C76E49A2705B173A89F7A6760120FDF314973FB1
0DA2F4C61FAB95F210E8132C5FFB8BD5D4B9BC26D585A021718C7C3454511FFC
74160DFBA5C36C93AFA0AFC60F7D3E0B52C90099B45C099609C11E1A3124EBB6
2845A2354FE9EEBF26F8E325F603DDEF511A7318CF87FD82296B8EA7A6725C8D
5D20CA45B12505946657541282EAEE8B9563ACCDB557D8368FA8AB2D8E1A30A0
05C89673C44BC9E44D55AAB8FA863578CCA12C37E6138175DB1E665E6182E2FE
E6D906455D3EB5D6E3F045F5F2BE166D1A2EE3CAB24660E85E882139E7B36D86
0C82FACF805C88FF6E8546DE92204831FD1104C733FDBC4AAB8BFECF594678BC
2FC211171A99EEE9A9328187E75BF65A73B9FE1A964E78E37067932BEA3B67BD
236BF42D763850EFFC3459543B8AB2ED8F97D7E4BB8915BE8FFE4D3715FB477C
6C139401FF961C4A20C85037D49897C0DF5B8C8B3A30C7F99C330221FFB1D59F
630923CD601E96E7B062BCE3D7E81C88CA7E443725038744039F1D45558E036C
EE800D650FE211FB2DD05C97CF5534D1F6381CC7CC310304800B5FF66CFB6FDA
12DD94D52B7F6BBEF1F764D1791F89ABF83D7C748653826CEDDF6129AE421187
659A469770E0694436AF93C6AE79687154964BB3D16113594454C0C981942BE5
68C90A6AECC732496B89ADB6CD42771520364A3B32519E59F32BFB525954B688
3E4D1B6BCE6D0F7B50A03F5AE5EC4A7B3DCDB5804DCA1D033FB7BECF02BB5A1D
ABD16D25A4043B4792266ECD37DDAC21C503D307F62D1BF751CD2A343B73AD86
7EC5D91FF0C1687D0392CB6C88A4648AB8C0E878C8E082CA7A1419E6922978FA
202BE4D32BDEAC2807EB52000FA92EE15669F0C3F8072DFBF0865647E789FA07
C984AB603C0BFC32DD3D646988E8F216D905BC8A919A429F1315C39F090CFA85
9BC5908E8ECC2DE7F7982E69ACC10DAA240D6C35FB36FFD4C943EA37ADECE5AB
C8BA304FA2E123EDACBC6CAC96D2DA2554176874D3E3E5CDF2A404D57CBA8069
5FF0CEBE1377CA726AF7EB290B3806E45F960D63E6C0214D8FADA4047ECB8C16
3606C385B0C7B56E834388871B9B75A3B063F8F2DA469162CC920ECCB0045381
628794E6A744B279A1721DC6AA10FE669B490C64A07ECD3E3D69212E49DF0502
AC2587EC6B8C1ACAF69823949750174D7545CEF4931F56CDC90C6770709359C0
C8BA11B6FE9DC8EB5634FA48958F0C8F809BF02422148FBCFC302013B69C9BEB
90302EB2E28BB8A8635C6996DA3CD2E1F2EBD858A0ACF835458B1C2BF820567A
6149F7C470448B2EEDE0744CAA7140C911D65512FD04D86E351293DCDCCF896F
22EE907D1C3FF4A693C94358597397935242530DC0F2F31A0AB9DAD78450FB98
75B99689CF338C2D7FCFBB5FD4CF9F55B68BDED97EED5CB6991AFAE6C8EDE1BC
9D3352E68CCE06689D9D67E84F175780C75D9E3D79AA01EF6D672212A14F1FE0
237FA9423B160AF338093A5CB2B93AA44C7C3D7AB8F7627D126ECDE78B1BBD94
C5E5CD2C3EDA94A18A4BC4106F6326DB113B3EBE7FF50CF75695CB268F9B6988
69B9ABAB244D999E70362607ADF89D5EC17E858D8636F4A77A764689082966F7
53A7686F8898E5424525B72A45518242614375AEB7CEB492D29315B0BBD12726
E529FF085B818F53AE7B42D80716F3F33DF4A7A8EE86B5B302DEC8106930D236
2FF9A7EC25D0F8DE5FD8C8FEA72BA43FDF8DFBF84FC2BDCB564EA7D1D067B20E
FBDF8ABA37C3726993CE2E3B7D496A86B3A61F7A78FEE419091C6906BF7ED3DE
D73F3CEC1B2ACADE91E783C6A1BC008421E94EE76926AF11EADB18B477BC40F9
AD62B38ADD48C2E1232F369A5B27AC6FC83A0294475054C33C3953304E781E5D
72F3C62D7897C652D4203A0F839536D851B79C98D411B935E4DA04A99D35F260
EB79FA98C2302613D4E7170154EFED8EBB8317CA9A9086EF3DEF3E86D1D09460
5C22E52822523F62064A66FB50AF9CE034B52FF3655C23F756AE7AD9F459C540
824F814A0BDE40B1DEC7131593E159F5266E4F9C1AC0355E25F796770CE97200
3A0CBE1CCCE5D962264B3BB71D9560ACD5B9138E4553F093D8A7479D926E7CF5
AABB696F0BC35897B1CB2BEBBA6D68079561A8053E834BFF14F1B1EF93D59BE5
5AD9CA32851986477A0E9D9C9C0A7B7C891CB44820B90DA95B5899C93A6279CC
C11709D1DAD1603F8FC869163D248D98EA9597744A92A2A8BD65F733715E4F71
5A16263F0CA8902ABB231646A0F62342E39BE9FA1A286B6C948FA4652221AB31
24A510004824133927D94E1E378AD2128DB3754D13D2E066C3E746D9436B9CFB
CA5CEA1E2EBAD8CCBFB7CF14F56B793667984750C884EE3E836D25A5050ECA30
C9B30C78A2460CC91DC81D0932417A8B683C03EE0802D016DC954EB9EBC90DEF
3B65BF51309CF4331FC173A923B18B181C72BACF1886F83A7B1C5541A174A439
C49E6DB1E1EA96EC6B89100E6519F91B2DAED4632DE09F75D63860DDE777BE4D
AB10088B472145594C04D226E01A93E3187A1BFE620E6527159C9708265B2550
2A4BB919D04D6B61260329A12504AA41E18502EEEDC91051D62551FF6D5F00D2
D0409F9C2204C85BA43E9EB7E07E93A687D9288BB7A7C2BC60531483C3192DE9
9C67DAFDAF0A69E66F89BE2537253575F480A08459D6E0422E3FA2729CC1EFF8
F8672BA63BAC49A227F0CAEA4BDEC59FC73B03819FA1A464218C8372F4F98E08
F5E2C52E1C012CC45DFFB794B415A44835D8704867E929E8C8A3A1AAC446D814
D10846C4E7C9741D725BFD45F14D03C54B69C9C958BD00BF3149AAEDB81F0124
8AC51C7A5FE3C6FF92AA1E99A2978699DB72B67D8F094757076433DD0E57DFD0
9F54E70FC12D821718D7E35C6CD22F2AE0C775F1200536AA72DC5A6D177E0D01
274CA24ACEFEE099E268347436CDA44FBD4FA30C31974C460C41923F8B0966EC
C6BCB07DA6FE56FB44DF02E58A5AB464C81BBCFAE991D2C47ABB9FDFE73ACF4F
B5A9B3543253B58798132F835F4876038610A90D31261F7647BAF738BDE89EA4
9B98EA3BC6826F9DD073F9B88E1E9D6E9A866F13DE2DB135E5B938F6C4A43796
E3DF63F965745FB3B4F3F5D553C6068D0E8B10915CFA02A7D5D86507D8DB4F84
7A7EA64A9FA097F2B9AC53D77492F4AB3997F268ACE376625D3E0D68ABFB74E0
D1DFC6C1D9832C904AFDAD1A5ABCE8FA30662471E7E146F3DD3E41B16BEE1974
C1F06FA369D484A8AA8D3782427A94B59E914F8762CB363F0324976F46339391
CD79F6FF5E61C6B8DE063A689F933DF0881EA638F9C28F9FBDDDA0902ED14965
2CCEB47070196B25348FAB2F4E0DD3B4ED864731EF8C35CC183489ED6A075A70
4711E2E3372BB148D526C4DBC8A14EEE9702DF0A0120B72E3E9D593CC417D001
9ACFEB8741FF29D82897816FB028D552859900C672ADFE4C77B8D566A157ACFA
08E590A04EFD01256B262DA92D23A4392AB44CD43C30B30CBC87964C070CA4A7
8B94BF2848F1B20A07EF2C23701BD4BDDBCDB466ABA4F0AA32EE4FE7CCAE9FDD
C16E36BD62D8E352D89DE1BB4610927B84EA6E5AE4F0B6877CB8826F7F17E5F5
D565D83D97DADA4B9DC89282B64FA483601AE1C4CF01C12626B00E5060342E40
7ABA2B397F6444A413B7FA6D4C6AC56A26C1D9D7AA225032F6478421812B6409
AAF5280A22C8427BA50860F56EE526D405FD604D7BE2293A7BCDBA915BF2AAFE
B126FBEC4C14622D9C5992315FE1FF5EB8EEC79333789AF45FC572C8C34A44AC
F0ADEE1EC279CE6BDED111775C00F759259C92F9B480B4B44A840DB564EA3153
C2A701444760B110659F0441C1590D24287CA6833C6CBB67E316D2457CC46942
8FDD70A493046076A6DC7AECAC73B1AA5530994960DB5747F5D86F0D088E728A
EF07BDFE1CB74B9B0A91AF145809506AA53B67609634B29F60AE343F5A5E5636
E39D3CFE3933DFE9B1A32D29AAF63FAD8ECE834696BFC21CC79FB422E5C9D337
8F4CAB34F6C7DAFD7A65EA2ACBB7513F441CEE0BC6359694C1F197A078C85A84
00343569F420A34B47E9088684FE1AFE4E25BDFC7F9979199F465462E01EF726
A1FAE765017F2A8D3CE2395E99B536DCB10CE7B0FFA237181DD1FAA18D7DC5B8
74A5103586DB4EE548DA0B32742DDBC3A3F399544AEC8D629F1AD32769D5BF1F
8E62D380C73C52A3ECA1D7E4AC03E3B3CAFDA0ED336768BCF79D8E983481E954
BA9B8B483B5FFCEB469176FD54A4A7F8FADFCA24474E2FA0A78C26066663482D
2731A44D207057F7BA34BEC5467B4D2E8BE09E293AB0B8EB1F74EF96BF39764E
AAB227D08CAB6C6E975D51D0C9BE3F102DBA320F33EA05CFA1CB0AE121DDE65A
205460446C2E8E501E923CA429A159AE06AE395410B16663A39FC81D03EEF678
658944C8F72FADD22BDABF5BC78580A7EF796B219DA03826C245BF52123853E4
5B70D63B92A5652C4689A594FBA6C9E102CD72C857956C02A06C046B7691688F
DB93310D743272FB0F0F90353B3D9A2ED722DF79FC6475539F1C7D44A5B34CE9
CC823E8EC91D59C9C53FCC6CA25EB802F0F7FF9F552AA088D8D384376D45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FF828A198888
B3136207F7F134740B09523F07BEF10B0BB14CC88CB35ABEFD912C54665810D3
1D881F6C47B6C47CFA943FF9A9F5E8D5F1C3E6CCFA5CBC51647CFF73C6FC0E2C
E64D636D0BDEF920C959F6A3028CA0FD447F07888D4C46C3BB844048F778053A
784CB8008AB9106E7F5458F9CEAFE7D68C9C6C43C93305F6895A72FA44213D14
B429E35E23D2AA1E138960E3220ACFAE7A6AEF112861D3A98BB8B75FEF5314A8
1C8FC0B12B655E97CF2478E685CA897AC54A3E32DACDCB0EFE22E31292430372
9C888A5ACBE4C407C3E6617AD30C7B3ADCAB60ADF54F6F08BEAF7724A458E8BC
79D7EF275D5943644B530E8E75554898BA9A050C97C9E10C95FF3F881D22D031
C9D535E80D590681B742D6024FDD5721171627FE03F80E19E4C61C5DB983DD48
5D9682F41FCC2ED823B7EC6FD4209B0C7C8543B3DDE7C7ED58256A859CA0FF55
EA6121485624145A0F1522CBD6413E4DB42DA843C298951D784019448B7517AD
C78225270DCD69EE88E82D1FF2F3E43D56EE5C013A2A36526BB777D9DB49102E
CC8472A298DF113A904FA131F9E1A324869FB50D3BE50BA29E09D76E5F8B2C7A
23D870B61A74F96D180BBEE0FD6150E4A8F797156D0735CAD73632F8EE970DC0
EBA43D2C700A1D5DF8A6E40432CB09DCCF5C286D5EB04E5A7D952E716E855FB5
9561573AA857702B2A8F48F563EDA3F739266C7C4308FB3C14CB6C3C656047FE
57B63F1F98B53F6B0EA7D9EA5958819F5CE03BEF6B59B669723240EF44DFC0FA
AD37018CCA129A4897876302C02AD89118AF5484BFACDF4042ADED538BD62F0E
56B631C8383C06ADCBADBC2933C1D0DAC1035A5A6B41BE612088E21C9949FA81
B89CA8C81756274E6697F71D328B75C8AD8808B0AE054CD40FF05C077FBDA7E4
1941A3FCB3BA2DA3ACE7B900150A7374920D6F63770EEE3797CB112A46C5045A
537C3675044E5D07B6220F4A84B8681EC2AE04CD5590CD3E0042091DA9CC585A
F0DB96830882E052640C1895F123958673D79A11B86171989E04A0855DC98E4C
886E696E6B1C423F65E6034F7ABA38E2DF855EE6C1D1F312CD898D4352B6359C
4F4067A92B8F61895B7CB1149DC00C8E84A356D705D285B98AE3F5909EF62FF7
3C2B3598B270484553459D56150003B76459185313CADEB3270A4737928F35F9
77D1635AEB7BDF9102F3F4567586DBAC95BA2524460F725E819C2EDB831D9BF0
69EDC96F3B8F7F3522F275F35018D71033BC87D22616750CF10C2510688D9DCA
5C19DACFC81E5E9F5BE82BF6E81719ACDE43012A2A2AA699C0779D7C087E07CB
54012E4947877EB1F3A6A7BEBA49DA9E1BD3A55C4D5938058EC691D4D4FE8138
50CA1A40FB308E0E5BF06D0F86AD72B48D8B376EC4A4BE51FD2D462A0DF9DA52
5FC2DC85CD0D7943220CABC397CE703AAA6CC20C5E5E795D0697204AE4DCF7A6
1BBB621E124286F4DC96C63D6487ACE56E533D99D222F957C5692644D3A6C41C
860B70833B92B46D94BEAEFACCD0DF05A950ABFADE5209207BDE15B54B36EFEB
87E32D52902FDEFCAC8BFD5AC3CC082C816272554917ECC3E62E727FB085BEBC
91EFAF500B75CA4DA865F046165007FA70E3C10C497EA53B295F7B338D41724F
64744353675857003F735EBD3910BEDCD4DAE0E2FDF6ECC45599A6401CBBCB31
1C630ECFF30929783A8622D6E61AD3B2CF766F4223E6FB53A8987AFE28F9068D
8FF519B816011D37C05594B18B7D052CCE37604545427455BE9A926C7A8FF4F4
5AFEACD58AA7A9FD22529623BD472E3A7B05FDC80205ED6680C2F4E2290E69B5
879BBDC3E431A35F75AA9F2EB2A871F588D26B12A911BCBE921B6481C78754B6
7CD39A57B6212CD3AE3798F900A467910D50BB0E97CCFFE2322734D1933AAF45
78C14C3E4E4F7BCF5173487707F97A5687C91514A006458A52B68E702ED7D3CF
D31F6D7E24EDA259EFD7C89DD3F0B328490C546A2BD7B5C158C66DCC20F69219
562767BA09C44B8F1E68BEBF387FC14E6D6CB2835B77B564586905D558A3CFAB
0F1F34265887B1A441900C9DFCC0F7FF114C014E1DA800226FFE901C542E80CA
5C31C59381BBD28ACAE9AB91D6AC703E796C80C82B089529D4EAD3497857296D
50BBB2C4CCD8482EC70CA6A0540FE3E2E4564C53201649CF6C6D1495B4C569C5
4F72DD378082AB685883F39EB498799B85D9D938BE2E37C09CE0D7BEA8AC64AB
5EB732353CFA4ADFAAD7EC24561821F88A7F6CBE1B1107621729A894C3D6F952
29F95874E68107DFF317DE1B8E8739FC50DAB4DAA8F864F49D9A357EC3F70A35
5E16B2FC611E0ECADF9ABF4EB2AADDB2337DBFCAF84370CB2812E8DF9C6EF0F0
15C8184493FC6CD3E259703167002ACA1C42FD15FCC4C0F0F5BA7AC1FE1D07F3
C016142C1A8B337A0907F9192DB48AAB64B1B5C928B28CCFDE020B76AF506C7F
0A6CE045CBC7F689A036B0E64C7650DF6FDBCE3A9C30E9CD14A077B05AC158D1
907AF6028124CB70D690515B24EA7212A44066BF66F28BFC3E676687FFB7EECC
B67B16F41F33C4446DB8D102B28FCCBDB2D359C73EB3C1531354D201411F3D5A
009982BE326079AD11F2FAA87AA25C95F564C465F33FCD02E92976F5C5EDAC41
F80B174DB421366F5F72D4D78C92ADC91848DA53F5D740253F933C3956B3E9EE
F229C361D793065230A85E7048F16FDF28B8C7B704FA4ECD1C2C6E669D84B0EA
7776154C0937FF9462BE3D409D7DBD88E7D715BE5C52E83D1B966CC48999B193
67801BA59E660FC5B2B1E296511DDDED30955B9E08D8BD04B6A33FE4897153F8
5738B960F8DF1BE13CC06BE30D434EE42C60407656EE331B74B817793536F67C
1588EDD14D6BCBAF4D8D22068B39ECC699EB8815ABFD76B252DA958829F3C7D6
1F318AB1A73996DAEF61BAB889712EB1595CA37FF9328D6D3D449AFDF559CE62
7D14BDF05616FC958B62CA3D347D28A289F5FBA009CDD6A111CD7D739BB8D026
A77A7F8EFC9786DA0A8084D81A19F95B9E58BD51DB85ED12F114868A150C2282
F11907197FE702E737FEF91B42E0920059E9B785AD973A29A1292CB013452742
6997D133E2C3977DAE76EFB368780859672948BCA5FD27C47CE9CB47C28D01A9
1B6E76B736216A67F05C3FD7CF64A8A9FFF59D8BF03C3FD382C529189BB66A22
545962DDACC508E17FE72912B39338A6BD32B331C1636BA8432B76C2665910CC
59875FB5970534AF6BDAD171842C14D7B5909B32F162F00F713D2D867250238B
943EDBE32CF90B426509EDDBD948C91A4D4AE93CDAD34F47B7D9AD54D6FE7DC4
E9BFB4D1116C12A262F18F14B56C3363857FE3DAFD7E78AF6FF12DAA03FC1E77
EDE020C8E1FB7C026EA542CFDB344D36348F57E36D2E7C9076C460E04D8CE811
1038D199C98CB82AF84C5C8BCC1C0E760938C983573191784DE3CA839664B8AC
B442DB8A06B993088E210C91279AAD5922A3546551F93A04DFE97F2E173BDD0A
4632BBD84EDC3F4E9EDD96EBF9DB710083A77BDC82ADA7B15D4FCBB6EEF0D1E8
D951A64B5C906CF2DCBB971946370872F2FF07725D7960743E8597CD16935968
69FAF56FC3A52BFE9343C144A726004BF94A3F1E3582DDE937056543F2518649
1F55D29BA70AD179769D3D0665BA511DA13FA80C38D66ED99F83A2D8D2A848AB
12DCC84EDDAF6793DADF3A21B8A64CDA71A04FA87F2983EC5B443BC8F303D24B
AD6B5BD18704DF25E7E8A09BAE1D089D22B3BD57A4FBF9C5D261A4C9B705166D
4B5191F15B34C914C3B7F11476BD78B10700253D3B7588222674C1BAD629B139
7B6A1841A4EE350B56F6E10C90F2B9539098B96BAF697D64B43EAF4ACBAC80B6
B231F15CAF01FABE4AF240664FD664DF19665AB5E8EAADBC09A24CADC94ABED3
1E5E213D9E51BDF60DB7DC97EEF47EE331F8B4D4361D770F048B796277D5DEBB
40EAA5FD0B1E2DD7144F806C03609E7BDED836118AAA3B50928E8B20CF4940E2
9D9CED011AC2B51ED30974106D20662D4B9A009552459943DA52990173A4906E
B4A1F451E5A3E5CD56C354DFE73769C6B83D28C689A6AEE1A5E1E17D5F888080
57BECAC90AC96CC0378F442B883DE73D3E3C595B62A203D5713A5F2CADC77BE4
5B8A77AF9F935651D5614B815F5BF9CC780D7FBF21B39CB5B5BA700D55130A4A
D8B43F65C08505E773E0925B683E935E366FE2514F44EE67F9147F048B5745EE
C842FDA79599711C6D9D354D69424307ED7A2225F03E06193FC44BDA90DC2985
B6645020E2FBD5DAFAB8B9F521C398BED286D6F54AC0835B6D9D544DB2CD41CA
0E7C0F5F6F3A55EF20C5CA68FC9220CFC9DFDDBBB8381E409E0C2E48C5275A38
4E51B1690B5994BF19FA479665D8F37A3FD940B5B7DAD664AD6A19F8F0894C65
9A61F005C6FCE1A0E970036F5F75F7D7C33B34562A5AF707A6DDC41F982FD30A
78DCF6A033669E1D9F459EA1793927F359319269D094ED19B7F08114AE0E56A3
D310D6958AA2348E1D3046B3EBCCF9A85A1AB47D180AE3DAF1E6F88F1B68C02F
67BA98F5C3FB041763379F634CC4429B1F556271B4356BF8281F2D2B14EC4E29
A026429F4F61408A6E0C6D8DF73FDC7EDFBC7613F29AFDC15585EA8EB755246B
6D33B47DB9B9E9320DD32072A091AF2D6975AB830424DD9BF979FBFB11B8893B
AAE5178E59DF1B31C4C271AD664E55220055CF3BCB76B1855599609E0F334B1B
43350B9C8E34AB22B6434EFDD368800BA39E39EADBEEF5824C7EF1E75216C10F
38588227F8200B13F44F655AD6FC40955A3EE68C16EF312027DDD4239C57FE69
9CD9F0CABEEAEFA2A97D02C82012CAF1158A098CD4C026A95D677617CAEE4CA4
B282C8E80A854E1D4C655A690689B7B5A19F8162E5D8454B73B0CE79DE9AE457
EF670B5510D5F5D44EE1CB7D9071466AD5A06D39218F0E68D0FFC9CCB76CE534
C5740DD13E70A4B7B10B30575ADDF0821009F56814B456B70B649456956B7852
7F2786EE394D7235723125FDA627D3A310C7D837BA061E3881605DC02F7B24AF
06741834CF663265434F3351E2599B2F6F443D37474465148135A883BF18DF36
71041B695C0773BEE7AF6D5FF5935935043900CF3BC8D623C6E01540F6FDBDCE
C7A329460CF5969CDF825A4BE0DB51CED4388D55E40A38990D05D36AFFA8EFB0
98378069E3CD21663C83FF09AB2593C81AC236B564CB669829D6B1ADE2CC3A13
5DDBDD06CE28CCB60A0383BA1A3EBC02AF24E066DE8DE7C9A653177903A03BA5
FF3586BF69193E591231B2ECA9667BCDB80732DEC5629B19B8259425A20E3618
AD288C53E0E6E752903037E322B4A87BEC1F59119E10946BA54AD4A89F5240B4
AB9DF804293B2DB724600C7CC2B301AF61E901490C8DF60F624685EE5E0528B3
6FA75D7567AA288312539283644DEE44E8532B2CD419B8DCC87392A9FDB4F0A4
07E67926A4C335B9EBDD118B2D8F15FE4F89517D4C07531E5FAE089A21C1D49A
8F89F27D84B51D8C3E4B86EFCFF1C0E19F4369AD260BA33EA1997D5B146A9966
6D5EC0FAD6AC9F5398B1DB515AE3046E99BF5928AE68403AC7D2947BEFC8A09D
0A8584B741F0A4BD19649A69BDA6F5CF710C66DF6F504F14DD921DE3B6905DD8
4B1D25775B46790D67CC0E5BA4DC69B2B79011B86CE236D75A99D237FE85DF66
31B1549089FC76A7EF49070BDC55C3ECC1B8B7230C66B0276538BC8000438996
0EEAFFA4BE248D2F1AA6B2ABE4A8B54B457D74053D45849F79E246DD02FB0470
6745B73D7C2AB55BD5D87DC7B4CF0008880A16636FF8395AD1CD9F7BBF2050C0
49233012F513FC4F6132FBB9371A8882C8245246248685652269083DE98E5C48
3700E79F3A9909658F324FFCB2FF776E16C7816C9D7E40DB7E8277BC5E82EA76
DD74D0200ECCC71638CD20B21A02A4E9FE7453FEE0ABC893395EE30C9FFCD7FF
3BFF03CC183197ED8446255064FA5AF37BA153D1B6B74A8A547DC847D5BD496B
12591A22513BDEED9589524EFC6937ED683A217AB0487F8F2C06F787CAEB6B9A
E1DFF124C41BE2FFD2D92D6A63B127942541801E93765C3A7A65AB9BBE8B4A8F
99DE329D6E191DE67A31579105B968F8E8FCD31C57E77A8ACA75295F4A4A6E8A
CC3CCA3E4629D646641CCE6921FC63E381088BC7191A43C0E5635F87E1467125
B7EB3C9E6FEFF6472230BA0D974F7177838E6598B835A0B93EBF2BE99AB07D14
324923423648FA91C8F0FFD2EF6711461094E7CBA2854435ADBC7FF15A2B0A82
19210EF4F0A0829375589E07AE42526F6770A867B829268186D9715871C53A42
F2AB5BEF80E083E0F5AC5136C945414A8C19CCFE52624B8B884C9682DBCBA5C0
C1A2053C4C38D8B7A0E20310F08CF409A3E2A9747FA7EDB021F4DD7E71192BD8
20E99CB6DEE2AE8F0F23B337BDCB94DE2550E46CFC2BAF812F2AE8EF92D24BD1
85FFEDF1DC1D924459ABD37F92772910D4D12CC2BB2EF8C75702A8DEB62A8108
DD0C232EE4484B0D32B642B0334835BEEC5F6DED12DBAD78FA5F82A7CE22A8EE
94E78163D13F1040915FC18B404FBB185965B96E57D0024FAFBBBC6CF4B18AFB
CBAE3773C8A03FE77410A768936DBB1162F16ABBA50F26186FE1AADED282DBB6
00935FD62F962FF4C8BEFB1D636140B9DFCC29F4A3B54C712E006E1D6BD99366
8999C3A8547485E0519FB0B6C5BDEEBB9554D345478169554349A564093C7788
700BCD143346603DAED4521F35DD3F4182D5402C1877C3D4245559383AA105B0
3EEDBD2E68FA65D8F6D32D04C681C42D15D8B8DCDEF77987C808BF0E93DC65CF
0A519FB5A109CA9D14EB30F6F4C1B85C7C57BFA2591C349D897BCAA28FFDFDDB
25B9773493EDA9212CC1581AB40EC799FD22B6D45FCEB6F4FB134A21534AC1DE
54F01ECD5C2CED3A0113890BD4180C41990C4DAF52B2DC996510F6E87E3B4D75
685B2E9BCC9EF5096B43AA015341DA4E2EB4DB9D47D3C98DBAF3D34F4B785685
932C1F06187FBBA32F88BCB54AA8B1B656C22E2E5B610249EEC0E9A6CC520FF3
C45B5D1F4889E4A1C039D6CFA5206B376D2F261E6F833FED1423463869E3095E
399267DCC12771C6D0E14A141A52D9465223B3ED9E26A5DDF2B4F310794A648F
0D3CD8F51792E322DAD8CD3CB422FE2F854460A9934BCAC76B5E9D25F7C24968
B44D1B489C3D5DF5F7CCD561DC7ABC388F4539424239C618F1D92F6A4F28AF78
A3991DB149BFA1674F0C08108FD2BEB7162DDC1C5EAA483FBF2D06CDD42B722C
91B48050C0E51B8FA02E734151BF08D81A7654689B9103528A7183F4B70D472B
01287B8EB71FC711323E059BCD0C4E74D6550D00A567FB66A67AB2E9CF1628A6
C2A66C42BF46875F1F49A32AB07423FFFE67301149AF2103CD88BFEB388F096C
F490EDB47D493AAD4414B984D6CCCF2BDE5966B3BEC4476BC24224DD49ADD868
1232B7D78F014B682F27CB32EFF37E6BF1761D826FCE87DC302E4D03D2F128BD
632F16C8B9643D9B7EC3B35E1F3AC6C95F14FCE713643CA183F83E5901B9DF69
318790CC766E7D53451C02C6F1598405F645DF1A4A5582FE6AFB6816FB7B2DAA
62C67E20257FCB0D067F058809C206D19C54BC03C10FA55CD42F21F39A1B0721
8CA48BC688FB58003D1561AC85F66AED6CAEF6287AB767B368A47FB844ACE08F
8DE2775E6E05311D25A923EA9D473037AD3458E258EEF0533DCA05FB3D53A6E2
A1CC08CED7645E2940103FBAA321C56E25844E1F5AA32B1CB2D5FB7AAFF3F6FF
083A22D936D631FEE9EFEE5926D3FEDA26A24CC3C835929FA84A58034F413C6C
18CF06E283F5507F6A91BA7B5F898FAD1B239532A496FAABAA4B752FA5CE6E29
B164C8BF547A988D6D0D86F3813396563FC6C1E9CAD4E2B235CBA28CA5E888BB
E5EA8CB3342AC81E62492B4AB20CAAEACA29DF20EB4C55F071B06AF8A8365C7F
36EAD685584703F95B0C779360E489BDE89AADB21DD76D78E9982E7F69D10918
869984D012DC9C8BA99F1D790B11A53032AE55ABDD717914C564CD8B919185DB
A0253B0A0242E69CE251C1BBF8536F90AD61FE6F3D1B94517F1E1EA416C0CC7E
7CAAEFAB4F8B22828405C8EA7017E84DDD44D11A1F2D25F1AAE345AEE36840C4
26F4F8CBB4123FA8AB903D2AE9526F1C9CC5C0E5213FD5A366657BAC3A58A4EE
DF997EB49F8D967E148F38190D04AA380948051A8AA4DE3EBFB2BB45FC66C212
FAC62EBEE4810B8281AC54B0C5FC77455404D9D0BA909EC99E655AFE922C98FE
D57030DEE4FE5F590CC857D651EDC328DEEBDC75E581ACF42E7D29DEE805DE6B
4080429AFFAD514AEEE2788DC320693A81EC8E24C07FA914A8D0A58B9A052736
9CB13242A1087D727E117E1BE6045E7AE6AFD17F92E1F95806ECD5D0D8244F1A
53AD36726491FDF9A7724A5FE71C9992A65989A7AA9AC8B6930AE574DDD32FF4
BD7C970D920C38A432B226AF22FDBB0230826D4933775F24F197CE5F795AD6FD
88A160A8B646DB126C6397932B49CE244D2C005D27AD1EAAB824D6955F7A771D
822B6328630E368B3BBE58B98523D032F4CD25FCECB0FBCE04651C5532653A90
D2634811AB5143148162A07185595F10D4038CCB92358E3A117D4DA0AD52E76A
15C10E979589DE9F81137AB2AEC674E6008278FCC613AD363368686897700678
D035C36B96C5A4AF2EDF7EB1F244903D5C8ADC6A2892E1AB37DDB0E5EE5315C3
163A5EFE64AFF5E69C15F577ABE3C98BCE3C23125D5192B5C7FE83503D6A3EB1
74B267325E4097ECF7828882B15FA9A9CDE123FB2329AC744329237B957586BA
6B02A041BA1AE6480A59414C8EFD2B62237072BDE5C61AC05A6621AA0C9EC628
8D3D6F11FDF1757F9D0DB085308D6A158A3A8894F150FF4FEDBEBFB02E75FB6C
7122D7FE465C898ACC164CD2DF14007A37452FDF13916FCDC24108222ABC7C9A
1CB34FE001FFB78A2E58B0326E5D6F4FBF1E5625C2A4F61EC5BAF00B10E2987C
B77A8D4B3E3FDB36D8B4AFF7709CFFDCF70E7986E6BFF69A001600C48AFF0649
89706DF3FB3560537FD5D25484B3B33FB3F1DBF52B698D539C111D3AC7ECD97E
504A9737350E07FC7A0E65BEEC544A2F266CDEC3FB74A0BBEBDC861975991BA1
488AFCC110AEE7D7440F1D63A362DD4E26E00B53407293127782371D3D480787
204DFDA64AFABA899E79B697E645E902D650CC49E4C2551CF5565A0DCA782618
E06AB2A410C49BEC4AB669059C10F2E5F5AA9B5593498E83E6D9FA22A0CB3D95
EDEF311BAC618A94FF4D601A8A5FF4CF4D376726EEB1A1A35C5B1371CE228948
85355E596E26B675E716C414DAA01669BF371B6675A4CD848D34B92CD118EFA4
F44EEF6E646CAFAE11683B2FE5AC5EF34C15E337E74DD4822A34DCDEF844D997
07330BC2CEFCE5A95981BF8944D3A83F5664EE7B1DBF351FD973C7ECAE44B7F2
237EA4DE34DA4ADA008C983FA5C734ADC79BD917EF797C37856C4D35E2756358
0F54232019520947E53E88D5A641A03E80C230A8F13BBB305E307DDC3E595E52
57CC2BD95829D02B9C08091AD145A54B5A946B0E95C35B6057FA5F8379ABA0AB
CA84E043EF7C2E14562CE69CC94F264E8D8B711CA869BCB90A84060923040278
3693FD5E3CC5AEF1EAA75CD60EBD6CBB739453F2578FB835EBABD1CC862713A1
FB1521AE1D8109A640AA0B141410E209E66248F9AEF77C82028475C8E0DA0520
B5F476841698499082633F93711315B4CFBC0C4342FF9CA5E0DFD640A93BAC1C
BAA943317DA99093B4E9C7F0E58BFFC4A0FF866003290192A5339D492E6ADCC8
4D93BE9D4CDEDFBBC734F99E4AC351CAE2A54FD64E3FBD321159389EC9A2E70B
8E6274F16ED1CD92B47A7B4ED3CC3561552161CCBF1691F7843A64284B8A8C84
9D61C34A5E16852D44B5BF3F9610B68E26830CF527E169211ECC03F3346041F4
A9C4B69E53E0A159A4ED5086C1FC340911E7F047483577C21484CC815B7343ED
3D0060770EC7C3EDC5463BACFE652316B38CA50A11AA26748BCA749157549035
F6F8947E59E363FD98D33D24816F21D130F6F4C1B85C7C57BAB921840220B8BA
2E9A5E07940E72142C61D87C901F3959C344DBD4BD58CD7D2FE44C8E7DA87C2F
677A6BC568884CDD911BCB25FBF929F490EB24528EBF8E492C66FEA54D6B4AA0
DA4B915CC97D8C70103737A2E51E52FC3FF1E48BC962EB70927B505266DEB4E1
5182917E61CDB10F4F30D0905DDDF1928CBB888F0C20EE8A538260BFA84A8AE3
3680C7C39D98B279C41B3C6C5867CB1554F7DAD13CFC050EA2C661A4E3A35400
99CD52156658727F6E2761E67EF8A7C1C1F29D6CE7A15C6D65C0BFAB40C8B593
B7FBF7DF33EEFD24C409173BF2E77B3E13173BE51FBFB9B7C8D7B03EAA5E204A
CF62B9657CF7D8F942BE12124FDFD4C4135BA05B77AEC7686E7239AE1A8D84BB
9AC92E8A9654A0FC0E8E69CCA55C94130C7A4AFC744224C93120C56362177749
35F6704F328C2F11868FF1DBE6A250DAB30051FFECF68BDCD5152B6EA27D7B9D
A8653F41128E34BD0BCEDEAA8F3807557AD545EE07CA1EEE056E21315CEFCB41
71D69F6EB66B6C5A4997D94ACB2F21953C39B4108E6B3621A4B88812CD8DD50A
958B9B8ED156F2C1888E525888557F69965957A77F77AFCCCD82CFC289D46552
563B36DA5DAF3F9BCE79308A13AB1A56F8A2355B4C9FE9EB95BE8A6A771F1808
72D18F41D15D937354B981CAE483B8C920A1022036538456C5FFAD123D4BD74F
AD433671CFCAC7731F01977AD63F957B521548BACA8A418C17284892C1FE5373
45F83BA5AD405A6C7FA3278070A62E5CD8CDBAA4D2ED8322F7626AC9DFFFF4CA
B9C5942F03F06D94A25F5305F24F69655F8DBE930F8E5B2DE7EA348E77C9719B
B3B5C420EFE7799210DF0CA6E16B7061E130910A5DE1AFD88E1F27AF88C919BC
6E7929643088F4D1C99603AD37D415F07A065EBC126C816B007C970804C3D67C
361BEFAEFEB84A62DC84AC34F3EC97624DC06C800A69AB040BD2DD92E3E329CF
C4E2B31F316109BD736CA293503E593C50E65B8D2F782103BAACCF4DDBB549CA
EFAFDAB191C2A10C31769DC26929D1663A112BF1324774AA9B89E35EEDD889E2
F5B4FC15238F70535468A80CB45D4626C366F4CEF3137CE036F8365F23DBE142
75EEBAE8941CD6285F4EAF84628C6B58387A0E20147A0637E3FE224228B57528
58F0CB983A90DD26A5BF484B162FF83D6E6CF6D56BC4B2D6E9B556CFACE4BFE7
5AFB5DE321D584DDA5B5DDF4E076D18D2E401214F9B96A0D05653288FEED18C0
5E71AD6D416DE4318230625D2AA066AB49C4DE54A05AFB1A561B246509C86777
64F6FCC7B3586AEF5F49755C29122841991069CDA2F850B1D5B03B3553B10C4F
BD916782EB2F69C7EFEB37829DDF62ECBCAAD97980570114312DA89B198B2E45
3337E4417832E4D0248315DFF0B4F246FA3F75B73064CC2814A48305C25790B7
0EE6FF0DFBB56A2C453EED9AE0885F4DEAE1702253BC0BC846300652D453B73D
56023A984666798F6FD042D254908E3AB0FAFBEE3533A490DD4502B435AF517B
F954E8998D48E92E532A3A07ED163F50EDAD05EBAB8B8F974BCC432016710B87
0DEF528214F30327A8212EF2044BAB7F914BD396A6D3A5587D905F9EFE361717
1140052F6EDA36A3577710E1BFB71389147ABAD3F725A7708A942F1CEF8C53E3
2CFA64906B285C9D7CCC3FB46EC9FEBA665C3EF1F08931D1A0233B51D1473125
9AE15789E3531330B882E3BA8D8885165B1091048AD21C7371F8F4BC9A3903ED
35D43701983B6099FC957DC3A008CFB172AE5F8620ACD11FAC6122D1A39118D9
9624F327F6E224F8520254EA53A77B6F70A86645C96BACDC9EAE70FDCCEF790E
B34D1BEF48C8FC4FA189D8A962AE59456EC1E7EB18167D762B179B038D83C173
FD9FA614F46FED6BE89CA684B0CAB1FE71C614310AFBD2753955AF504507916F
9CF67AB59BBFA4F966BDDBC0507DAFC6D9EBA2CAC9B42C21EB1D9BA495675082
8957449F469EB8E67E9CD350571C0608A701E52ACE4325B95196D5C492C6987E
180D3517A63D88A8C2AC6BBEEE6BE206610093F5FBE3407C4609B1A66AAC8FE0
E708F529AEDE53E09F00E3A73FA8734FB501885794CC160FEF1FAE76C74B27DC
BC711F8FCADADC071D7FEE180B021A417431A91EA60C5C093526ED9D6C1E25F3
F4344C3D10382DB0321D08CA8147255634DF0E134FBF59212F1F589806F5A958
6A73BADFFDC1867AB741F3C6E2B44AA95479E4E98133504E893D0A9A8816072B
532A5CCE96ED940B3ED7CFA73F11491FBE687DC0C5D496402627FB963A90B3C4
38EFB1B46CC3F0648DF86B62D63BC05E6D3BB770AF9B5A747EB47C2EB88965B8
D22AB04A724DED273BA060E797C1BB73CC9BDAE9C138DDD73ECA92B70D58AEA8
BAD797B3D3E7EE2E11F22B48101F2E0E89BCDD8B5F3CC6792459C05727C3160D
6C7042DDFF33A954DD01C8E21B21F8F364F0C8F3EDA8FD8E3EE8BFB0B49A2AC4
1080DB9F3D8ED49CDAE79016C180CB85FD2D1D5063EB4B2B2D85542665F9BA45
82A024FCEBA21ED5A28AA946632D05BB7CFC939512952B2613CD296ABC2B3A53
7DBC042E3BA32D6008BB290928A97AFCABFCCE42F80F2FA4B53FBA7F4BB96948
885D8CEB85C963B6B554201C489973333910D9FBB4225C1B2F0F4547DA8A1AD4
9A9C05CC49DC251206321A624CACAE006BA2064623130C83BC3A55452D5A4709
7FA78EB53A3D6F7268213EF3CB1106FB82B973E48468BDBE7092DE45E7BC90F2
0446371DBBA602BEDD835FE3DB4B06D79A78B96EF9DF60D82F8C712DB2086D11
4BCBF3D8310BEDC120F2D6D1DAEE7C768FCFEDB6FF6A2BAC2D53944F47E452EF
9EC8377106E2EB49CB0FDD55C143C4F74DA0684145948F45EB0453370647B615
66AC270B18932C1E89F52200ED7076B0453863F27B0F9340F6C78747E60E54BB
4829D1967EA896C096926AF366090564FC2B7ABEE7492D2196FE85284B3222AC
B8D4E2C0F3A18E54817F7B5D4DE902F742ABC53C06F50702718D0FC57EC5B1B0
91E0785827CEB7AFD708B24DB7716B64DF6C3440134B2B567A32DB18676BA82F
0A370B194B7AAA3C6A48124685091014EF3754089EC49E6850077D426A6C091D
EE5EFECC8A65BFEEC888A11CE54869E036D67ED51C2DC39FA93C7A188B49D1E3
3FF54A29BD63FD95D32F92BED6CD2F0AEBB87FE583C2905BE156E95925F42D82
F73A6A99029E58322602A5AE06744BAE758B478E7D390EF0A3CEC33FBD148CE8
952E6E83292D310C06E1ADBD3CE511B0E3121D976736AC55563730653277E141
FC4E690237CB8D25DA9F69A72E602BCFFADB40D2F9C978417422EC89E86D52B8
34E4AB9B449F059AE81FF82C27173CFC6DEE80DF3654989F61A8907E6E783A5C
3B151CBF968E761B5D91F5A332B3348276914A6E88CE524159B4902DADFB4AFC
65241632B7AE4C9C9BEB21ED155E58FA101918685C598553CD9E2B63F94550CE
F705104F31395CBF8EEA75A56C03C4AF28DBB1F273F939421DD3A65E831AEDF6
CF4B28799093DD8F65BA55CF0B996B1649EA9EDF864A177B0724F860C7660135
9426E7A7D188067BCAB58EE172A61824E037AD5F12DF23C63FEF39B8BA4FCAA4
936151A76B2D60E7A7AD55991FE366E1D0CBAEAD20BC8C7F280053479A3A8234
D93B303EDBBE9C97735B7C7DE878BE93657480EE0B20A204A829E167AB5A5F78
7CA3B1BE1C0F33FBE2163E9AA0ED9FCB266A9B8703C503FF9C9DB0985ACE34A5
6BCC27BE0D5852C4AB7901FF7BDC6F992B460A7114E13F2287744CB89B862CE6
8A415E9113E737FEF91B42E09200D95D57CD747F029DE975FBC9FA34E9CDD920
B0F7E2C38F138EE0922FBDD3D7BFF7681C951F04D6B0D0E599445910CC42F926
DD71C9A7F06A0A12746D6794B5EAEB7988162D46A117FBEC8A5D4A1BB0969A5E
6E932885990E7EE6C9F7CCF0EA814872E5E5079A8BC565D2CEB7E3B896593D72
0DBF66CDB268498448B6413766DDE50E614E2022AFC909284A4D43B36B695197
A556E05CC460DA5FF8BAA066043F44D1AF32F3FCC600F30F1DD52DC3204F710A
77E590211592D6ED66C5E14B9F6330FAC9972903C2C35C5D1483348AAAACCD82
79AC392046EAAAE81E155E2002BAE8B740656A044F0769050ED2476275D5384C
C384430A2282A4898258CD9EA0E9965C33E501E54100E989CF0BB55EC84C02CA
B2EE275D1A2041D7BFD186D88AB87DBE9F29AE099FB3E44585D25C6DC3DB8063
860692D8A40F41E91238E4D11A826B0744A352FBC02B408A62C5F4EDE17BF86E
726919EAAB315D335B1A481FE3DB344A5F50DA95EF3F0F921CF230C7855C59CF
9E782CFB09DF52F10FD3856029CF63F41F8F75BB916526A7CB9A829BC4B6EC4C
9E3FF5D79F8DF8BB9ABABC6BA8BF0A904D0DCCC3331848F1B064872B75F8BC45
57CE341CB5D7F35B5716B4B066FD03384DE92529A7803AFB7750933EB3D2697F
8DDEA0AF99FEB0606C5B432DF15F286B1A4A0166B3AE0673B70877BDCBD3C188
F08FF2AA1C0C1F646742DE6A5B88F22E93C820C8614D4FB1125D66FB13BB2016
124F6D3AC184BD38D522904656AB4EB02177BC98406E9E2213B604CAC0063541
1C8F8802D4748E92FD693895B9B777366802EF2263FF840E66E935796233C8C7
8843ACE8B66A5313923CCFA65C96E3809379FAD31898AF7EE87D71DB7A2F2DCF
94A078462A45A49A1E4C274F58B7943172689BA02F32ECDF1DF6128071B5E55C
F8825587FFD6DC574BE8DD9D4BEAB2C2468B957416633EF82C41D778B61F3175
3A2AD4DBE738084795BA93094D5F18B320B4AD519A2CECF7DEAEC925AF45BDE9
40DC7787B0BC790A7D767EDE855B520ADF23DCF48A15E5B2DD2BC314C33DA1E0
523FC266BE22EC313FAE1D5F0AF6998C00AEB3921E1193A47BEAF0D9AD677703
A1ECE6ED7600C275E2EDAEB91BAF1279E713579954425FC9772BBB9AC1334BA8
DBB5EB87955F189F5EC66792669CE88FF549F4FF7DCDA5DDEC0B460D153A58D1
17D4C581D36D287C93C2B44CC4377562BCFF8902080B60FE7E2AC972EBC0BFFA
A886EEC88FC011E4F35D693CB2BCA867DC302DDC4403A087EC17EA5A6F7C767A
9A08694D53729347980C0E866FDB8828DFA479EE1F660C879686E4AC0E2699E8
89A892DB30A6C2DD7C2320DC3704A835B6B0348F211716FD5B42C21C5F5C1EC5
B456C3B196F122310E1EFF78BB73A8C475477E1E8B55F582CC2172817CF90FED
DC56C3B6B97F4A850FA5FA9319F93F61B949BE79EAE5A9F4CCA46CBC2C0E8617
102C167CB7631A5E95C91A93A5D3FE27522E90E1406DFB941F8F150CEF52C48C
478EDC3FE50A15FEA6235F85CE0B99D8611CC19AECDCE9993C761844CA25AC75
85A77E9427925F63070FC1F62B45083BC62A34A2E11DB263AB0AC36D1291BB3B
71E040BF06E520913A375C410CFB8AC6C99D8665CD7E1CF880F99229AFC5B4BB
E95032E362E2C41D66407CA4D0F1FBB0C7F6B5D6D8D24477AA83EB093F5E477B
022F220DC7C268E27F7F8097FCF8347448BE6E53709C51019EB4FED063631BBD
0246403C4312EA23A04F6D251C3D36F1FCA9535232FAADF47D149B38A0D7E4E4
342CFDD22C780278D973C9C6373DC9AACE8D7001935C9D9385749042F2896A43
FF8B94BD5993F661B75F403B0327A58E94861527D7189A76ADCF82B5AF1E8018
900D500C4CE3599A4B1867616720A4A344F9EDCDECD6B5F6907657BCB470A304
2A365684184289A675DFE39DF546A3BFF3244C90733BA17E45288F59BB8FB822
26313CA83304435B1D0D5924AFE75737E35B4C766F93041FAA0DBB196B0A220B
8E3A9FCA64BDC9541084E0A700BDE9F5744842408855F3EDE87269D53C57472A
5A4F920C9415F63474EAEAFFE910CCA9A8D8632C33E5B4CA6D904924C978406B
CA307D0956F78049A3C48F0C05E62B63E94FC5013A1E2800EE11AF7E8511CB21
89F3CB26FC3F9C1675AA41B9F6713D9C93521A4A0805B678FCE0E1760BF4A2B6
B6A65A11647358E07CA050B8F34A6648EDAC88BB227E90541B168D34373EB3C9
3C463A4D7E48F559CB2D82632E217F1F6C9A897D44FB499BC8B616F9350EACAA
AB659261E329A3E67F23EFA6DE495C7C9D966924F12467937F9CE546547C9B49
2CF6160BF12036F45D7B3EAF0957EBD9E5015CBD6DC0AEB49862AB0712464EEA
52BAC39A5CE9465971C6B191B8D3ED752968F923AECB58B21A0BD06BC50B20ED
B37953452F6653DC4E88F2CF6E93E9EEFD6015408E16E0C392019E33F268CC07
2F36EF1234998DFA7599D096FC928471D2FE294C8173E82B508A75F4F94415E6
E5FCA3C6AD820A8ED4978E6E330DA55D328B5534BAEADB043188968A9B76C6D8
77EB64CDFC5018C24BEFDB1660A6DF6D19529DCA87A697E2F324EC5833D2A9F8
AA0F7DA3F87B6B0AA5B281ECA40ADEFCE69221EB7055EABD746E419E00D0B9B5
84D88F488763FDB07939C34E0A5D11A36B7EABC23C594309D8FD8DFC70C99A9A
242908A8C898A5BB79E23DDA590D1DE05E9495B5862C96EA124327C6FEF6D89A
7175501A71B37D78D4C5E8A0F09E20A20FE1D8C4028CA6D11849D17B2C8E9CD2
92C78F760D86E92FAFBC36DF8CC3C63180EE5088EAA8BFA1940239BEE8FCD807
EAD1F14F9986F77548C633E2CEF19F88AB76C02BA43389FCC2756007CFD7089E
72AE8EC844E68B76BD5347A11607EC8579E01FE4E4EB710C0C4158958C56B5E0
C5C8B222092502FED059AB87E9C27549767F9B30D9D221D86934AED859368591
735D4909F09D2A18284AFFE60A0C0B7D446F775BB2E895A50FA30101F1328206
5974F633EB35FAF547BD21FCF47ED1D902DF7164E6CEB3CFE4D0B7E931BA5B33
2F5E9C38A9CDFCD90ECB31FD53C528FE93C933C34C64E6712FFCBDFF5043C32C
709E9F883F35E8E3E961B46568367E395CD31D821769641EA99C86BD8CBCC633
559349EEC43186A47FF75330C1E9D5CC69B4E655EE0C136AB82C1986E948333E
B5AA983E6A9B149694B5A115B4FA8A88EBC37F815A06DE3F6F1EAF14CCB72C2C
0CC025B19F6C50A96CDEA757F8AA288C239348BDE5111A09F2F70F065B0DA6A0
F661A3A5EAD08CA6825E701739383E6FDDE73E441BAC714E2BCB8097C558E59E
FF144D9846A65A85F589881BB329A433F44C9BC9E182C71C44B59FA7C2C28A01
B94F3A2A9F43568B4B215A77422202641525DA510E821AF076ABB3C7243AD40C
BF311E7F12FAF2248FA729DF57E82AEC663E06C3A5A23321ED19FAFA673E5D6D
856DF3AC82E64503AFB1ECC48F84B28C2B0136A7B011CFB678262003E5C3D443
875EA8FBC8A8D43CFB4AB7536EEC1C8C24B4B1E87F50946727952B1FB525BB9D
438A0CFED1490E6BAB70F63425057C680ECADABF84AE1C3706A49D02CC12EBCC
AB5B153224C2684ED8575C063FFE5B4E977A8A61CEB0188A1309F391E66933B5
E47F8925AA217D1FE826DC241B50940DAD94F1990562BC36359936A486FE27A2
5E0F8C23D2CAB6B33173AD71A2761C65A56DB66EE2B76AF201C79C15CB58108A
1806396D51ABFAA611A3755C699D718909F504A7A0C97E86B6A0A9C90540BB2C
3D472E306BCB233CECE04083D3506BF4FE2C154F6D0FACA6365A17225D1F28A8
89083D34063F45B3891A7DC0D418D7316C919A03BF998A85DA3D735521A7BBD4
688CB4072E446E274EED4C966B1E911C024193B038DFCA90735F5A8FD74B2336
00C405557C03591CF4A98FB53B1E0E7F8BAACE38981CF5CFEA1A6DD03BA74992
65CFA70588D8B8DFD761FF5CE672B9B9030DD0946578806BC0BD65700699DB27
93FF77F3B5E79DE8F094AACAFDE5E386D0D658957FE92D118A8BC6F93302EC3F
177A045B3EC55C6EAB6F02745A667B04B9DBADB9000EE484675DDAD328354554
0BE213EE00E56E78DAD704259BBD8492E0D4A9FBA8B9100A31141DD11D05C065
C8DDF5A26CE84E7E9868BC542082AA70AF62C5151B948E529FACC7DE86D16F92
4449138276E39EF0021A885FFCB4B916EAE3AC0DB819E3A016D15D3A2490838A
1D1AFB006554DB3E7FF60CCD2CB430AEBAC9010C8B9A7CCE28CEF44E9644B6D8
4E3E398C88D0C715461868BE9D43EED4F8398E9C5ECB4CF97F10027B6AEB7CA0
2035A146D2D83D7455CDAA95FE43565062AC8A9F83905C251670CD782A9A59BE
6867A2888E8BE80E4D2ACE14568674D3131331A155F325E1E7B0C2031EF56C30
F384589E3F88B0E46B0C6AF552AB6BC4EC183FE7A51E04D97A0B13F393EF699F
F7B8BD4F8FFB434F935458CE368CA67B1920D1386F24B99CC9043391BFA3A29B
5630C04EBBB54C56E49E1E5232B23CB5EA2DD6EDE83839B850C2B2C7833C18F4
F71E7E858C113CFD7FB02A7D739ED7DA70C7829B64C6C33DC8D4ED262A526416
83E5A8206C019DF7C5C62DF833DB9B521F8CBB1967C3B872ECBB9645D145B5DD
972B30EBD4A6038A6C4DC8807DF54FFA2DA3A3686EF225575A5F237848AF426F
582A509344417C4C7AAC61EB2A0B9C9EAAC3257FBDE2A69EAF77F66DB4ED1172
5DB3CF0F98F967C8F1A7FCD4CB24C4F915FD9713570F57DC3288D091380F7333
0958037FEE819A2BD43B9345F24B0C474338B005337FD92923DBFAE78458BCCF
FA0991F0F8AF30894364EB07BBB8205B347688BC006BB4CDC94E15A0FEB9CBD5
733D73566D5E431CFD01FBAC8CACE99845B198F7C5E43EC828D3272825D9E9AD
061F93BE04D9DF6878FB5AE5A3D124C2FF0094D4931A51B749CA4B950A1A6A28
98387D77C39F12EB1F449DDA1BB4DF42D3ABBEF6BAD3A827D42FFA01DA2CA656
4F193DBDBB31407F34E498711AA9E63305B9DD2FFEF8C6B373ECA3D22D2A5E8B
0D038445FDAEA8750648074E69FDF48E5C8DFBA2792D675D2187A99E5871C153
E927074C1880360B7D8AC3076EEED2FB5BE029E19187FFB2112BCFCEA522A6FC
5A0E8ECA256DF092B14027301AEB13C7A53D6E99B557F9A1B44EDE2AB781AD04
562987BF6A28D2A3A2D765E2C9FFEF0E00C047C77EB0664AC2E9B9D286FF591C
91363BA7B59D0A356C4E51F88F962A17C196B4D95EF0B523422E8FB6BB8389A2
EA3B4ED45FB018CCA2F39F93A1669EDA0D13250A3BEA55C00F8F8CAB17316EDE
AB0E71843B0D44EB7C93610DC8D168B6C83FCD8821E1115EE007973333017ECB
92816587D025EA6DC0EB410C58E7BF867E15559B93BC15BDBE73DFFA1B66AA3C
575D62A97BCD0393138BB96D69BC658C46751841A0957B34F20F63BCCCF0D2A0
F02182B8ABC49AB365B6DABEA8B5E5E82D7AB03A1058808B97D7F7E159643B55
5FBC08FAAA2AEE1FFADBA1106C869F5C0DC0887D7C436FFA399772A90965E171
BAF199EED9F5EB80682FF79F800E4D0291B2652ECADED45873F16619F91FB9E3
9FFFF04CE8C323B01F53F7330033B5EC219873B48300C014BD849D9C0D3C0080
32B5F5FFB0802DB4648D080DD639D959FEEA591A9ECC1D74DBC8438CEC0F3EBA
FF553A539F05BFD3A91240774EF9D0835F4CC0C1E262EBBEF51B92AA04BA6D7F
2D7443368FD6795C943253BFA22115ADD7E8860FAD5534D96F186F62A563514A
DD39FF9EC115E9E7AB5B045F5B478EA56E6D36B58F0386B765E617C6856DF7FB
7ACBB6585126F5302B399CC68EC4D2C00691EAD2E99E93FC8339FD0577E7BBFA
CC7BCA5BBDC9BD7E03485615C7108BCA66305FA8DD18B10B769D9885E4A0FF0F
CABCB99420004F99CC564B2806D6267AEA4D9111952EE4555E5502FBAB666014
F8F24B517D4C4DDF67B4785D65F920207D755CAE937C25303AAA48855DABD86C
5C13FA0186F8434E623A076B9AF61905A182B2F5CFD88A61088E2881C90E07DD
B431EEE723B443A2AD26A85D28AB20694C79C5F813EC7D5F9BDDEF8C7C2F464E
C20BB3F5FF351584FE9C8DA1B6F22EDDBC954797700183EE2847EB3EC3F125B8
EF5B8C6E1FB46EF4E6B2DA5C7D59649BEF2ED37896B4127DD33ACA722F241D9A
936BBC9AC4D604E715C07B3AACDF44C56C4E732F0A60F7BC5AFFE36EEE479027
77FAD25087D3B5BAEF2EE65A9924F284144147C32BD030052D9475AB3B0A06A2
7C31E7E5EF7EF10176515075A308FBDCA6DEB52D206AA26CCC8E040F9B38DD82
82E25B36AB4B784923875420C694FA6276603E374EB06C75DD11EA8CAF56C683
0D047F32212E01B2B4F6CBABAC043D7D43E27E79B7DE1ED9126F6A109E122312
D4883E7BC00196D8F12D5EE3702437D5DC8DE74F11749324C1534903B102BDBB
A292B56C2E4C5F6DB2D12B74F1E14838B97706EA197FF6933849F4851CDFB146
6460DAFA381330014BF9A57AF775950168992BA9F9260E55DD84B2FEB975A602
9ECFCABD4060A6055E7EE58DEF71D8F43475C6FB55D9E2F5A7CE24A694953A44
695F96249C157532216BE90E7A0BC1963C710815077D748F3FA8DE9DC1179EB8
6A0A6F56FB6B5F6524B9025C012E85B2B1C17E4B67D7E64331D6C6109DB9D75D
DDDB26839DC9FCEE99D5DB5024B0A054213086415A34D5194AD5BF68EFFF8E3F
987C97CF01AF789556AE5360009233FDE0B38C7CC25C1F46875501DF269AB0FF
C23E822105E2DA5B402518645CEFBF2456126D41287182CD6786D3C5D270F239
D02CA1C6C99A653E4317E0C37AC620E144B26D56321223639829E180AC3EEB19
04FF39CF368DF3D849B95E1382B392EFA3C77F7A8BC65A6594419C6807B84153
AF352B69AD72A54CED9057A0FCFC98A892C09A114A5B73DDFA49EF828BD24A04
C2E4774CDC6F4A0257EDC88E2244C1CF484CB16FBCF77DE5D45FD429DC9DAF88
1EA2E9C69AFF32F7195B026EC20032394AAD51AD46B2FADD3F0472A25484AA46
B8B38AAFA0FF764CE687AD56105D9BD1B4AAF21AA87E7C1C087F83D39395DA30
85CBC494F77134652931078DBA34F39B884F7B6CEC7DA252D4C7FF9DA35E7793
2C18ECAED1037F30D3717A2301CAA676A7E7A1D1B3824E527FAF98AC53406288
BE935B1CD2A1E7162E501AEFFDFB1C00124C56BFFCA8FEC44E11CE98D80225CF
656931E5941130440DBE02AEC0C248120BFCB9B180A61A3B0CCD6E03A601497B
84178AF58AA08BC05AF479829BE84ECF32CC7F2EEAC92FD7CE4D16548704E0AC
CBA14F6ECC545F2BFC1AF10FFE7C58B3541F0ABFC29F7DA9640F83925D1441C8
BC06CF5EBFD043DA81C6A8CB0D8621F3BF10B1CFA4C05829AE70DDBC9BCFD799
614BD957190E61D2594C5E5691F54E84E1AC03CEEBAACA5F576091ABC48B3961
317E3DBAEE057E4578D1B47C7949E126E5424EB18A8E4C984AED9D9F0CFA65DA
C531DF048D053E11E6286B3404B4A6CDB43FD01F8A22927AFBC3EA8075D441E0
495E07197A1D0A1F3BEE3B05CC2486873F819A9406DC59B2C644DAB026162AF0
A25CD36FA70F374186FDCC5A82A76560CC3A782E682A1491AD19EB59A53C5FE5
F33258630419F2D26AFAE6FBD77F3AEE6B872A85ED6F99DF92F05CA2B9F31105
ABEE2A13D2589FBD00395C8AD3760FDD0332DC70813246432A10622EB533968B
361AE48EE9A90A99583CC5D62C92BC04EA7DDB56CE3945EB052C7A1693E64101
C28089F36940567C3D0A3C45657D13A2BD3FBA20A29003EC81D8AC6CCE5A8323
1E6409878F50757B03BECC526AD949FF8397F5477D6C330441009C574227BD4C
802C4E39F65933B824E56B9A9C89EB2747BDB9F126DDC61F9E57E74D488C6A93
84A7CD011357BE9CAA1126E02131D53F0DE7B3BA40DBFB3E7BCC716CC6819FB0
A0B2D0F4E8A20317BFB178E18574C069F84BFF1B08C668DF2F47F670E936EC79
D36928DEC658096DD7FC0ACC95B73D9F720F162A46D79465747EB47737FA3414
98F9E28D5B0F881406B6026E574CC90B6368DC2085654680628E38179B032D38
99EFD1AFD508AE7B08C368DEA1B9C51DB9878DE746FA4CF4B816A7D145642F7B
1B1F1AE155A3489F4E1F4EB1EFE85301A9B162B559F9365370700BDECFCD7BEE
EB96F5DFD1003F6BB97719D0BF73A64A421683D25A48B78581584153E2E216E1
DE32C2E189B9B34193F6328A3A1CD7C0563B42688F03537580D7B97E405BF4A8
CDCFAA59E0CE0654389966CFD6DF8A1E159F9244B06E3BD0F4B6173B8141224B
95B9075B52A0E33C0D47AF379720DD1F5AD2501B19AD78F44400131F75BF1134
56A03E2B1718A139E5972F62F813D56EEB8FE14A666067BA4086C689743EE4CA
6266628F431A29D139230518E4DC705566F0ABA0C6C390293FBC9F8F08CF123B
1AA0CF7AF1BB479AC79C727AABAA3487126D4461B03AB004D43B52E541974662
84C7AF42762A8E561AC33D191A91D0FFFA17410EDBAA2DA35D3D1D2A1D73B3C8
505DC01BBB5A8996EA9AAADE507CA85CF5EE8C5BD2B695EF710C4FC932C2F07D
8975D6D3E48F44BC427E68E0412F0270B2B1FC1488639C3F0F4E37D331EC00A5
59CB62F523F15BDC299F001D93EAAC2B996204AE8B98E88382BB9889536815E0
BEA7BD6DE81A5BD29DA80283A3A259773F2BA7BE72B08089900A76EFF0F0162A
C51A6AD727D9EFB9FA9C07FD7919D3631BF7209319CCC26DDFF6D3458FF6BCA9
1FF25C3BDB784F879E8D539E64CB85458045EF7B5D80126BAA2400BE92CF55E4
03CB7450A94B34894681D1D40E735B928ED8C1465F9B8EEAA728281B91F6A65B
EDCC638C0906D5371C5E9B2706133141B05D5A158F52693FAA29732AC99CEEF2
932A7C793FADEBCC1278169E7077DD6D669C91554ECBFE93E50F7A3EC03DBC10
45625A2440C27C8FD8BDE45A021BFBB403964B94EB951A71370DFE11FA95D6A9
9D3B1272D0E00509924F12A37650BE4FF81E71915E01CADA83A562FEC8F37A8C
1770B31A9A3BCD2C0E2AA13A60B8B6B20612C9FC34FD5D0785245ABEF1ACCE1E
FE1EBF57AB5B66255FDAD86387D46E703D623549D09CDACA7B10D4DD11E2ADF1
19D7A1B49A374EFE7F0FA030743CAD6846D687D107B902C98D9D874E63D8346C
FD10F7336EBC16D0BC480990BF82BEE803F8FF2C9DAA3869667F1A0D60A65CFD
875566641D11762759BA7E8AE71D6B7AEC04DB5B697C9ADC359AC744EAB2FFB4
693DC93D465879DD8502275F16399FA92BF7774D4AC0F05CFABF2B3A3F7A8968
A95D724E064DA617A31616F170D9C500620500E499D18579B88C2D39F4F7BF58
92994E2BEA1E136C13C57309FA01A239582048BC89B6EADE4CE27062E6CA082E
D09958E703F75A165DEA860884A1A1FF045311C5F77BA2384C14AB4506B737BD
3459C9D43F3B446A3C3F61997035D95896E8004C45404BB17F0D917C3C7F2B05
6344FB49F3FEF178D245F835515DE89B297629A5DB2A12673D09A983D9192196
DE2228A4C18357E20AEB8363BE282D316CE1B66BF4CF62A1123D9C4D8F90AEA0
5668126D26BBC4D79DCC8C592FBFF4DCC2527F39BCBD331AAEF1677A957672C6
D8B46FECE3CA8F80A7DFAB875DA40D73505E612E12FE2EA80E6FE4F4EEEFA423
BBAEE305113BA8690FD841523F7FE677E05DE35AA45279999BE643C489C0B438
BF725F173CB2A907DA4E023A17A0D5E0F85F739A8889EE3DD3753E32ED4708BF
37EF12028AFFDCFBDDF462B596182D3401E5A1AD51D4FF5CC824859FD5F1666A
64D0EC4631EA6D138287709CE00D370377253A38A52D3EA74C356D616C95AF8D
3535C7D35FAC3230BC1EA5A137111E950CE9EC2BB83AFA335D5C2193ED7D5F82
29F4038329DAFB2043F674EA73728689CB729BA4B86E85E00A263DE24DA4BA4C
9F3C18A0BE89721E9326FD91C6D3DC26594A8FC8F825CAF7407C204B5C5E39B7
1243F07ED7CC79EDE8FB65F113D30F7516ED11FB86AA14A4B65BB4654FB759B2
7634BD92502D9915AB80618DE6646B53A429DAE2854E8B293087B9AEDF1ED6FA
0EAA151733FF8F970F5C5068897BE0F464C47AD0F6BD8F873FB596832AA18D73
0AE7B38D6295EBD0F69AE3DF31C3068E0E7DB545D8A426E073E23E811247BFBD
2A32652EEEB65112AD71E395AB0874569C5FF014DC910D7E22FD71CA5C429D5D
FFC7722E92B739930926FD18FE0B42706CCE5677BA22BDB539542335329697CB
B65E9D99DF333E847195CE8EE7A3D33764882CB2B78E2765A42EADB19E830A8D
3813496CDE53F71C7D7FB3EDA32B3283A8D10BBE864F1E2B995BCE2E2EC8AFB8
FDDCA4832F0BAECFD7E4036C4BFFC751714B4EF955B9A5F6D40C41010973546D
59FC002C20B8269BC7374165FC403129DC62EBE2A792E904F9033628C8C057E9
DED1DE159891153E7D7A726B53511AF15B73533B8DE1FC9BA8E8E1CF598DD639
400407ADE32C1B9BF224079FA7E16E7CEC22E9CF34A968C17EF44D6BD892E19A
3E05C56569432CC817E61C483425C2324C9C226A2C553A6F3AC158B5F8ED577F
BEA398CF7CF83C9FA1CB45E0CD238443A9A9B988AA65883A4F1D0E8333769BF9
01862C8E0C50F1BFD9DC04D8A37C8DC62F4CF0CE07600D4565F3A99C84EDB05D
DC313D59FF2DA3F5B50D5BA8D667CB86C289314A0C34E395CB80894C1CD255DE
8EAA41E61C6E09A24A52A5A7E1D3A6D31F2C5E97A04BA737F0CC3111C2F2BAFE
4F844B12BFACA461144D1103EADDA93AA31F141352ED0D95300FE674366C750F
3B728B161A5AF4143EFAD6C7640AC926BC8774826142850A881648685653F681
23982F59E16943A254E91AA582C76297C02EBF6B72B4FC060FFA8BA9B99839AA
3CA0374DC4C750276DF3D2F3094A283B9C929DBBA206B7AC18472A610F0D68D1
D08D98141C296D0BF66EC9131217CF52F3DD4182FFF191A612DAA318CB0E6166
71AECB6C5B8D255413AD4F08D9B623A38C86DD1487FA568F37F56CE78B704063
F9B125676E855FD3E14CB390C69AAF3558D5853B89097DCA3405063DEDF7D5DF
61ABA14471255F5878F5EA133313EDC5AEED599E55B36C4F7B2F3F98F680527E
9859D3F5AC992EA93EB77A68B99E23E9B06A948F46118D08F0965D70F370B3C6
593EF82B72481B1FEEDAD3C3788ACEF280BBC8BF20FA0CFEF32369856CB02B35
50B42F260B826647F8BA845E9E00588A8389BA12D176FA5CE8225D4E65C82C98
170D9023556635A73F4EC2714EA8585BF507366B7FCFDA0C49F91588E06FB8BB
A48E5490B4B23FB3A164BB23E2248B2E97E687D4A228D8E039FADEC400A84251
AA1E5DD1C030E90B587778E930D2C1442598027AB723D832D64B0014EB45B9A0
2848D6751FABA46819A8980A280688241C3DF3C2AEC62DEB85B914ED1FD650AB
B457943F2FAEBB4327B9E30D38AEAC5441AD2A4C171F7114A241B262FD78D280
3DADF1A2E7A45E76F2FD3DE0B9DEA5C24DD1B752D9E240FFC83461C874269C20
F94AF6B1E42B51DCFDFAE95DBDA2A8889853D8C6A6717CBD5175
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD3FF00277E0E6C7F28BF6C8D5999A62AAF445CF5BDD64743F6ED83
4B27319027ABEB10F26ADE7BF495FA39F9629EC7CEAB400829E6F6C9BD29A7BC
8BC42F8F6B29C7E1E209B28471B69EED368C7A655F5A0BDA92FEAB15171D204D
FB53F6FC0A5BC9192DA974ACEA54B605DA2F3E139A642464F431CD4C5A27164D
21047DA3A5D20BCC18C1C11B92AC37AC7F87B1FD8620A526D05574041E38FCE8
1A6B213A58EAD972B07CB644B4E14930D5B1BF2474343B2218DF0980B94F0B7F
68900465D114CAFF8F8993D62DC45BCA016BD81AC722A4F4CFBA1357D8E49F0B
D0DCDB82525DC3EF5D6EE25D608B6AC6EF9059A685CB3F8F945E8803662299A3
E81C9D0B285A9359BA59B9CE48EB81113060C84B02FA2128295FA37EBDAFEDE6
8E6C28AF840E8F10A930D0FE97916CAA530F257126881B61B3D97B321D4D1AD2
6ACA63B2E1AEAD490A93B237E53F35DBFEA4308BD419974CE8BE2FCAF3D71880
DFFB477C386137984A3F54ECC8D4948AC06B12EF345255F15F43143355DF09A9
6E5F00DC2A401024529BEB398AB20104801252D329970B20D2F640A07A02BBE5
6F37BEE4060ECE15FCAAD0E5B0B2C42BBE5A030D57D9F4CFDC4C1FFEF87FD2B0
CA2E1A287BED8B3871D22426F200FB8824E27D3B1F736466EF878BCF4C69DE18
407AB99EEF38F110610C982A479732DB16481EB26741F1C32CB8F4DAAD2CF7DD
33D7C384315FABE0A81376F86BCDDE43D2EE0AF274AF99DF6CF364EA78A6FA8F
A13E04D067B55F84954495EA3D40E26708374F1BB5DC96B5B927F693F3506D76
C9184F8DAC562EA95E0C8146B860B8E47A40077DB6A434E5A59767F627D3CCD3
2E4B6170DEC3F342CE36CA69164AC2957EF1487F54EB23A1CE0AB8CB768EDF04
DBF511A5198E543AD35710EFCF4C5C6CBCEBDA84D4AEEA1D1070399A6E816F7D
DFA1EC3DEC0FDA50ADF09D8FCC043BC697DF01C1F094DECCDD9F43AAB88640D0
E9347F688E478603573F9FFDD42D1DA7BA6D125B96B6B3108353AB9543F0A89C
4DF01C43DED1DCCF05C8924DB410C86AABB13F6BA87C9393FFF888CF92C4CC1F
EA9BCCD69791D42C625AB18C51794740C8A2DA98E57E182CFAD2011C16B42F98
BF0B044C40FDD05A9C557F279F93A3BFEF61CEB3ABDAC3D5AFC748F868A9C69D
A53878BBDE0CC8B76F16243B9056E4D06856E49C0D18C09E15296D35DF91D243
BF4C1913F5F6C757234D7EDD3618CD33389BB0DEDDE4FCB02BCE234F7D09BE4F
16F52EFC44A61D5B8682D1CE77289CD1998D457E81F30245EB52152BB04BF5A3
6A5D0F0EA116C5BAD18FFB0FA090EA49661CDE6521332AD3DCFC40A775DE88FC
98C2836EF2B8ED75ECBD6BF9D3A305BD22339E88CAC8229AF162936A3A2FE7FA
1826E55A000006DFF3740CEB5394FDEECBA0588F367E850F9D9F9F1BC7B00A6B
FF8EF29877FA90F6FD6515A0E033FA45CA434C95EE1CC0E7AE75FBCB62256F3D
8761CBDC51BE1282552272C5CD090FCAA4A1893A26804E8C83C48E47B5450336
4345B0F0BC9C2D2B6E1F9050DEA4517C31B71461AE364725C7FD613D0612EA8B
8B30B9CF7DC3109A959727E9E8361A7507ECA0F0AF845C7D13FEF80B5A93AF15
90C294E5B9CD70FB2EB25770048BFB766992E69CD95769660D867D0A8ED15637
68C122C60FD9E998159889DAEDEDB8ADC42E4935385978B98583BDE3DC4CB5F0
01EE99E81719112DFDBBBC074E297ECE5354D52BE8E1203E3412AAF6C2279FF6
84D2D95E1A2BFFD0BB0720E028145A2BFE6D055580AF9061746895B76811AB03
FC70A46D1EF523365AF141E13777789FDAFC843F9BBBD67B8B607DF384B644D0
C2556462B934C1D5387351F13262878633C0C8828549F10506D13B1FE8A920B2
DD27E8C45E7B733CDB34A13C4A6AAAD9D2B55FB07C915411AFA735E9AE697710
4F6CD1E56B59F7B7F2895E256EA8BF9AAED1E2BECED987E1423804454B088B8C
65AC15B5B4B0C5D6D122186B76B9DADD85B2E3AD1888AF21476AD9CFCD459B9B
156B1E15A51DB8463E432A9A82F5DF64004896700ED6B01FFA79A03A7B375EF4
A24D08BC8613FBB5080D0278F744693ADD17789ADB97447A149E8B212741B398
B068E1001185234B7DB6814DC47F09D142B31981DFC3B4D4FD90CC91A378E51B
69FE0D7A7E0DF6D341E6CE3ADFC829E6F91D39FAA10F90BED333D46826A2EAAC
B7A5A7354D6A76456752A715D75FEC441337767DAFE020F6EBD4B8F3C0B73E16
E8E2573A767DB2C527927D9475E0D36F981606661B06B18F83860A45C98ACB7B
5EF79311B17C6527EBABCA252E62348167AEEE31142F68321B57FFAEA24EF931
8708C907AA1B48762A8C3E56050A2FD01B4C3F9E73431CBCC7920D2513AA1159
DBA44DF3154AAF3E7AF1660A305A460F868CD85F9F3C296AB7EDE2DE6A51B697
DCEAC117EA056D12D689FCF2B3737A6232E4783EB4A8AE56B83ED766137BF279
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80DBC76C547464EDFB81F79E5D
7A9AF1DD9809395AA6C4C068BCD5B5207541D34D74166ED6E03FA7D9C4D08739
28EFD596DA97D96749677E52589B44C67F1B0A7E8F6FB6C4224266116D30643F
5B68D08B8F14FD0429C6F0C4D02E28A69B83EF5981195AF6FB3613911E8B760D
FEE9975F951B5C0B3A0206078CA29A08262ECCBCA3C345478FBE7BB6F747AA6D
E703211EE66FDAA7CCAB7D17540DD43E4F508333B16B96C6208FF05093842B9E
CBDFAA0437471460AD0124D5C208659D3297FA85A4D6BF808EDC055CAD38F8A0
8A67208A4F1D97F55CC3BD66B83B15A4F4719E66EE3C64292C209A832AF504B1
BCEFB77970DD11EA6E1A14EBB1BBB062CE726E106E133719310819A17B497CE7
CA888BA8F20A1B15C28337D8C5AB3B1D1B869CF99D01F25AB330441646F45EA6
3BA74E3B00FBFAED290CA0BBD3F6415A630786BFCB54466A1FE663624FC2ED47
4E1A419241433A928756FC9BE403DFB623C044D7AC4EC43D61AED50563104DCB
AE91522BFEDF4F7BC846F6C16FBD1FEA608892472114520761EE1EFA0C84EE5C
32831DF86CDE918AF0C8A3A112FAD0A55BBD095C894193F7B602BF67318CBB84
0C4FE105564C2801FE2364BB0AA4133EDE1B271BC39DA381F6907EC5E1AFE48A
6325C7CBFE5F7BEAC939D7829607D558D1407E6DD0E2252C440645C8AABF5A03
7944087CB2D5D260D28129A5DEC17042F2573655D4AA05C1004E76D2A1369E12
B6BA631539586DB7CB534D1C5C9B5B5C7C80FD855F1733F58C452F0A8BD9D935
8E4BBD39AFEA33599848E91987D64A444A48369EC538E3A05E9302010956C520
A7F73F2933999FC1FA6F5AB1D7242A394FEC6CA6C93FA59846364CD8EDA210E5
563783B75A88D3BBB2770F2841B9DFED6B977517D2CA134AA59A92B9B67395F7
59F11018BD7BAA05A09531D8491FE710C015D014BFE50EA836CBB02955201204
60AC52A49D83C18EFC6B394CBF28638A7F77E51C382F45048B68928DEED392A2
F7FC2A0ADC93782334DCFE2E06E0FA4615CA886B4C99386442E675206DF6AC10
1448083D8467B465327C917C2FE06AB6897A334C51FEBE0B392347F7C5BA8EEF
8497D3BB8E9F0450B6C92DD26021738105BCED3E94CECEB2E6E552D1F45CA338
E60FB97E9B4C0A2D50833E3CE505A453E682CDD49EEDDEA814D34AD1C22B7002
CAD36D439AAC19E3514654C4CC0D19A6BC8AF994F2C95B1EF9EE3A06766DB1C7
58286E4A5F6507B71BFB5A502529C81CC95BC6618625B13A344E84B603738B27
F50ECE1AA7A9323E68698E08FEECFDE93BEBAED663B228A4B80887D17812497E
F6A45BADEB8133DF828D62E313CACCD8EC7DFB39E8B46E8BDEFFFD7B819B25CB
9F6631D37317C064A914A40A1AB4A1B1FE63C92C4BF7406F643EEA00F2A64690
71E3EE1462B3FAE9A53FFEAA80840F54322BBAE5674AD48745EC9BC0DABFAD58
F4A555C3E22F061485C036A02B03DA61B29190E5E391355D3EE9821721EFF68D
A90C5587B590FBD5923E00FCEDAEFA55E99184FF90B5FD95DAFBDDDF17CF65F7
F4A9C543542EAD8E5C7F2C49C6B55ECD80E6549A029D9F9FB01D8F24E7C4899F
8162E5D8454B7DAF086B398A1095746B34AF152FBE96760E94145C4283DFFD12
1DFB2C29AFBBEBFA7861C93A59A0DF7AF5BA8562E4FD4B8A6C1D3362A2AC88CD
84612E23EB7C59D820F10C4D659D89E9C34E910333FB6F971D897613F5E2C94B
D8F6B16BBA0310805D19400A736213F9916D014A560CDB431363BAD4B4DA978B
315F723A7E8215DD1BF51D08B5DFB7030D9E7959FBEB4D7891054C2BA018FCA6
B54F4D085798E459B579BAB95672C026FAA8FE52742017422B71F1FD9E04C80F
654730006F3A39B4B8FE328BB1504C51164B5D96E0F1A66AE1DE80F21E9035E1
B534160B7FE592860A47A69D4A50E9FD22DA8092C93B4C9CFD84337192AD5470
D9B3F6F52740745A0B2E51B1B7808E67FAD65EC64B8040DE3B1C11D4C3E93796
E922DE879EC4AB2290459238BD2E0F93FAE6654FB254A462B5B770A14C98A433
58231DE0F447412F2204092DC22B5D7A7D15EFBB8CFA7FCDBCAEA7BB6F59D7B4
D15834EDC7DAEB975E245570204C034F4D4DB7C348C7B908746C4F934B19BA8B
B1F15CB07E660C1285F0E913BF34ED5B5D25E82B3C1215401A19708F47A7A6F3
18AF8FF043E98F477E3CD73D2A6E2F24B085ED4B4F0FD4AAED6C6248BA7A04DF
6D26B429F681D2E31FC924C1DA8BF23BDFDF85404A03F6990623792ECD67920B
86B40354D66FFF7175315C6871A0F212A5520B13592BFB5B1763D2092BDE30F3
8B5C5D0079DD21D7240436AC11DA48F699C7C67840A4F0DB15FFD9AE57619EA3
9C07287B4CBD9EE4012B27D342F0D3361D0AB7B885DE14BDA22F6E793C31EB89
B8D5D9DC2C37FB8AEC4C9C1289ADDBE267C618E342EB786485A4FF647E044206
E1567B55831A2026606C9C380F76ADF4B5E676ECAE6CF94C3101474450E87288
EBA8535F15E16ED2965F7D7C696A5810E5361F89C0B908E5B0F2394B2CBBBC61
1A8D86BA14F9F9CE89BC3DD0763FABDB83472DA16D9E846D27D1E4DCC478B487
5EC28C9B7A009E9EB49767949EDC81FBEBED98FEEEC56FB99927BA3078EC5BEF
F0F793CB44EC523A1B261F8D45487D8ED0AB2C30A72EC227B20CEF82561E2A73
FC722BD5C566804F9516D08EBD1472672DB31CA35CD9827AB246BC12303749E7
0D5B56D93B349A525AE9DB0F143D7EAAF75FE172D9B4C147E28EA9986719FD7B
F5B1CDF889A73A87D454A4EB977509836D75CA7F8AD3F90E9F201708AAF92541
E013F54098BA6C1E8CC7F3801DE620C8987AFCA609F6A4ABCA49F3BCA51F5A9E
84C8FAF491A7EA6083C9FDB65106198B5C2F5031A0CF7D9AE0D0933C367C3E3B
034FCB711673ED052F37A31831E7BC239CD08FAB3A14213EFB9FFBBD6F5ED167
14A33E8C5493E8FE4A6FBD356B35C7E49CD8D7CF9FB27D1587D52AC154F7752B
929F2FC3BCA3EA9006C7EDF6CB91BBCADA99083EC409FD8B2C5BE3A0A7D9C4DF
64138441C559735EB5EDA35B91265C416677C8424D831BFAD85E0B766CB3B358
9E31EA1B76872FC1FA6C92209359B058D53A534E872798E5D40BDE750F806D09
084AD0A9A0F074D1A47E6430916DF13285EDA83C3A26A516F1CC6C52DEF3B059
7FCC197823ABA1560245E75C3E22E469FB7CF387E713113E5D7C2F97116C8003
57D0D589DA18C95EB31D6B75D752EECD07557129EE7053D34AC69C51B61B95EA
902F8E2F53E5217AF981FE7034B55107751B40DEE7E4615242F5BCBA9C0E5A89
2FC61049523E07AA131D09E3FBB727952BEE9DBD3189E682C572CB8CF4EEB3D7
C14DDAFC6160BAA8581B74FA8CC760C6D4A2D3A6D41978DA4347CB49066D499B
C66A06ABCC5CD6E7575F86E0401C507673A80FE252376BB38EF4C427A6A7522D
53A80C1C2F329153E6DEB1C0E8104E3A5CB49603DBE828DA407E089A5256B09C
8B24F232C6D89B7273B6E134E17AE9565160895CA8D5C119C9E649899F623FCB
FD3BE97D9FD776E8BD0C85430AD13990FFCDBEABD5CEC13C10254E3B107E483D
79EF92C346805F061A7408EA2A22AA7C602BE0B0A43D9D5C6F50C479A314F42B
476B322B43D601DADA1DE6C35BCBE54593DDE27E4DF116E24E0B2C3DACF2BB4D
4F11C5FE4243EC81CF8A9FCFE2C2D547F1B703A410FDAE034C078C7826861B55
19E7CF062BEA3391C5E44BE01179F69EFB34E03923EDA8E2FBACB8D3C58CCD07
BFCAE08D82239911725B143F935D3F4FFDB31FDC40C05D38F018CFC81F4CC63F
2B9EA92EAEE2AE999771B71AF9B30F228912210A5917CE236D356F1181E9D493
36567AD435B299AE54E259EB9FC3E60E60177E357EA977B02A3216EC408B2B3F
92ECCD384633B1CFBE950D0C420E2AA97C1D97C68FEE49A62BC6787664E7B46D
CD8497A7A3EAD89F7D9260E89443A3941E74A7B6EAEF6F0AAE5F86D706C49BD8
E6F48D8F4AEDC9673C880022A7C09E607A199582C2144D78776B1A1D36B43A7D
FCF5FB13840016559462EBAEED6EAC75FD753B150D76FAA4EB347390DD0D3F0E
48986CD5BC79376ABF5FE282144CE156A7A9AF5710180F026127C662D7F5E106
B7B19AC38E487376295DE5AE6B2D1620DFF03D5CF381394BCED86111868CD4B0
550706E9B11B936E08E5CDC6C31DAD9DDEF9A9A339D374231DCD4A5983D415EE
EE370DA4CD75CEBC4650DD581537610B95B5C6117959F7F3C2F479FA651F0174
3F267DEBAEA79F59FC510A6ED7864D24DB2615F99CF77EF07C44F6F47A3BDB62
6EC929D45F62B355581FF9BC06FA6E7605222B1C0EB0D51D13D0B26806ED0170
ED698A59B396F282F5F591B5E666A3A0765DC4980E4891BC2344CA179314CBA6
2A3ECFE498EF13D3367549862684AC93AE52B9F1129F33E9D437C106E8C14C6C
A490ACC6FE8AA42D9A9CAA2BB89053AF24162436D12D7C476FF16E9C18659D27
55E48EDC1C78FA9F7914B7FA6F01A8D3914890B410EAB92D8F566DC03C301DB2
D511AA4F2E674A5E6D455B0A79559575A228A6D7D87BB079F212074B1438B256
470129A53BBAC0FA29D1706F047543C627B0A9147327DD8305DE03445C0837B9
6DD341D4A55DC98A0FEF4C3CADC2E3248C2FEA58CC51647721D4F7F37B4F9CDE
4849BA6AF9BDEACBB70A98762196BBD807AF05F2ABF563ECB5AF94AE0B5F7FE4
908936ADF88C793136C9D1ACA5056F7FD695D7A3916BE55F8E49B96021DD868D
29A87DE74FBDFCB83E1E642CB3D7C5BAC359A191FC3CE4E280A94484C8D06F0C
5E2B573A0778C307596544A3BCDA360B9349309D6CFB3067908CB0C50EDCB198
3E8313F0B0C8BEED24C1E0C4C3D0D2CAD6A92652195CB08256D39247699D97D9
D63291A596194D00A676026596F240B1F90C3AEB0CF73582538E38DBC6A1294B
1A5CC3B29482CFB551A33AF7E401327493766CE1FE9C572D786C83BCA2FD4898
0DF91CE1A953B3BBEEF572C73C46F301871AEDEB6879B5DF90944A710062C91D
FF7349874A27B85563A11A1C5B6FF398F35BC5DA8C0901C0933C6E75368F8A74
776D9E86917785258CCBDB883B1F2DED453A498361603F8825518160640698D8
6D9D81B44978993F962A0E74F946EA19C26B2B56BBAF1D727BEA6D6E35BA101E
12DE774C78A0BAF5850C2E53334AFBF076DA9BAD3915DB200E5ACCE752D0CE01
91D57EE7FA05CC52E0E30090213BFF2DB659ADD1E9993E2508AD48902A883F4C
A9682559E4C206881B58EA640A934223A46C18124969093C7788700BCD143346
603DAED4521F35DD3F418128661DA6A7C2E6C5ACB12FB054A7F7E2988C00C40D
351427E46A9E6313BAEB3A19493375F93917170A43C1C8F9A611E34677614B1E
7EDB0F8935947B35221BDF7714650C68B301F3F440B7ACF7F73486DA4826CBD2
C1CBB08EFE9BE450E41549B3753C32E2CD3069E821015303BD0367A9A94391AB
4330B37D4E7E2102D867A3C279AA24A8E210DE5DE94DEBD07C12F50A5E7B7364
7BFF7062E2F619F9CD5DE7E5A67D422015750196F21075B61FB5CA383BEA25BA
D1C1C0DD07EE9F9B11C181EFCD9C2EBA7235815E92A0E042D0897E07EF470957
279E979EF1326D582F451DF8F04A029C6E7195608885FD3EE120E3D46898DFD2
25AAF62F1B735AE7BEA18DA56392983B9F543090A8A1186B99824F4B74654A44
F817A997CBFCBBED9A40A63965E04C561233C3E5964AEE466D4B7F29FC67A1E5
17DFDB28D3FDB15075E1A6807DC55E25C2812BF805979548ED5674B5BB113B86
0B5E40D6A94B4B7704DF0394656DF7D8AFC53C11B76361F3EE76AC5D069E9CED
1955913BB7AB337E6AEACC7FEB7F644EC9B8A6A138A666B2094D62FB568CFE3D
6FFC0EF5D1CC1A4A661491A4B0B3961CD7E8D714DE9FF915B8ACF8D3D032A234
F388CB0CD2D4AC3BAB6258E19FA15B5F2A0784BAD1758F0736421058C4FD6A6C
0542C01CAC6275035EBE5C39D5276C6CD7F3B16D7B2804716365A754D1749C08
24DF2AA1610B070C8536C5EF8291D41332478D31048E9159E14B21E3B72B16F7
E564EDA45B9A233DC6711CC09D239A62C01E21B7D425505D19EE8745AEFC4622
7E34C387E4E049FB9AEF06243D8DC8170AD2C089806E9915F67F5345E1936105
4E07F83F3A5C8F848D0D00478000C0CBA48F3B4D99C1F77EE10137514351112C
7E4191EB6550A14F9BB3434EBA5EF864EE6AE371131B6345463BA6D333D9D164
CA33EF9F675391B403E452A33E8460B22765062E70F4703BF9C7E509060D30C3
426E6B2B95D4E2EA70EAF25E9CB6192083330A572924F4BF5B4F3426BA24D125
CE163AA24AF9ED67EF913F89FE8C0753F7DBE694F12D88918F1967AA687798AA
3E089442A78478CFE59FA20D8967EC6D5214EC298E046898DCAD47FD2806B314
8270256F369879C98E0D6142714DF38DE91EFF62FA9E809BA7F6EA455C9DB265
43348C5CE95EA5E58505DBC3C9BD22AF81529989D7E242DC65878B7243CA88C6
4CF3E636C90067E673EE0226B715B6E02EAA83704D33694A6688A6B731C48C9B
D068C51ADF3E4F57792FBD8794B3F51A1B12324109D6F3AB7D037E509C5DA4A9
54235A57F0F59D2EDAA7933455CB5BD83002BD6C1566B91A5F3535E436291E59
271A341DB73C65FD7AE189510DB571220B5BA8014D816B85DADE28C036739855
9167B39F60394BF6376A2673F13CEB388D230139B748DF953F541C3B84D43364
1BE68601FF109B6B54A2EB3ACD197551C9C745E635D16AA5A46EA9DBB3B2BA19
CC7A8B67824D505EBA49C65C29FC0F778C632C3971F552868A2686B87B563249
6F2A6B5B78572E322C6E6222B3800D5F7DD51735538CDA0AFDED1C2FE09E0AF9
A47F1F23D81DC737E30D52191C74B0F9D96140567052882E420E933C309E6B62
627435C8B0257DB3DACE6996C7676339C2E9E6BEFE35DDFFF857C03DF14FCBFA
3B5ED37C0D33BDDB82092EBFB0BA5895DA98806F65D71E80FB68C3B51B198040
FD2693D9E2793807F9EE92D88F916C91FF4A592BB0E686451DBFAD0F6738DDEB
6CCDBDC62242362427F119E9523A26E8D91FDC143434AA65DB9708698225B09A
FE9E111A238765FA222E2E86BB497B4A7DD8FE4847F1EBCA6BFE07879F89D46A
D8DAA9CDBE47AF2B9873A2D3807AC4A72FBB990529790BE754E4A314EBC3FCF0
CC0F270A69DC6F0C604794599CD605D3A0B3369005E3FE2921D32022B8FA2B35
3E23764E9A5DBE640CA98585DA2A4AF9DE5A50460C044EA84D0117290BCC7C63
376175ECA2FC62EADAB191C5CCEC9A9EB6A509DA1BF854E00955BF51B3D1E186
5B0A293A0032D6CF19AD21811FD0A4E11C873E88DFF88CBBEF229E16DE8D008A
4CCCBC317B47BE42354627EC71858877C03C1100D8EBF3CECA4AADE5DCBB3F0C
FEA147D75978A9A97AAFF053914E587B8B95AFE807D313E29C5C32327692DA3F
04D0384963F405F6363F314FB7671FFB021948AC9FB8410A3DE22E0A01E367C5
24702A8CFEE668758A228E6AC9E51AF57AF88DBCD2B9AD331E5CB431C0BB2A9E
E982A318B6094DA04EC769BD54BF5B6FB81B57168AB53CE7A124D7F479650563
C03EEC93DC64063822FB44FCAF80C1D659992D93E520F1D16EB699D59C4CB0C0
C97CBCBFCC91F89775F0C851E0562BFA6F3824141C1FD194C0D80EC6DC96D80C
DAA78D7FE0F1EEDF40CDA4BBA7D48AE9B47EEE10551616A437EF76F1E19F2E45
CC7C6B72EA089E133C906B3D519C6849442C9C0ED46CFBD9C759E6CBA161E9B9
B711A9F8542C98DB691FB1FDCF3ADF5B6301A9EA3EA02A41D9D60E8E244F5265
685CC1FB491ACDD3A0CE095F49A231D6B391688B5BFE00F5DB8278A0A9110945
ABD709D9C4587AC495570D7A2BE6D380E2CB8342F9B76BBDBE918DF3CD9B962A
65F8E21F2B0F9A5BEB1AEB597276E46260C5DD85011742182FFA73CE805F8A4E
4E57F1F0D63BF3E341EA0644A2BE90C36DA26877F060E7617069E709EC956004
94F60D3490DC63FCBF35299BA46DAD405158B49E0A8E8AFC53227F017B8EAC34
14772E0D4B643A36A447F2EBF4352A98B252D7C7806F1AA563FBA540B9399BBA
C88FDD28AEC499CD77970273C67CCCFE312E2D8DAF3A2FCAE13E2167BC734331
DF56D3ADEC1E97C854BFD04881635C042614B5E87B85FE4D3B978A36BAB82F5A
7F98C1F5F7E3575D369C5DBE1A5E72A1C9FD9B39CC9885EC1DD64D0339A81A65
AD5F13EF88D7AF5339FA9FB8BFA9EC4BCC137279AE70849070E8047AA75BC2B2
CC04F968872D6A0F8AF361CE97FEB43ADAB9D74B18EBC8139F5DCF1002AAF51F
713D4D0616EEEE39E9EA079F5C2F351D81614CD73E5BB1CE3F13D69625E637C4
ADEA34574337FDA7241890659A107950D9C96CA8BC788F1DC0903DD91CEB7E31
E6A442A095C387C10DE9EAE1B7A94381AA1FED712541EC8AF46A1ECE05AF933D
C0C19434E39D68B7A80D8100DE761801F2A19CBE7FA64B863164AA94619BAB94
F4AB4F1298FFDD276633AE882A540B806AB2479C644491E40A62C9EAC215ED8D
64CB3853D078210579B4BC35B21F61B5192166F34059CD19DEE50495F7DA10E4
9ED178615BEA476C882096CE15FF0E112CC860A42D5FB586590543F5432F8A45
84F9A0EF3B575960E66A41B4522CF46F17AEA7B3CF3B801174D194C3859F45A2
864C72187FB7C90446EF5C48954302C969561C704FDB2922BBA3F8F083483671
5D5E84DE20F3117D445B3CAE10C4D614929BBFB0B470DE7D5096EC1B1FC5020C
07835CA31ED079F1FD60A9B43F59B6FB4561B09B456A6F7D85D0D8048709F379
C5D37E863993BD1E8C177F457A3BDF665AA24BDE5E2BDFAD3CE4A58535A605C5
3FCE7C38E7A689DEA93978B410A66B01188A991958BB6D1296A5A8B25162D3DD
0BB2EC2A214EED19C094E514A4C14A16AF0BA53ABF03439ECB30557FA2D3AFAC
FF892B5EB758E24281BDC1FD61014629680382855A65819B774ADD9B8D910E19
5BCDD13939DE9051E8D0541100E3DF0D3F88460E8282639F6511087757A01DFE
1E8C51F0F4A12B222D5A84ACE9F2A8EC2DB98FF98C08E3366801E430F642D50E
1DBD28018ABA71FEF32ACFDBB2DCFC453DEFA99DF6376097F85E4ECEB493F4A9
162018FC80DF96EC4D8329C31BA01AD3CB0CAD933FED8D2C7270E7467705BE45
525C488E82A9E708234455D4A2A733CB9D8B093150A9B1127BC4AA127DA3A2C6
88FB581034669E31F9861E7D9D06F1C048CE76C9CA4A65D3D95F6CA567D2C38A
95C1A590589ED1C26F22BBA699CD3C0AD5AE7D2E91D09522205F24CF755E97A3
214A47893365243415FF4B2EBA5E902D9C5ED30617417F403ADD5B290102C995
CAB362007A28C7FD511F69DECEAF6270B245B4D125FC3B7DEABDAC6F0BA127BD
4B9E4F5EC5D34BE96BA933B1432B0A0B6C975C7E8EEB3E61A43FD7413349E9A7
6379CD8AD85AB1C6CF516B4D7388EEA9A80240C252B2729CB32CDF709D9203B7
3B02466AA4458855375E144A1F57D2C15DFA11BBFA5DB3507D7032AA6408D6A7
7FB3C503F54E22E2B141D5352B42E4794072D9050D5E4C49ED5B73D0C8429FC7
1B92319BCECA99B3486DD3E5BBD096F0E063B633DE2C8B713F2F47A5CBDB888C
84AED27FB2BC0C615805E8E1580531DFAB9BFA054CAC9A550519196C149DAEC4
602945F58703A8903055D53313DBD15D10EB201B61768B0E38842D1605B65B55
50F6C6A2D657588AC7F70BCD0AEE3C4C4713A25B54FC198529882086B02FFDD1
D80554E73283CE632183C1F0C6B459C0C54ED483636707651C3F912A42C67EB4
02B55B4BFFA0E22404277674A4F490F9CD6DB9018D963F2B00A7D4A220BC7B3C
0377C17ABE66201617E9A1F08D74C8443F83CA091965CF0074AA5B7748C04470
9F848292C9E01EA5478FFFA3F15541AE2D385C4097E673AB7BEF007DEC45F491
6406A0123294A240250411B6941F186C4BAD96CF0DEC60B30A03E09A249A6539
49F11C130FC790B6490B1B068D1E432A2C5845B87B5C7BA643A4F0E10031A8D1
E761A755C474BB1BDDBCF7654B832A7B207C9D2B978C772A765BF4796FCB535E
072F948CA5B1A7B9BE9DE338345544BBD73026D808CCF3CD8D72DEC01BDFF50F
30DB8E071610ADEBFD5E3365402A4C0843F9963BA6AA01FA59EBCCC341180B1C
1DEB6EEA5B15F0A79B2FCDEFC148ED6278F828DDFBC631879268A469FDBEE87C
A4714F2A36147645C36FB02631323566DC5C3C95CEC6828484B0AAD0521A69E7
92093D1B5701FCC091029B671A19934263FBC4680DCEF397130210CC12012D47
C2941C504F5B0A4947CE3C4A3E69EE1F4264E89BB59C4ADF042C631053E2419B
CB743524D53F8EBD5F24E96D6E16583FABE2469E2D883188517EB0289A7C2B16
F06D260DC546841B23B55775F20E1610FB3661D8B5F4D9B06944EC6583BCE389
084C0E80590F21843583EBC57AAF4C521321612EF489F2F5DAC82B9C8B19E868
1F28821DDA8C97C6B6A33AA9F79260503A3F40424E4FE56C8E3E8F1393B9EC45
6C9C39755168316B805CCCC246F0FBF9CD7C43BFFA5A68FEC997DA38B5D3ED3C
C0DFF76C046124A07159DB2589FF08E583F1BE104309CFC797D7B4193A12D4FD
AEB0748EE2F49AC021F4F38BEE8DF2FA0427EBE3F8C28EC36BA0E331071D9B11
BF19F5E6E4509B3B31DF2790637E4375815EA4ABE99BE732D65189A4CB3FBD9C
6FEDA5EF8B6778869A1713C9B0AC672EB0F96A884D88A94484C8D06F0C5E2524
D072AB9735CD778C286374763D655E73BCFA53F7656E408CDD8ABC769CD99E10
B0E145ADFA910C9F000AFD3904E1850BCF12BF60093F74E4F24E38C35C32C2DE
49274D4F87BFC48E9030F2B7397413809F1E9964797F8357707CCA39AE1F17BC
A01026571968D2C0AF612CB8A2CACEC383DE0A30321793C46AA169CF8DC7A994
93F16EA93236C3C6C51F3FBC49333BD7A156F9AA3F6494E0A4DB574B159E9869
7A988F213A981527E28993C356BA3B8F9CE7C88F5D4DDAFF1484267FA472789D
E8310AE2145FB76909474276CD0592A40125CB039FD17139B608B49CC4D9DB13
5AB50904F28FE5685C9EF3E86744233C4885E5B6AFB69FB4F0D1F36E95339AB5
D344DB809A152552F2DAADA6EA79F1B0E73FD3C2544D30C23437CF9C3FF4D5AD
D533AF178C2E2E968248D5B79889D9133B6ED6BD14ACB2D66EA78FC8FB38AB35
BA2424E89E8047AD7D73B1684FE93DAC7D1D4D52E872037221E7F6EA93777301
89C0D0E9D16FB3061E4445DD5B88906B59DFE804795EBB850B5B43A46E499F71
9764BA6BF861040855EE306D3D8522B445176AC6DC1E2F712B465B46BAD81548
25C9B29B1BC77F7C18D62E44A0351C8167558745A4772B854BA31F6022893539
80885FE5EF054D5AE538348F5373689767BDB4E0A1B79C7F709E8893FD84AF6D
E09A53E495624EE1474758D2E81F02352D40A590A7DBC8CD3907AD5C9674A84E
355EA4D1C88034279BFE8E1D87582793FE86C6A4C752C5CA74065CB219C926D4
51E0DDA4C3D111A803640AF56C397BFA0AA8DBC86356F05380975216F3E52525
0725A95D156C0530F2F218CAF0BC63E08B2922231BF193F2714FD25DDFFB5466
3E0F7580CB9E6CCDD4233EC7D54BB562A84405AA26BB3C3D63A531723AD69422
D24EB4A4AF5B29E7128579CEFDB790588725214CD33EDAE1EC3F1DF86D57E716
BCBE5A06689D11E1BF61A9ABB7228B1DB6D17FFB1A8299E07651AC2D62B22B88
4D936FEB7A60BDF181EFC663117564EC805B50821B01D7726ECB9315F71B6B6D
C014360B4D3ED785EC76B6E4B75B6FE0DA6EDFA328DE0AF5CD890470A9AE3E50
F3197D822A57E0BA52FDEBF327919D5EA1929B4BF9D3EE8C51A6CDFFA3A97D90
1589C53181C83D64AA38EFA28DE86728F7951EC4DF6A32C3F29E3E53E9FBB35F
E44DC25B27551A21A0CAA3C6139D58E9D69DEEE301BC87A0ACCE29C371F67D7F
9E92DF7815ED4F2F30DF09661FB940FBC00A9912B63D28DA8E1225BEA475CD78
AFA9FD20CE0FA2FCB05FB2F8CC1E80ABB91D54CC81960310B218C946F79195D3
E07DF0C4E00205B40BCD46133468A1F0D010955C6FEDAE7B54D6514BEFC7D625
F59413361E383E29ACFF6841A5092F05D0DC10CE4D1B7A2CE5F5ECB64DEA9B02
B6A4F1DFCFF669AA5422721E3D7EA48AF58FB645C36AA39D5C31E8C51DE2BB29
33A626528F500201A506926FCC9301CCC60683F333D76A43C1AB93000DECAA7A
C314A6B04D95C5BF8F717592A22FE5AD2C2999117680A62B214EA0562234E8B0
AA875206F0919FDDE6D26E7BADC9821C4E8992EB522992925546D047F2BB1DC2
90048D8A9422045AC8911B05AB6F7A67D8500EB3D63289A2A81EA6B567EE51A6
D1298EE2D8B405DC601123A82558C31CBBDDEA0FCCA31EF963CAB223B208068E
4BA3979999CE1BC740EC90A076CE48F0F4B7F2664F040B07B8CFD0A6E2F893D6
315C69652F9272F2A1596C6E1F9EDD7A35EFF5DF8D3C2EAD0BD5AD97E55CAC10
0AE563564FC1EA11E43FE6AA6B6E33A3AA245AC6A5AD3EFB0E11E043CB68013D
F59483088E0697E444F8698C55D537D25FB79C4C2D55C1F6110A42D0F70DAB4D
6B7E2187A3BF218A650738B948754D013C105E7BAD6D744227137D55E6CBCFAA
EE61D30AF8E103F301AD9FF8FFCF4B8DD9CE727EBA8A6BC0FD4F6B67255DF8BE
27D7D83589632EEF618E6AB28D021183BAF9D8A0037037BA321C07F827B16443
2C8DE36D5E78373124E8BF78ABA7C50551A09B5971E03E3EB888EAF0AB4A3166
F740E482F0965F920B26577B7C6DB393CE5605FF93A95A46C4E63570D71786AB
04B97D1A022950F693A42136142D77A1741E2895CB2CF6F6445BB1D04FA90E61
5D06A805EF2EA704243FB382621C00561D1EF7811306D168A9E62F4696441ECF
94A72E8726982C6F8B442492E7A89D2DF0204E657D0E44FCA5F79A1E9C5541D8
B6827760CEF6C16DD3382967877BFA0B93A03D045AAB661615810AF7ED7C6593
BEDB64F65C63D698827F0E93C157AAB6B168295CF1191FFDDE2C4273FD94BA2F
2FFCB83D29DD6A50358C8FDBA420A0229625A339E8C820AF2EF6A66B248EF129
30D1A25B44D5A4E5B148AB91F804E24C582927E6F48151E720E33CA846C5D597
572F80E751FEF2DACB35DD9B875F3E5A4AE2D89D3C6ED63DCB711600330F1417
DA1F40D84C12A322677D69C0F861E429B4BE9DEE852319C28B522ABAF81776E9
30827FDE9C90C74D2A64FA489C07010A4C6B242FDEC958DC0863F7C2FA68B4C1
F7EC7D7AB9112770D2CD76176902336820FD82D95D666A1DB9213C2142AE6971
B5ED122B7A7F433757E31BD03FD39772A06A03C9206CE613A0838500B284B3CA
2F0DE0C08733E8C1559F67CEBE47ADE1BDA0E7CEAFDD1604E3B8134C30EDC7F9
79085E2954CE3CA0D2E4E4B9CDC079B013F0D0EDBF29C1E6D80AA8ADFE1EB1E9
F77B0F4A5ADAEA6CE251EF71BEFFDAE1393586EFD57D196A73B5C088FE4F9FB5
3692494E608EEB4539D0D52AFEED8E1B01705929B12F019D52B5BBE0C33618F7
6E5C0A74428FD615C90C73D448BB91CA08D908B1C5AD935C38902B5469A49F09
EC1A7876E8DD42FD5C3DE3159D9DF15FE04E7029FC6AD3E9D446F1AB2C3BDFEB
E7CE3D69F8BCC18F2DABFE7494F7DACD240188CAA8E8A68468FAD75159CACB29
3FE23E3D58DF77B86E4DD3C751E3FD6A2B87E975711641948EEF058B9D3996D6
4DB81CC7A590D6C8174249FD01A3CF2301753FDC5EBCB8380051AAFCE7D282BD
2933080309FDFD0B4116FEBF804101D3D13B402FC49699BE53783482D967781E
BC555F3282E2BCAFA32FB1F0E30855AF3F075CE9B88F68B42209AF7ACCF23085
F7ED4D8509871D9F719C2369EDB20DB292B33494734B26CA503A2772E29982E3
4B79142482B2FE78D03548FAC2D61AB34EAE8A372BCE29959443FBB59A366BC7
6F01E419269F520C423447A8D65255FAE5E27B9C63E82B0A49B1AA35256B8497
52CD7679FFFF591B7ED1007C7BC09E13E90690A80D05258F4C34FA1B8EED52BC
69654E690A5C74429563286F8FA468D4872655A2BD4F3C20B836A621B06F20B0
75709FA0A990631978245ADC08182F3E10DDF614AAEE0D8590A322842D087EB0
AF8E8AA7D6F4DBE64EF228E47D370DFD699A8218937C7FB7E4CC3278AD9C30ED
8DF3DED701222812BC62A9D7E1C4EAF968FB844A8FA4414EF3389EBBE3DB6025
CFCA26CA6070704E3630A1513CEE9710990BEC8105FA72C8099CDDB5F3D506F4
0EA4C8D0222F3F3AB0946A5637BE323E2DD2566059ECBFE65551927772803D96
B38EF4647D674AEEC41A3E496FDEC2C0A1F90C1F4FF7DF9EFD027E1B0B5AC907
6C21D22C18A1C53D4AEA7E58B6D70C1AEA9C0ECC5E1787985544273ECCB27B5D
1110AFA362DDF433A635DFBB1FA3D448B363C36F9830029A7DAD8C90A4B520F1
284E1B7C20D28ADCC3E4136F2A460B352E1EEA4F86EDB1EB6F4647F4B1AEA267
B4E0A71CB490EDDD78DFF769BBC6250EAC584D3B5E88ADD1EDD93E67F93C6246
1F32B8A683D919B5E13A2C0F34A122D407FD5C0C1472F6404B1AA6039BCA9DCF
908AB3F675F9DC9C82900535F5320F630BA5F689CC6D91517EA4B3FE9084C6BE
93FAA4D990B61CBA9199A8FA809CF94AFA28F37EE59B9CBDA3DCDF109071C246
9B43DF46DBBA605CD084CE610E61CF5F7C8B1546B7A57002CB5631ACEA34E8DF
51E33B4519F4CD58195898392B0BB3E553438CE544B5058128680D64EA62CEF4
0AFA3F39FC3C54A4A17883331B2BE5142DEBA285A9E7F0A895EDC8320DDD37D9
C65BCE5A56F2928E545E28572B72D84A7D87F06B58F51818B80BBA556EF7778E
22434ECCF66634DE566772DFDD2A30ABA1A941C458A274BBA0351E4A7A084BCA
DDAAA1829308E35833969F6D061AAAFD527D64E34F1C51ABDF3E7C0F58421A0C
349D4FA4B7255A9A8EA08171D1D7C12B792A176333ED01A5122941DB251077A3
1A0D8D38BEA3A04FB8860A6674522C415EC577C817BCF6F31DD2117FE34C0EA2
AE82D3DB11C4ED6C919FC1FA6F5AB1D7242A2535B1C2CDD053133888234A06B8
6A2BD7B5C158C66AA311190D4A4896F091965DAFAA7E3EE3C0995ABCEA6E2B08
F381570E909DB6148FB679B603BDC820272D681B750750771CD6D3BC2DF4F7B4
1A944047854CB602535D1A86316C26130180B89DC4F46FF9216F1C43F4414B7C
12B4B728DD724C21750D736597A601881043A313A28A9AB1E3C64875CF107E8F
35C40C193914BBC36385AF5C270294A1A3452C92C1BD752F6AC664DF18166F27
FBFA72E80A623404BE5BC7D30BD640E7E27336B7A9B4AE21259EA55D850F6F93
4F53024260F7BD161E90596A2675C1FDBD11AFB9323911FD032BE7E564C7FAB6
79CEA5B917B950C284946E38EC08F49F775D093727714BF6D9389050F742987B
23293F56AA818A139B32C83267C424429C021471F20C284307E548093CC81AE6
777C56DBF5E1072D4D4BCB8E40304AE711FC4B41FA37916DEA6B6E1C655A1FF6
DD291D0E93846CCC8A07CED5336A6CEAC4358EC3FA22E15FC6721F4ABB862D53
0CA00AD0788BD3049E5CEB2340F02646EFB41443453D50ECDAF201BBABA44CCF
EFFF9B865230212BD07C175E62141F17DB11717FE7446DAFEE6912DDA5F458D3
4D1C7F5344DE2C6F014708F5553AE4F0B9542382A1C259FF68C4A0C748338792
16417295BFFF297AF398E3950E1EF3FEED36060BBA2543B9B498C3E4A2708232
67DCAF7058E9B8EC4D4DEE308AC29CAC65B092BFC794C1564E2626692F9FC703
19708B99117EA400501A3B32335F7D0EE919E869D196B6D0B8B8D320FDD02BC6
1BF9F6E2B6133A81CBCC7730A01122D4479B1F89E82FB978D0D24A03FAF680BF
60399EE11BCEF574971826E4886B54EF0C41B98D103FCBA090D7AB5C51E5FFC0
F527B998DB372A916ADC6A8A428E78F3D55F1C31F622A6C3734F088D94A992EA
E056707765AEFFB6AB533A5CD92C4D474E59E568C7465E6DCD933AFC7C4F3790
4B6F5DFC712B24E35CBC11D4DFE8EFBAE640A2F4B94F244D365B74022510352F
C66C6F7741A542E9CDE296B257752B47C6B1775BA2F7BFE00578BB6C18A3DB61
A9E84B41CC5A6B7649667F16ADA21CC16C2583E2E648FD2401FD0399A1C753BB
4964F2AB48FA18536395989FD6C893ADBCDD169B819601780BAD637C4D7581FA
0731B2C698D1CBEE55968EEEBDAB9195ACC646A3CCCF903B31DF2790637E4375
815EA4ABE99BE732D65188F273D9972CD1F065FF19A49E13E75C561AC5582BE8
982E0BB07EED26EC0AFF52F658087D5C67D702AEBF0B8E2F82D254165ADC4C98
0F349927924B24C1112097012444434499435270B17B9AFE2E0C0729E5F10461
A8DDBC965A38C143355AED03337DEDA21A5BB90DAB18D604CD3939ED8F63352C
072081722603261CA99CBF3D382D4B59AC9F075224CD1FB71F629BE0771C67EE
E2F5B82345A98DAF86117A339C08C6BE7E9F0F96B20047C27BCC89129017FFEF
BD1D10272DC613F965E02BC6BC782E77D5B7758A43F98F4D37604338D6C4252C
1F55B37F5F1A4B3291F639687C8C86077ABC60E7E6AF1716B31EDE7EF4B44C49
EB702C7A279607C8963D3F7CE463ADC5EE7F07C8B595C0B2A908AA8F01FFB480
FB455EA7A48341AF6156B588AD9BBAE553FD0C7BDC027A34721E11582CB81FF4
0E55223D7783D558D01202572283E7EBFDCBB5865AED76DA5D04257B7133606C
30A0C387C01889F51886CA176245B74107717F83F57A8D495388AF1C521E0E81
1651B336B9ED2B706ED53B2AC0C79EB80491AAAED5849183EBB87B45D6BBE77C
46835528762D11928629D720B58CC46ECB40B6A82CBA38B2DE69A34AB540AAE2
9B48B78CDCA85CC1F44348B96CD38201229A502DD9BF4AD3213A55040DA78A7E
F518E10C8B59FE170CAE042006E8ADB00B13384DD1ACAB41E8CB3A0C49370B70
9ABEEC69E25740A374B3B3AD42BC6A30907202F11F15D5300049C5699837FE5B
9AFE7C715F1439F80A31601C616EFBE49154235BE223AD60CF2CDAEEEF41A85A
C760269B7EC28F33CBF2F72F87381AD02719D269BD4183F18D161405570DA6B5
CAF8A53DEEC9D06DC06E43F06C9076CF920B7BEC2E3620C41A9D7F673FE4985C
CB7F9D607C154BCCF899A3A235E795A2D32193DC84FE65372A9EA31686D0B08D
5954905A29E11619406ECD84ABFCEE313D761A7ABE11D9A8DE56B51DE56C8225
D58DDA5C8F75A315EDEA8AE0B8D51F43ACB662E4864DC052E1C896D1252AA620
D78D9D9C6E595CFE4122D34396C25252224A004E8FB68A555D412B40FA5DDE51
54D09BA54FC2399603090F67CCF28305B157FEEDB7C6E299EF1627D9B9E8781D
B40F97643109D6137A863FC9DF29B2174268B8837C3AF9E72928915602245E7A
225FD9CF3581B17A10F3E5EB9B05FD343D6A79C1DFEC640369D8FD9532E1511D
6B1A5585697B7A1A2E0531CEAB3A6A649A6C29D5CC79F11A92E09A31709E9102
C9FC4C685651C790E176497E83358C001837F1341E02C8D359EA1F02CEE8F51D
AB8C05AD21F4D2B9A7B28CD44CA66274F109FFB7CF4A348650C7C9E25904A555
1BAA49E19700FF1CD18E55544FDA54329E4BC35DF894A1BFE9B10A6FC98644B8
32E1567620E4E22FA8E8B610C7BCA11313B53FCF9159B60849B8E34FFE0B7E3D
92329FFF71308310D6BC5FF41B50C58C9124A9D204DD6543BA42600E6081B03B
A659EB24B4DEE643FDDFB650368C7AE5AFA3E266BDC1C95DD39D84A6A73DCFAE
1D6456A65FC53E0241766526E1A41295CE0737D94B9B222D3DD41A6468D66331
8863E87B4CD3EE5BEA4DCF6E700428E72989CF91AAF8E0D5C795122A38109236
6C19A5A445E475FA97E613B23AE883E62BDFC357035404D3A21FBBF35F611940
270ECCAA496581AE5FF0282CCFB245CD622A4B945656B5700AD963B46A24B24F
821DAF8CF5D96EF9EE51FAF022DA5DF130E7FFD1E0CD138BEA8C8BEC7F86876E
E1B8E1E5E42F702D05439436941375B7B9B969DB193AA4049061736E8B732610
2E360229591F1B7785FEB8843E1079D308A32DA33AA0B648F6BE6494EA8C2A9B
73167FCD58A80ECA64D810A66371A6078AFDBEBE813FCB7A0D7907F206186576
14526824592D05C21DB79A953204C2F30E6B052219F9B26918611C734E7853F2
CC5D5756CC52CA9EDDCEBFCCC6D2C3A7BF3BA20DBF4548E654FEC94FA79EE7BF
D8CFF61BB6F90617B38868B8B0FD0C1E2A3FD186F173758D5FFEE96DCB0A2CAA
182E3DC8A95D21C672D5122E60BB0473A6DE1C507D2ABAE1F39F9D01BCAF8690
35D9E01A33F6D249A6B03B1C3788259DA79B745738DA9DA1C5053A5A7F0FD681
BB6F28112040EE5E93ED872315D316966FA2FF5B97DA04BCDE4A240888E02996
4EF6A9A70F9DD3E202EB4475EC613BFED38800E456DF394846C7E8870D1D46BB
E2514189DC6CC304E6BE75EA05724111D9CFF9AE2B106FC9E6A52215C997378B
846810717A81F6EC72CAC84B78F673A190038376EF38E9827C47317C774F6B2F
CD0811114E3B3D42BE13EEDA24F6D3E3C36F285A82DFB51E39594B957789414B
8ED73FDEE8E399E27D331F055947E87F2B3C2DC247CB90E8836C75BDD372F9D9
EA10031CFDE0AE74936FB0B11FAAAA85C2B216B31EC1597F31158B119C611F6A
C595C84E7D4D9BEAA2F089148434C67A873933EDCB4E21FE7C5287F744DB87DD
82948CB95DADCFDB840EEEDBA2CFBBAD69504337AE323FDB1A3957ED4D2CF989
2D7909288859743F29FA24F6B2B47C5C8AC51C11B99656FDFEF2457619EF3393
3695C606495AEB75B88B10B97C03C4B3B7CA51A8A4383FC0C18A715557E8581F
CFB1D9E40EFAB43745319D5B02D35E38C725C05139B08D23AAEC518DE906461B
76D135AEF12C1F6A2CF86500DB446C0367A080342E9AF9AD12C4621D7DABB615
399F8BD57BC27392D7A101E2D9C6AFCB74E3C5902ADAB0BB68F2D785358EDD39
DD53D99253DE3AFC8BBE12C141B7C8A71E6200538F89DAB2FF8AE1CD8E5D04BE
8BE0D3A945DFCC427F268E06C987AC2623FE870072408C05A9CE929B64208C78
7F623BED848FE69868C9310DF48DF13D741F767D9817E1873CF80D9298AA18DA
6E60B7D48779C180F43A83653FD180666BAC03CD92D66DF5563EDE16A5CAF4E5
9C0A71FF55A00754E23DC8DC687499BBC9F70C5E75774DED842376C0A79F872B
4621439FDC8F59AAC8AA7ECB69A5D14898F8F7E4AAF8B7FECD1FD4D3B3A94AC4
D4FD2A2EE813B63DCEE24E26EBEC6A129C5A98D1068244F5E75021040A562EAA
EA5F3111D8980165090ABAE79D2EF291B455FC4B02A8F30CBFA792ECA5468249
EBCC782777B8AF94A8AD63A0A818BA900BD4D176A03F532C95850064AF01944B
A2D55BF6E54B7F77FF1516EA13AAB161B4B79A8BBA202E9E619FE440AA54376F
6C8714205CCC47A19C83C0B4F50AB571986871D9E72944E88EFF234940B4F28D
D22C1F41C3829E2BEB7FCB8E81D7DAFA9765DDCA1B515E7977C2866E5C67FFA2
0E33F5A4C946A55E3CDDFB1776898F8E6F722FD7410958A664E0172541EF9492
6A6FBEA15BED1AF4AC01DACE46C2DA0869D5EFC4A92E8482454832E942CB389F
5B7E841DBC5A755651DCB2C965FEDCDA2AEF42B16EDD0B0F11B474431729C3A2
5C83D9C5889C26AB1D76D150A8F51ED762D467C908A344A7F2F050EB067981E1
4766B0B53338E2A426BD0E96D63C93491F0B968A17FE6CE69A84F2723CB72A9C
9EE0FC6ED04D4D8159E658523BE1174E60AACACA0CC0892037A57026195F8448
B240E17FE9E2B4421E1E1F3394809668E735B182DB3FF53CD75523C70A2F9623
710E0BE653B5E77DB7BE2526363504AED3A291A9611B0956D10EE197691310BB
476C4A390429BA19177B682D37E6251C228ABB13021AADC9950EBC4DDD719A44
5841F827D4B420A080EAC2F7A4AC7B51FD89161BCCC5814FCF0B365ED006ACFE
9F3762381E4F803CB3FE58CB1BA053293C5F0EACBA5E5D5031F3EA7AE70F0685
902A4B42E65855BEAB225D5C8F5FAF9E4D8120DAF36185ADA4C60A86EDF9882F
CDF6F3FB161A92C13603D586FBFD978E2C9C11EBF484EE28E01AADA9C69D1077
735F873038B6314A801442B17AA5E65962046292BB6DAC978FCB2140B8900CF5
761A375758FDD5757B5DBF97D3388D9AC0C416E70905CA593200BFF6C2AFE951
6AE20706883DBB1521E14C3D3D716ADC9D17BFC917F3842FA055CB14D9812ECF
ACA834B6ED25619EAB1340719620A31E7C355D977C29A0E71068F8593BE30453
1761A97E569D5D6A3910EEF5AB67501816A96A7E50F231B155781769DB5B62CA
2873B97B8D6B97F392E9CD27C4C8BF148000D69AF4747DC2F496D4B0C18DA1B7
BA82EFFACB1325AE24F3B837966E49A31E3CB0D25228C3C4BC192AE52E2E0C66
F0630779507ABDD8A897BA23D4A62B26D2039E57F3A72F9A7B1BEE88240C4AC5
FDA2F54DE29D08621E9B529F538B31CF51D1DC9D98472AC359FE0C744F65A399
597441DF93670149EE9FC094EB282385A344A038ECECFF03B5FD5A01B991FD82
3ADD4748B5388403A1CBA347D1FB9C6589E9D5E471D241476ADA72CF62243F83
C84E334F1F637EC7BB2F47024F5A908E4FF1BF1F72138397C6F38A13E096B13C
CB2C5536900D8A10648FFEF20AB3FF65CE94BBFE28370903F0744BE6128B86D6
C46B908EE94FDFB8278959C715281FF1B86212824C994E91584CFAD72FE0F9F4
5E5ADF6062C54D98CD36FC42AB19D7554FC6699704A4D927F626D452A7ACAEC2
280FED14B0B804FBB5B4923C91889930A1482CD7E7BD3FC91ABF1FD4EDD4FBEB
5040505DB0BC74B754C326968F3BF11799F58174A2A69901B06F9D041CCB50C1
67EDCF7947F8CFECC03C5854BAAB440E2CD4B61EF16AACE6DDA37E0C32B346C3
619DA032BAED6395D4697CC0764E79D197C1D04917870E67AF71336C10A1FAD2
4105D8E8F5910B36B0F7DE7353AC7861274C8B7A6F1AF836E6865431C6F6DFDF
371270B4092A705AE27E4B315B685FE8A3176E3B2D04F228B23705F7D7547DB5
797F1928B07F737247E9252413824A6B3903FC3B1DFC68085498F45C43BCD5B6
6E37184EC3440B6E6313E454C2D31A215B3486782D6C88E33230A327FE01EB8B
BC0440F5934ABBD4058445635AE09F6F7202CA036B82398ED0124A1C89835EF2
B43CF6D093EAC23EC4E58848A5B777631A222BC944E28390E5CA316E522407AD
A24F1A17837ACCA25B7D45A07E2A9966367835A3532A80DA748CB39DFA831B83
87BD377B71DD22D310B45304054E132179B275EE54C9BAF3DFCCFC8FC274AD00
DB55928BBF86112C24997BEBD8D4FD933B989D163F73DB778E6032E324341EDE
13753BD72787DE9E4079188010E963D5D892475CACFF0180A6B7560D951ED21E
515A54318133D0AB3A7099D265A3D14F65EB455C4BE8BA58244A285A68CFAB6D
98D5DA241352E576EEC396F7E2D8F77156292FAB52755A13A8C2644838378D3C
6D21577C98FA742628E578044FB07F40CAB079FDA5F8B8DB30BE3EBF0C4F26EC
BBA7D524EE4C5B5CDBD257D67DC182980C940E374171D6A16F1C2164D79F3F44
C2A01874EBC12013318AE32CD8290742A024E93D65DEF9FC89F02CF99CDB07E7
7B80A9643541BF35B22E9D9911021B8587127AFFEB2EDEDA276EFEB65903BC5D
D701FBF4C408E46878D8E3C79796137EC7B05FFD7DE5026B1D48733F98A86218
80C7EED164C332A144238CCA2021CA403DE6F4F1F607BFB0C67700FA059EA09C
A03767AF7A7B4DE3A796D1BCEBCE641D70372F5326C765D037FB272425A157D2
55B887C053491F98D3DF530874590DF839E46F842AB21D332244172843C1988B
4B94C7BC610AF8CA9F094930329F907B9ED78BC78ECB15E2ACDE6E63300C22C4
325EB91E46E46D4BE3DADA5181972C4D2A2F949DAFB3E216887CC571F74E2801
BC41CE66CB69125BA1F6CF7E768C716F2CAE673D4BEF224B2A64F68EEF4EBD38
089EB0391DF1820AC963C5963AFA8F425050FAC6B6BEA852DC8121D25DE9611B
BBF0ABFDF224E7241B1D62E85152418CECDF54B6407F7493C7A33F07997F3A64
FA3B427F733931E45172FEACA687C289B4D966E1141308B026F1E7AFA700F572
35B7A772FE80D570420838238B848F5D935F4163B9A395347BF21B6162826A4D
D5DB1D5351C8AA31B9C2CB50874C0A3275BC10252655B827F97843A7A03DC7D2
F4939ED2E166CE878DBA766DAF2725615CFE162F484CDEF361013F60A3165820
1BD227ECFC43F70E5E45E16796205751600FFCC92BEE9E5FEA43095A5BB316B9
4680F70CDAA120AAC0E546BAF1B0D2B8299BE30FCA508594686DE708C642A433
F18AB6CFB2374822EF16308E60CAD917F940F2D458B7CDB07317F031794DF783
4E5D8FD5FDE8629BBBA73CE48C6A1BF5D8F650F56411D44C9DA2B07756C5C78B
9B7005848B53B27BFEE70A0F1FDA73CF78EE1A03C30EA43821250B7D60F2DE5F
1DBE06F64447546FE15AEE07EE44BAC0D578A9D1692E6CF31D0C40786825075E
362951BC2128C415B977A859E68A69809AFF42A3B4D8899AB76AAD0FB1A89F79
255D32AC824C46675D4F96AB3EB89EF96D19B865B4A0AD863664AD3F318C5B79
06ACE0CCBEBB1ED6FEBF8B55815CE0587B6E8B0579252D2775B6DC7CD2D0B6F1
F2282344B512388D1CF765AC775154134382650285FACEE6743DC5BB494FDB1D
8FD65BEA8FCE8009D30DFE13558FD387D8125BAC91322E5BB55348E9CAA62DCF
7A8E9512761986351742179EAE1EBD6D4345E9B0701A7870300A914475A94804
030095F727151280537FC0452C3FFAEE1B01D17C565B8CE1C8326ACD1867440A
1C6F25089ACB08A44D988CF257B01A730965F78747F492CB687A95A499D1D636
6481BCB288F3A85BFDEA6C9AEBFFB00002F6E0B8808210AF8CA9398DEDFB043C
001A21CE6234FB56B8EE4348CD72B938EDEDDCCB5687317F33C939A2A1A01F90
916C85C523C7B9F1191F21354218E1DBBA19B9F4FAA13FD65EBF6CC59DDA2CD1
86C30DA96AE9E41F275AFF371ED2BC834CE543752DBC962F7E1B6BA00B0C22C4
100186297873833682360A90FE6710197A44E03582A7FD1AFA7BDB52A54EC9BB
FCEC2F5BF926D9E268A341BA010AAA1AC41B40075B3974C109101EACDEC5DDD6
8C0A2109144C2570748BC36553A79C315CB13E2B8B9C038F502344159BFC88AF
E3C5249236A7614E1137411DB4D835BF55A10728E27936A87055B9B81E2F6CE0
6B6EE1C861D431313F81E6AF410A4B0BA9AC68EECACC934E01DC2E9E25D89882
54F700961A2786666B129F4B92779FE20988D960920C5C39036187FCBBF857B8
305F5168EC758CA16E2AB9B71F6AA507C675C287908E15443180CED345702044
3F8188CFFC9B798427818B04689683C33EBB427DC478E382ACEF5A302E8B6F02
6F7E9F95441369013F4A12068A58C0F99554F3CAAEA7BAFEF34EB966B40806C6
D7B96E4E8BEEAF52059A897B1EF6B655EE0BCB55639DC359740B73AA8EBA1833
8112427A6AC04FDF802DA9FE9C00DEB52B6857ED68402100ED72971D6C1A8D8F
6A24218AD04BA90F9B687A8FD59634B89B7A80618575DAB06DE390E2B003C59C
E31E76D578AFF6663A5D6E9186DCBE5D151D3B9294AF1E26D7E77864DA7670B5
E6928526F8EA86A48125C2905D02B05ED3F69CE2DCAAE2F75A393FDDB99E21BC
24DF15E8669B977B3B884B451F16A9301238E16327A290657A1B99536BD37A79
9855334DAC3760434B40E84A823770BBEAC2B819DF14936EAF0DE7D6EDF05246
E589C222BCDD6FF65525E514ED31D0B89E2A9E2F94A879D93A06C743146B8F4A
9549CBAB453DB59A4162C125E29433160292E7D2DDBD1BD3AA4160A5B47190FC
0E2B54D8B4842FD3C87933F91E361FB5978AD3E355D0968FE5548D97EED70501
C9A3ACCD3E741DA162741118DF55EF639CAEC29714828823913E23F22E5E3E54
ACAA1EFB2B9D82B0095F149752FFC1F0C964B6FD702A31706F658EAAC804BBDA
93BB7DE43DAB71AC32EC2D344E7793774044D5BC43EA7B3A8DC12101D24656A8
FFDE46F924DA7BC8537748705071DED8DC5D99039A1EAEA5B35B6D5A6D457771
D7ABB7B04205EC2666E1AD571866A171099DFB475A3DBD4EF0566077A2102905
B8CCB2F6BB62193683EA42BB3D1D560648276AFC790EF7717EE2106D4FE67590
183AAE96DB40CAD0DD57541FD7E3E2242EC8D82166E2942640E3BE42FB46471C
0D10873490732A21E5440A4A11CEDCE9E0479D2A9612E399148FC9ECAE73FDE3
C00FB4A4F2BBC687D05649AFAA163E66569C2E98D3AB48839526165ABEEE1B10
E1BCC7E4F89F301F0156F5977A08D94B33EBDF3B4F8078935AF091D1DACB6F9A
1EB5EE80FFD5ADE8E4096B5851057201264039D59E694B6C2159AA53A95A6244
3770CDFC7F0F11D2321A837B33517DCE3B0060AA3CC1CBD97C346A603A2A9EDD
4DAF2BACED98244AB0AEB7708B70E623336A2CBC5DCF5D37A9DCE374762E175D
0F75ED435E45962812E5BACEC9EDCBAF476CAFC542D6D46271C9B777C955C917
138F34DB024C97D4E716C471B0CCA8EF3CC4B769D33830B1053D1A047AE5DFDF
42D9E1CBECC5B32E0FB1000A3E61160DD127BE41315D69D27D67DDEFCA65791A
CF4AE1970DF6E0C5327C6DFF17CA176521B908EE136DC68F1DB4766F06E2B08F
88C9961E8137ABB7CF4E56460D1CEF309F87FEF9A52D7AF343DCAB257409F35C
9376BFF1B4F1861C46E880BBD226A47A05A7D8FB9FEA20FDA975C3BDFB0CCE9F
7ACF7B0ECEB6218C90CF718BD8FDFF8AE8A235A955C62E4F8BD4689746ECED36
9A938952F454401D39BB8E600B4C4C8CE15474E417880C55258EE6CEB648F3AC
5E03EAB3528BE38AE254F80777E9B5C7980BE1C1FA61D8947254747CF915AB8D
54A259D0222AF8BD7A230582C4B4A343FA833D72D59F61F89BB37E6B814DEE52
EE287AA33EBFA5445F4011B341B712698F7A2463594D33705BA9BC9C660A6C8B
1AB231FEC4C1FFAE942D1FC1EFE2F396ECAF94BF25F0BDD1ADCE10E52BF31F03
CEF715707E7A1467037ED8A16849272AD4DA7F3AA464F1B05DD256BA4FDFD530
A72BA864D5318F9FBF3BD8F9807E190C525AE07B27D70483B386CBAC3F23EB74
72CBE386E5BED62EBE7AF5B35438316247A2BE8A97A1581BD5979564F64A1A19
7E2A1E367B38FE6E9A3D2829E7BFCB91B0A148C75128E712D3D1C3410DC946C5
8F5916A22C1480845156BA5D15F19BF9420A15ABCA1D0DB58F96975D756AE22B
522EAED4F59AE16425FAA0819DE02D27C84D2FA70977086EC90923112DFE5CDD
D2FDD6A71F576A3AC65396E9B3E96652F2680DD50FB7444F8AB83AC7E91E34F2
36024785B5BB8035E0CC7902E06999EF7326DB53C01CF7EB317E1F29623FD1E6
21555BBC31CEC9DC9F3AD5A167799160965A7480D2810CE6324083FB3FA7526E
01FC5CCF184A2B624AC7AB2C5D361659A33C4ACDF11BC28EEA78F19883E7B47C
86F372CF6C258AA8A118DC2B2D482CC87FEA8FB2567A74B4D54D6B8EED0A6A7C
F1D1BCDBB67888A98E4C8EF9F786205491224D3E9766105C48FF95D869277260
96AED4468FEEAA1B3DB8B55D21B7AF7F656B030AA67813348019C58B03A6F210
78D91374BE47074505BAABFF10B195FDD988F5D4C0534818B71959E47B420D79
0A1C3916BB82F063A29A2A2D5606BCC63C3E31E2864767BC66BA1FCB123B7B33
D1CA9840E3CCE3981E9385DDEFC522866DB8EA08164208B24432D986EF0E79F9
1F70DF8DE3BDF2CF665CCBD7ABDB4422DB56BCED1CF1F1621850A2A4E8D2F01A
23892DA6040E1B18F8C3F4369E5A319B513148DDA5111732C8E8081A18498954
F95A5057C0CC70B58A50184E59009DE32D5F79E4BF903A47F71D68D07ECD73D5
C5EDFF499EC978E72F2CC954BB4BD392B3D6275404009ED16D3852C4B1919966
BA0D50EE4FC44A4B937251532E401063EB12837CF1CBC1E4DD6CD09FD618E1A6
429F09833C2FEA0F61BE8B0ED1D91D7BCBE8747F701F02A8744C5BFC620807C1
AA3F9B3A75C23885123E0B76CC08D2103181F00DF80E6900ADC82B39B36BB71E
1839AE0A06622110A4C523E13E37DEB8B6CE4ECAEC6DBECA3C3A6C0E9ACEFB62
C3F0EE03BE7444068E53E2C9F89CC3D44CEAE787418CF1738A08DA24720A7168
410E8E7761572BE3D905FC91AFDE39DD8CAC8E32F3D1578B3FC4A0986B163965
5B224670F51848CA120F6EC30C1FAB526969554E70F56527435BA0E90210FD22
F2D55F8387FEFB858C419AEAFE04FEEC5F3268797EC6F858D158B15BDBEB6DD6
0ED48EACFC87EB0F3D3BB5024070CAD0710EC328BB8F99A1213A742DECF34299
9871DAA845A1BFCE2AA9D48D211FF4E9D255CDF163C73ED751B17EDE87A5C32F
AD73A5E3248C6D23589602359701C9E8F269B511981F4BF6621E632ADF01FEF7
7EB34CD93F6BCD1BDC8DE0D4098EEF22C1A7D02A07FFB1AD0F3335B91FA905E2
3C5E7A4300DDBF3AF4B3E65A8E2F6716880D35CA7B647D4BB6FA6C7B5DB4598D
D503B16E61880D365E8525326450A952E27DB7763E40CB43AECE09695EFA0C54
297C0C977192FEB815362A63779C6759587FDB92ACA2891C76F17DF979A2546D
99A2D2CA7D718194200B6BA41B4A15F8D0FDD319639647750E13CF0819ED0727
3832E240F68CC9128823E77478A94D492AF53FCF340CB5A6C7D650FC54B2F2EE
7926FD593EEC4A5B796163834E0B1298CCBF2317562298F2EB730665C1A839C9
7045B57B30FD2D7AB7A03D069582FC81637B5DF81B218E0BA63F54EEF9937AF2
11CDE3685C4007361317647045951A13A7BE456D9BB88F4930208849A2EEAA99
6F4CEC1444570EB31DAAE150558431EE82F79CDE57B0609218A8B4CE85209209
DDE6764B21E14716BFEEFCA3D1CED50F26779DE8501D260BDA29D9498F5E114B
C4ED2979C5CCE676FF64C8649BE35FB74642F1D1A7DE98C1916AF3C64CE195AA
BAF5FCFB77D83BF0F1F63E1B116F1723068D69F81D79AA843B964C460638FA2C
E752E25A13A416A53DABCE91D04CAE71D87542502284F56B64ED2E391FE1BD00
D87AC509F0245B2D4911C5212EB1777A0AAB0F1B08541F127DDDC6CF2110E6E1
0EB8C1FA2BDF9F00100E9FEA9B3D6D0E1A09A41F798CBF71EB02C55A9E91809A
7FA9CA44834872016E4E294C7F78FED142DA56B6EBAF5DB938AECA11E89DD312
BA24A555F95EADC46CC6B2499B52040D2547C3F4505B96D3112E2C4AE5B3D283
A70BD30B94D01D9A0B74A16CC2B888FAD7B11B3C56F1E6378F6994500CD5F800
8FD7A06B458399419A0A148B7F3AA2E60B19A2910CE533CE14EF4B9B99048138
2FB571F74B83E8797B3C4E1959639100E1BD9E207BF5A3EC8630AEBF5C489F97
33592098653ED2E916819C2DEDF2587795AD8080423187E55E8F53CF10C41145
68DEBA33D4DE2C961B373C7A4477AFA1010AAEED74F0823C99BF1C1D6CC83623
D2AD52BE49A5E497E927CE6CCE950DED8EE2AF37FA33B6E076B59CD343A4CE98
EC8A6C4D59112A76E42C1E7372B12E25F4AEB0647EE1A565DC0935E0D53E47DC
FB26172826AF875C35E01C84875AF3C028FD19507050F999A6EFA55FA53FA02A
55EDA2FF8904A40676A8B240BE74A4CEC454650CB83F4F9E15C558E6CF9AD473
CAC9BCD54A459E05A8A7320E4FD2ED2FEFC52C6E113A9C6D53D34332A7D466E8
FE48D7AAB716423B50FB37CEE2F32723E101227D671E59F72144C451B16385D7
E1F564DB6AA330C2CF0E58A83FBC8DB8D6543C93C13C44E0A93F9AC917CD7E52
7E3176710A32B034FB91A59D6E11B2387EC9895AFA2C07A0FD9A3DD0B85C5DB4
58E0E03A803855E8681795B0D78E61F92458089AC6E17E19ADC5AE202D7AFFAE
41A80E3622A8C29855EDF37A559967F71DC645C33AB3C0944F28E2B59472
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 70 /a33 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE94A09D54FA74709C83B0824F96BC972F4FD728E
F60FFD3B497669223B8AFE23F8F89A7B65EC840963ED34CEBF15B2B390AED063
62C92C5A1D67C52F4F1DA08925B994FE372C812612CB6AEAD620DF3590E17C3E
6D68F0F03D1A7FC020C1AE5DB531541342C74A6EB6C646C2F079643857590424
BA45CE60341A502584541926F7CB491B12C3934A2416CB6F9B1E691341858AD4
14CF2102F14F851EB3FCBD2A042CB6BC92F7E9EFAD44423A5F34FCDE2A796E98
17606E076F024C4EF8EF28BAD9DB8ABC299CD28663CE795D978FD4709069797F
420B0B5F9BB7F26DD49D2E76D7A11670DE165F007D93504A4F9BD73CCEB485D9
8DB739E9326BBB59BC79F950E60123C9249D072B5C073535C6C840BC4CF620BF
DDE154C57032DF4286CB539099
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D505169A
B09895FB0309DD764439C39934618F046342D75079CA0CA06845F1360E4B169D
A93627B7C042CCC9CC6B085F23312C6D95E4C0C857CCF47F94EC543F43BBA04F
0F7F00F2F9D4AD0E3F3F3A4408EED34039982ED5E5664949215B7B7C699903F9
3ABB681EA8787E7960CFCAF502B7A3066310BE7A115CD32D3002B9BA6ACF58E8
A207CB55368FB37E1281E0C898AB1EBCE160ACB6D82AB81483F5A1915A280688
23210451A217BD7ACDCA5E956C06ED7E161A3F03F68E7FAD150709D57E2C98E9
51AAA9B8EEB3F9B7A4187CC29D240F66E4441C9B12242F465EA0DDF91FB928C8
0444AC33182DB4BA1824982D97D74DCDF38C6802A7E8AF3D6BA10D84DCFD9911
E57DDA05695527F3DD0D5AB028F2EAA1AF0AA33A866214210BFC1A241D735F7B
8EA495474EB13B7E92DDE4CA70E9A40924E05A8081B7286A4B72AFDB767192FB
6BFFCA7053E529047DCF50DB179226D7709F7523E4941D09C0B7C2B92A115403
A1AEE8583D64C240F8132E11CC44EA58C1338220B02420D727BE5CA54B9CCF4F
887819BE254E5379BB0B142C9F5FF1F7900E3558E543BCC1639BDA1B958211E6
7189A63DFEBB88CF045C6698DF545E3582797792702E6D6C2C03D7741041EB1F
C42F97F603F3442EE12E1998A0C61554ED8E5B44A2A28992F47C6D9F7AB8F15F
A5C026E63AA09DB99B72224350C95D75C7CACE8EBD27F7D35DB5648DA2CC3ECA
2B491BD18A9889DC7C4433A1C1D0DF8B24B99326958AFD2A3A35416BA3846ABF
A5AB465B897DD644D4F1E1FD5F023E2D5644C22A30435544899E9BC0E70CB56A
01C6C70ACB4BBB484E004AF9EB6558AA5B967B5DD7AFFE4BC7057ADAF76355B3
2C48661C5C193488B2085054662EE3584798CE9E628E0743A26BFA4C2334C2D0
E64590A2482DB65A8C17EE6E58AA79F49495D5555958504B483A40D81E544D20
0A0A4826747B928AD55D445223640E4EC4471C93430A8AB7A43BFFD49C7FCD52
FCAFA6E87C8E5477DCBCAF0C4A2F3B2915D6038CF6B704EA3D7C51048B29A29E
717CFEFBBFEF27C9AF347CC9361A8898697BF00608989EA882F70B836D18B0EB
9BE938F2C0297F0CCDAE33CD388430CB8CAAC0014AD4AEB7FAEAE29F27AE24FC
6393FE9323257F0881FEFF677F98573A8E3A4947086C83F739937FA170572CCD
12D748557400E5ACE2A72BE2DFC31D11F8FF73C0647E0A697E507FF94136AFF7
1BE58D4D389FFAD90C32A638F0CC7BEBC72C40BAD7EECD7A748500162BA580EE
42B3D32487A78B6BF210134EA0B5CE29B16DEB7A94D11E2DB04F04E9DDCD8CD6
1B6DD1FC4A28F46A30BAD1FDA5CA1EF5642C36C38B3A5FB874507DFC0588FA97
438463AB4148B68E937A4E97F86D4D0A4FB8A040C40FE658D4430175BDEAC0EA
DDC683B3ECE8EF5F7D85A4ADD07E1252A944B4B8765CE41C4EA31BDF2AE7071F
5CFE99B5990FCFA706896DA8C7C3AE5275EC82AAF2D91F47E87ABD51BB97835F
44DFEBE58EC63F81E8F800B35D46E878F7150D2C27063BC6F0872C45FB4C2DC6
C03FFEF8D0CD5D907AD6C1DFF6E444A3ECB4181D527912EA9439AC11F6EEA334
BA0C2FC37241B9D27FA7DE86D089DA879668E3BAF3E38456A04D5B862DE77F81
95E570FAB4DC3A045AF44583E6109CDE1441F0F734C7D542171B0A28EF1D176E
F55966366271B11A33A7456486180F114D90FAF5A696A4E0FA77881A0A06F877
80BEA35A00DC891E81421126656AFA4216CF235CA04EB2C875C236774DF18DC5
09EA6EF20201AB4A52A6865899AEFBA4CF704088D25F3DFA938FBDE87E8A04F3
F008269EBFE66EC7E603112DF34A2F8C1C3D042DF631A079307156AC9E8A2C8D
37E6DF10677FA0FC9195540EBAE64D126347E25DFFC5E41952C6F9E04316B7EE
11071EC0E2C23C72BFAEE536A8A02BC8C3A4F6DA197A3A101238442D182EEB6A
3F81B579640AAF5FF5CEDFFB1C66D01267873D77D9BDC32296BDFF174FC49B51
00CF01B0CDB0F1CEB095178CDD62C6CBCA47A508A5057D1CAC1BBFA21F4E47D7
D19FE73F04B9825B0FBFC73A69C594C50081282C04554C79D1A389ED9B4099DF
68B509096340C9A51036E2DB228EA1E3141745190D36B964E3764A8D4D9104D8
964F08F3D4297A4DE7C061C4DA35768692F080A383F919DE52B33814CB7865A1
F53C17FCFA753B741480131BAC230B0A5B926E87F7DF6C3F4C447DE0BD4D3EC5
92EB4B7A0D36104E69D441E40706168C07D07EB4C0FAB268F73F5B3C87AF34E6
948A43CCCE673640429185CB8014090F967437171E461AD22466D0E0600D6C0C
BB0A55562321245F9C7B0A18CAEB55F3A52B8B81902B0BFAD2CB968593197DAB
3FEEF774CD2B2BA0B09D4C7997EF41144446B646ED3CA0007BCAD8F44E5E90D5
2D796578587277BCDA5A12A02C82B5F18CF720477A99E679D1F7F2BDB03CF1FD
2180C951659AD3C7347C4805DCE3EEBF3390181075704FDF72A06EB589A75B7E
139381C9CD55A9B46EEF5E1D8FA5BC72AE4EBA27CC86B10A77359660D9BB5685
B43CDA8A5610B466150E29127199B33B621D51540CA078442819F33510493063
D304ECF7C77A04B69926951583F14D10194618DF15CCE05425C194D303BF2BF2
6AD707EDBBB2042CE8B6B467ABFDBBA81E838A81EC9F2D734D33C0A27B29994F
3DF7EE96A93C19B43A4FF90A0EB4EE9705888B4DC019E74098CFF434B5D34755
B04901BA2B9F90F18199F7B68221B6AF659BD7D0858B76C70EFAC4758B7A1DB5
8C7EA475C17D18256AB463527B2FC86633587D72A76276C723033D9CBC84ACDF
C1410B8FAE2DB4DB3FD9F2A90998DC119873DAE77B0AD6CAF8758DB69CBB45B9
34D2BECC86E009C0F9C404EC71A5CD0A8C554E8479B3392B766C51F0FEC71B4B
619FC070649A4B17FE7E28EE5C2A939092C6C9C5A81EF9C091168B0E69A748CA
8DCECA167D1654FDCF8CC67EB7A0067961F00BA39D10277BB6E53FAA3A59902D
C8C898AF85DB1436459E887217EA582A782808E292800292A8B9230EF35E680C
1C10E01E77F7235C565D973839DC0CC9FA867E95747C15FF63874A8DE1DDAA2D
33BF25407766ED70280631098CD1C3600CF9FBE027C76A36DB2761E3BC4BEF1C
A97ED9EBE836DAA9CD304365CDCE8C505FFFDB921D87246646D0CEB18EF93A8D
D49D7BBF8C12088770CECCDD77F4D179FA2A0F10BD4DA6B382531D3B9B7FAAFE
CC93921ACF158BF42F6E1DBF762E3179E1D9AC6F873FF7817EC7EAF8F3C225B1
46C5FA90014B31EF87D183FAA81BF0E10A6C4E4896BFAA2C0155058907829844
79A7A92692A1B907B53FD930ABB4CB36E8DB8660A66D8843CE429E3E965E0A94
07A0F2200B8E5D14B014E95C833357396C69462E2CBEFDBCE0A7488B27531B6A
506A37B580011C81B14685952C74219AECAC1D6D1B6B81423420786E2419D5F1
D7BD96B446D418E4EF835FBF2A7F7C8383E04AFBF069628898FA2A813C9902A3
0CF13DEF37993E542523956062236DFAC2836CD988696B5CFAC4C5B58910E1E0
3A18F16B89B729687C1F2E1B340D7666C30E29DBFF17D3A501906B6EAE03392A
FD442BFB412CD96B10EFA153D958BAC8413709ADA2180D5F24965D1CB80064A9
16F6D66F17192623ED1DADFA324C8E2A635398DF233DDE5E0367513D7282A859
C9DD30907CC3B64FE440174F86A6AD1C86A18D79100DC15C395806CA74C4CD06
598BE3244158DBF1F6F46A2A348B1FD2149B11B406B1D558D7BCEE8EAD929F50
00F78500BAE8EC315B88AC13DED473BA045C537052D2FE2B607B4CFC93038376
3FBB876A3A888C02ABFF58FDC2B234426228BBFF88CD2A22B70B7180B770A46E
93814A8DBA3B91554A2653DA246BF0A7BCA698907057A989F540B66108F588AB
D4DE2F289CC559BFE2E8AFEA715B67B6C9271BA596FDC0F3836F3A8E20782662
9EE8311F393C3124853C26484C9FCAED0BD1C3400D35C23DC12AB0FE3929E990
B5E510350A8434BD11C1AAD763A23B871D66D42204A67ADF3DBFA60AA20A7293
FA2B782CA6F3EDF551521EF2FC8C6CCF35895BDCC0001CF9B8AF48E7B5E3DE43
D67C5553255B56D582F9B55BA331A94ED8F5E6F925B08163BDB05AA0C37AE41C
2B4AAC54783D7CA1F2F6C38DD96BEF70D82127F62ADED4FDDD76AFDCE6382268
1B85CD17253521C66137CC71531211CCE2EC2F19B9822AF50BBEE430BFECDB84
31A842AA6D10997A7E8AF9CE2002A1817B1C121A2B27FD373F799471043A27A0
DC95E5470E5BB9778324ED8C6A26FA517FD9FD8A2F99C16F088110B92BBC9487
0C796B9A50F7C6E62197BC95A451EA7B7F09B48FED2A7A5CA5CB4FC63B6F5ED5
6BADE0A0FBFAC9C3F269BC1FE53213DD408BB54654E0941D932D507A9CCD427E
E7A2B5DF7FDBF8EB8833AC395CA029525EDF53076A2087464AB795CB1314503C
BE27DD71CE5D6A072EB103662C5DEBC2DB09A1096168F04F7391FCB87EE28998
0BC71BD34A2698922C91BA2D7553C573EBC2784D12BB5F05E717079152F9F70B
CAE1B1BBE39D9C030BE326C1EB237CD7605A1B19EDB22A33E9D4DBE61AC4E2E9
7D03FC5674DBF62648A44F104287D6AD61702F21303B259C5131AD26B971C0F5
381C0F6CFA46EF68BC0CD98D92A06040859DA22CFB4C8179BED9D5B14348670B
B6140E3503F4EAEC2652BA4B0151A08433FD57FA2FAEACBA45A56223C2EFC938
91471A6AA8CC20AA2E8FA2A96377901CEA38A9136709EE73B0C48475F60A2B70
6A5CFAC8DA326EC56BB2C75CFEE0499784AD4FB184E8ECE540550D99C0BDEA00
9E8DE5CF260B762596166CD2A4BA629C9DEC6AE7AFEA43FED30DC0C52411EF6A
367E7A9F7B931AFFECCAAF95CA7808438D994DAFED69816FB035B50030D676D5
CC5761B157BD49CC4EC06D0E53F9791E09F4421F063C7C1E3EB437BDB0124960
E7DA3EC3DA2DF9B9BCFDD10848D4FF8617463095F1E6D65CBE8F008564C32544
82EEF68CFFCA07DEA949463F88EA1AD0E0AE74F3740D269B88C7CC0B9D921B5B
A832CC465DB6918491D80F7429C579CF87EF0DEEE65D824FBD0D6792AB1C73DA
18AEA139147BBB2642379B677E4ADEFB00D1D4F6CCC1ED1BF9FBBB666FEDCB5A
9F3CAC79789CDB1EF5DA466642A14F2169BD01DACFB3FF6BEDBAB8317ABFC5F6
6AE5771E82C8552D2186783CAA982FF914DBE333F1E321624FEFD9B5C624B0BE
EE3294D652B44BA6EF20B5C0EB8904DCE40F398A5198CF66FD1628EB5662E109
19ED63F5FFCD21F710E464159214706FB3F489C36A8C77621FAA3B5DFEF7EFE6
0389F644AAD0647AA725BCFEDCEA382D7B6F39C64A9623BCC65D1FAD0DFA5F55
3FC1030A05AF74B308364AF63EEF3C3612F92CDFD1A914DB4C73404598828C3E
F2757941DA655660C34B2A439E2ED071C0B6F8DF7F754714DFF6F27F4ACCEEEB
E981C562636586E1C3217CC719A1FBFBD758406F810359676E3BC21041A8CFD1
15A76C89FB79DA0106F3DD30A93B47683B5B751EEC3426DFDA124622DB68DC47
F9B1FA25773C549A392282664907827E12493089CC10563A5BFEBA090F8C34CF
664A562EEBB639C28B210FFFDFEE9A836F331C8FAD1BB964E824E2DAF6314945
B7ABC507448B149470E7C3BF34966C726D4D2C5DE26E59A5A4B09D0260ED0B6B
84A62C361D58CA61853AF89D81785A61BA4F772B3F59FBE3DC0E8FA48B87CDC3
ECFDDB4DDB6CE2BD693820F66E174CDE989AE6648A5B6B463589896544DC1735
497EC4ED14E0BC89C9C251F8946C17F1E5F00D8953B89D97CCC154A42A98C670
8A80FF1CB196CE9A7621B2DFFE83DDD03782231C94CC6CF346ECE1F919A70F42
C3C8C0D1910AC865BD2578EB47490F2E17BCD30718BB110AE8BD72CE3DFEB1DC
EBF377FD472F18A4884C455873B387A377DB2D87D47685401D552D27C4BAFDA2
2B8C539635109C5A0800C41EA7ABBC14484F2CCE50D3D9865C04C394C1564EA0
DD638BFAC28FAED1C4D286C4BBFEDDB3177E0315270D9ACE7CF1AB691DF2CEE9
C1D64CEBFA0F2A975070E31A0FA3F1F33BB521FCD968FE4E5ABC06526C2F1DDE
0B8B6C5C01FC20CAC9033B69DAF947CBF7A55712DAA3185DE26886C5EC5ABBD8
46FFE07EC5170A56A79C695113FB0BB919E9BE17E410ECC5353FED2796078EF5
EE88BD77D2BE3E443D9A2D05E2D4F4C535A005819EDD1FAB13EEBA2ECB2B11C8
D70B9907EF30020D9B0F275039EAD3B784F328204E996D072E27E6CB9204FB36
764EB2770408CCB5E1AA4BE31EA04363E261510D197BA549FD8672A234C6B2E0
48250001B8897DE4F4149DAF5076B8C9A2BA21644507E9001A7FF04E38EABB19
BB1BDDBCBB63E4ED13416237B00DD7249445E9F15DB088108F18DB93CACA3372
53C869B5B41578ABF49CC6B1A959B890C64A03749E1F66C296C803C6A5895DE2
F55F18CFDECAB8B1C37F44CD4BC58C57B4112504DEAB1B8F733B27B7A017B8AA
227FCFF12FC549537A21766A72F9ADA662A7C9086906FF5D36E957660FF8B1FE
3B8945204EB322D296F8AC33DEC1123C62ED7AD6417580009BDEB65D82E9FE90
DFD68A9F2144CF0DAA1724A119C75F15CEFA1F22A01FB23E4789A6AEAC760704
08B372209C851879B0759856DFFC00584EFD246EEC2C13FB7F2E5E5600F44660
4EC439BE1890391B2680CD2B50673A175958D6A4990D0E25AA94D0BD63BE035E
CAB6FC4B3DD25E69B4C64FEF93B1E5022599A295AD39629770FB858C9D9374A8
578A62CD859397D22DF38E34942299D520CD894D52C790599D3CB623059F88FB
E72F0ABAD19B231CA866AD8A592D107750D0A7278B9AFBAD36259231E7C4D6F2
F09FD7D0A588470F9041B00F1496357D8CB14CE217388D263245AE011DDCF668
01E08E363CCD03273283923CB38D178FCE83D7F4ADFBBFB80ED5E6556E684794
35FD4C7AECE8283109CA956FC9E1B63CCD2592923B6D9346B2050BA117EB7D8F
9579F41DF456AABC3C969F72CCF5E705C75345706BCD38BF15ABC1FA5582C541
0D58D259CB42F348190D76AB275CEF9E37951E6080816434D75221634990E5D6
13A45A10A11EB170AEBBAC8CD3A1A3A5E980C2984D010F178DA14F85C6840AE7
A64567F55D384C7FA5A745D0E33C72588654EAD1B0A686939371387DCDCD2E6B
0A415F3D804BAFBC1F80203E24AC9526C1A47E19AE0FDD4139229E8D7A6CAF5E
A92C8F0C1C1C8B86F50EC3573793644301B3A0EC290531C8E4D95B44F50361F2
AB33C79AEA0EC07369B81E61984BF729E35E216D8F40FB2524D8D2E5FE53E626
8F953AFC6A1FDC3B855114EDA24AF9C1CF848715FA7ECE34E14D336EFA1C875B
8098107C843663BB45C50F2323821631F374DD7CECF6B2D3389B0BE233BD8242
F59568FAE6E459D291944512F1D75F22779983CEC22B1FBFCFF7C758B43838FD
2E8CCB093FA851BFB607D0C37174EF91A513A537C277D3215694DA54D90F5FEE
4023F297B995FB0CAB054BA3299B498E2A50
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600
(midterm-progress-report.dvi)
@start /Fa 137[44 48 26 44 31 1[48 48 48 70 22 2[22 48
48 1[44 48 1[48 44 13[53 2[53 12[57 9[44 44 44 44 44
44 44 44 44 44 1[22 46[{ TeXBase1Encoding ReEncodeFont }31
79.1666 /NimbusSanL-Bold rf /Fb 133[40 44 1[66 44 48
26 35 31 1[48 44 48 70 26 48 1[26 48 44 31 40 48 35 48
40 6[53 3[62 62 1[48 57 1[48 1[66 79 1[62 1[31 66 66
44 1[66 57 1[62 7[40 40 40 40 40 40 40 40 40 40 2[26
3[26 26 37[48 2[{ TeXBase1Encoding ReEncodeFont }53 79.1666
/URWPalladioL-Bold rf /Fc 133[40 44 41 66 45 48 26 34
31 44 48 43 46 70 23 44 19 23 46 44 26 38 48 35 44 40
8[53 79 57 62 49 42 53 62 48 62 66 75 48 57 26 27 66
60 44 48 61 56 48 62 1[35 5[40 40 40 40 40 40 40 40 40
40 48 20 26 20 1[31 26 26 22 35[48 48 2[{
 TeXBase1Encoding ReEncodeFont }71 79.1666 /URWPalladioL-Roma
rf /Fd 165[56 3[61 66 1[61 66 1[61 1[66 76 1[66 1[25
66 71 56 1[66 66 1[66 7[51 51 51 51 51 51 51 51 51 51
2[31 3[31 31 40[{ TeXBase1Encoding ReEncodeFont }29 91.6666
/NimbusSanL-Bold rf /Fe 165[45 49 1[69 49 53 45 49 53
1[49 57 53 61 45 53 1[20 53 57 45 49 53 53 53 53 65[{
 TeXBase1Encoding ReEncodeFont }23 73.3333 /NimbusSanL-Bold
rf /Ff 185[72 70[{}1 91.3242 /Dingbats rf /Fg 134[46
1[66 46 51 25 46 31 1[51 51 51 1[20 46 2[51 51 1[51 51
1[51 51 6[56 6[61 4[66 76 1[61 2[66 6[61 20[25 44[{
 TeXBase1Encoding ReEncodeFont }26 91.6666 /NimbusSanL-Regu
rf /Fh 147[17 10[42 13[50 12[46 2[54 11[42 42 1[42 1[42
42 42 6[25 25 40[{ TeXBase1Encoding ReEncodeFont }13
74.9999 /NimbusSanL-Regu rf /Fi 137[100 1[56 100 67 1[111
111 111 167 3[44 1[111 1[111 111 1[111 111 12[122 133
144 1[133 1[144 167 111 8[144 67[{ TeXBase1Encoding ReEncodeFont }22
200 /NimbusSanL-Regu rf /Fj 199[32 32 32 32 32 32 32
32 49[{ TeXBase1Encoding ReEncodeFont }8 58.3333 /NimbusSanL-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142 -164
a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -164
a 0 TeXcolorgray 3718 -56 a Fj(1)p Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Purpose Goals) /OUT
pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.2) cvn/Title (Intel NUC \(Nathan Healea\))
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (Current Status)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.2.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.3) cvn/Title (User Interface \(Nathan Healea\))
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -0/Dest (subsection.3.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.3.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.3.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.4) cvn/Title (Data Sanitization and Processing \(Nathan Healea\))
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.4.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.4.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.4.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -3/Dest (section.5) cvn/Title (User Authentication and Sessions \(Nathan Healea\))
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.5.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.5.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.5.3) cvn/Title (Solutions)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -3/Dest (section.6) cvn/Title (Navigation \(Stephen Krueger\))
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.6.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.6.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -0/Dest (subsection.6.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.7) cvn/Title (Path-finding \(Stephen Krueger\))
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.7.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.7.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.7.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.8) cvn/Title (Database \(Stephen Krueger\))
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.8.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -0/Dest (subsection.8.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.8.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.9) cvn/Title (Framework \(Matthew Zakrevsky\))
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.9.1) cvn/Title (Current Status)
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.9.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.9.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.10) cvn/Title (SVG Rendering and Map Drawing \(Matthew Zakrevsky\))
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/Count -0/Dest (subsection.10.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.10.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.10.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -3/Dest (section.11) cvn/Title (Search Functionality \(Matthew Zakrevsky\))
/OUT pdfmark end
 150
0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.11.1) cvn/Title (Current Status)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.11.2) cvn/Title (Problems that have impeded progress)
/OUT pdfmark end
 150 0 a 150 0 a
SDict begin [/Count -0/Dest (subsection.11.3) cvn/Title (Solutions)
/OUT pdfmark end
 150 0 a 150
0 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 11.58327 H.A end
 150
0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 1369 144 a Fi(T)-24 b(eam)56 b(LibNa)l(v)828
378 y(Midter)5 b(m)54 b(Prog)n(ress)i(Repor)8 b(t)1039
611 y(CS)56 b(Senior)g(Capstone)1648 755 y Fh(CS462)20
b(\(F)l(all)g(2017\))1705 995 y Fg(A)m(uthored)26 b(b)n(y)856
1108 y(Nathan)g(Healea,)g(Stephen)g(Kr)q(ueger)-5 b(,)26
b(Matthe)n(w)h(Zakre)m(vsky)p 907 1470 945 5 v 1914 1499
a Ff(F)p 2048 1470 V 150 1871 a
SDict begin H.S end
 150 1871 a 150 1871 a
SDict begin 13.55061 H.A end

150 1871 a 150 1871 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 150 1871 a 2 w Fe(A)t(B)t(S)t(T)t(R)t(A)q(C)t(T)
150 1993 y Fc(This)20 b(Pr)o(ogr)o(ess)g(Report)g(contain)h
(information)g(r)o(egar)o(ding)g(the)f(pr)o(ogr)o(ess)g(made)g(in)h
(the)g(CS)f(Senior)h(Capstone)f(class)150 2089 y(by)i(T)-7
b(eam)21 b(LibNav)-9 b(.)22 b(This)g(document)g(will)h(cover)g(A)f(r)o
(ecap)f(of)i(the)f(pr)o(oject)g(purposes)f(and)h(goals,)g(a)g
(description)g(of)150 2186 y(wer)o(e)j(the)h(LibNav)f(team)f(is)i(curr)
o(ently)f(at,)g(a)g(description)h(of)g(pr)o(oblems)e(that)h(have)g
(impeded)h(our)g(pr)o(ogr)o(ess)e(and)150 2282 y(the)19
b(solution)g(to)g(those)g(pr)o(oblems,)f(a)h(r)o(etr)o(ospective)f(the)
h(of)h(fall)f(term)g(2016)f(and)h(the)g(past)f(6)h(weeks)g(of)g(winter)
h(2017.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(2)p 0 TeXcolorgray
150 96 a
SDict begin H.S end
 150 96 a 150 96 a
SDict begin 13.55061 H.A end
 150 96 a 150 96 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 150 96 a
2 w Fd(C)t Fe(O)t(N)t(T)t(E)t(N)t(T)t(S)150 271 y
SDict begin H.S end
 150
271 a Fb(1)178 b(Purpose)25 b(Goals)898 271 y
SDict begin 11.58327 H.L end
 898 271
a 898 271 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 898 271 a 2812 w Fc(3)150 447 y
SDict begin H.S end
 150 447 a
Fb(2)178 b(Intel)24 b(NUC)g(\(Nathan)h(Healea\))1369
447 y
SDict begin 11.58327 H.L end
 1369 447 a 1369 447 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1369 447 a 2341 w Fc(3)368
543 y
SDict begin H.S end
 368 543 a Fc(2.1)197 b(Curr)o(ent)22 b(Status)1178
543 y
SDict begin 11.58327 H.L end
 1178 543 a 1178 543 a
SDict begin [/Subtype /Link/Dest (subsection.2.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 543 a 35 w Fc(.)41 b(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(3)p 0 TeXcolorgray 368 639 a
SDict begin H.S end
 368
639 a Fc(2.2)197 b(Pr)o(oblems)21 b(that)g(have)h(impeded)g(pr)o(ogr)o
(ess)2002 639 y
SDict begin 11.58327 H.L end
 2002 639 a 2002 639 a
SDict begin [/Subtype /Link/Dest (subsection.2.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 639 a 69 w
Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray 148
w(3)p 0 TeXcolorgray 368 735 a
SDict begin H.S end
 368 735 a Fc(2.3)197 b(Solutions)993
735 y
SDict begin 11.58327 H.L end
 993 735 a 993 735 a
SDict begin [/Subtype /Link/Dest (subsection.2.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 735 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)p 0 TeXcolorgray 148 w(3)p 0 TeXcolorgray 150 911
a
SDict begin H.S end
 150 911 a Fb(3)178 b(User)23 b(Interface)g(\(Nathan)i(Healea\))1501
911 y
SDict begin 11.58327 H.L end
 1501 911 a 1501 911 a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1501 911 a 2209 w Fc(3)368
1007 y
SDict begin H.S end
 368 1007 a Fc(3.1)197 b(Curr)o(ent)22 b(Status)1178
1007 y
SDict begin 11.58327 H.L end
 1178 1007 a 1178 1007 a
SDict begin [/Subtype /Link/Dest (subsection.3.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 1007 a 35 w Fc(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)p 0 TeXcolorgray 148 w(3)p 0 TeXcolorgray
368 1103 a
SDict begin H.S end
 368 1103 a Fc(3.2)197 b(Pr)o(oblems)21 b(that)g(have)h
(impeded)g(pr)o(ogr)o(ess)2002 1103 y
SDict begin 11.58327 H.L end
 2002 1103 a 2002
1103 a
SDict begin [/Subtype /Link/Dest (subsection.3.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 1103 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(4)p 0 TeXcolorgray 368 1199 a
SDict begin H.S end
 368
1199 a Fc(3.3)197 b(Solutions)993 1199 y
SDict begin 11.58327 H.L end
 993 1199 a 993
1199 a
SDict begin [/Subtype /Link/Dest (subsection.3.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 1199 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(4)p 0 TeXcolorgray 150 1374 a
SDict begin H.S end
 150
1374 a Fb(4)178 b(Data)23 b(Sanitization)j(and)f(Processing)g(\(Nathan)
f(Healea\))2195 1374 y
SDict begin 11.58327 H.L end
 2195 1374 a 2195 1374 a
SDict begin [/Subtype /Link/Dest (section.4) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 2195 1374
a 1515 w Fc(4)368 1471 y
SDict begin H.S end
 368 1471 a Fc(4.1)197 b(Curr)o(ent)22
b(Status)1178 1471 y
SDict begin 11.58327 H.L end
 1178 1471 a 1178 1471 a
SDict begin [/Subtype /Link/Dest (subsection.4.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 1471
a 35 w Fc(.)41 b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray 148 w(4)p
0 TeXcolorgray 368 1567 a
SDict begin H.S end
 368 1567 a Fc(4.2)197 b(Pr)o(oblems)21
b(that)g(have)h(impeded)g(pr)o(ogr)o(ess)2002 1567 y
SDict begin 11.58327 H.L end

2002 1567 a 2002 1567 a
SDict begin [/Subtype /Link/Dest (subsection.4.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 1567 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)p 0 TeXcolorgray 148 w(4)p 0 TeXcolorgray 368 1663
a
SDict begin H.S end
 368 1663 a Fc(4.3)197 b(Solutions)993 1663 y
SDict begin 11.58327 H.L end
 993 1663
a 993 1663 a
SDict begin [/Subtype /Link/Dest (subsection.4.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 1663 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(4)p 0 TeXcolorgray 150 1838 a
SDict begin H.S end
 150
1838 a Fb(5)178 b(User)23 b(Authentication)j(and)f(Sessions)g(\(Nathan)
g(Healea\))2222 1838 y
SDict begin 11.58327 H.L end
 2222 1838 a 2222 1838 a
SDict begin [/Subtype /Link/Dest (section.5) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 2222 1838
a 1488 w Fc(5)368 1934 y
SDict begin H.S end
 368 1934 a Fc(5.1)197 b(Curr)o(ent)22
b(Status)1178 1934 y
SDict begin 11.58327 H.L end
 1178 1934 a 1178 1934 a
SDict begin [/Subtype /Link/Dest (subsection.5.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 1934
a 35 w Fc(.)41 b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray 148 w(5)p
0 TeXcolorgray 368 2031 a
SDict begin H.S end
 368 2031 a Fc(5.2)197 b(Pr)o(oblems)21
b(that)g(have)h(impeded)g(pr)o(ogr)o(ess)2002 2031 y
SDict begin 11.58327 H.L end

2002 2031 a 2002 2031 a
SDict begin [/Subtype /Link/Dest (subsection.5.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 2031 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)
g(.)p 0 TeXcolorgray 148 w(5)p 0 TeXcolorgray 368 2127
a
SDict begin H.S end
 368 2127 a Fc(5.3)197 b(Solutions)993 2127 y
SDict begin 11.58327 H.L end
 993 2127
a 993 2127 a
SDict begin [/Subtype /Link/Dest (subsection.5.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 2127 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(5)p 0 TeXcolorgray 150 2302 a
SDict begin H.S end
 150
2302 a Fb(6)178 b(Navigation)24 b(\(Stephen)i(Krueger\))1468
2302 y
SDict begin 11.58327 H.L end
 1468 2302 a 1468 2302 a
SDict begin [/Subtype /Link/Dest (section.6) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1468 2302 a 2242 w Fc(5)368
2398 y
SDict begin H.S end
 368 2398 a Fc(6.1)197 b(Curr)o(ent)22 b(Status)1178
2398 y
SDict begin 11.58327 H.L end
 1178 2398 a 1178 2398 a
SDict begin [/Subtype /Link/Dest (subsection.6.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 2398 a 35 w Fc(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)p 0 TeXcolorgray 148 w(5)p 0 TeXcolorgray
368 2494 a
SDict begin H.S end
 368 2494 a Fc(6.2)197 b(Pr)o(oblems)21 b(that)g(have)h
(impeded)g(pr)o(ogr)o(ess)2002 2494 y
SDict begin 11.58327 H.L end
 2002 2494 a 2002
2494 a
SDict begin [/Subtype /Link/Dest (subsection.6.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 2494 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(5)p 0 TeXcolorgray 368 2591 a
SDict begin H.S end
 368
2591 a Fc(6.3)197 b(Solutions)993 2591 y
SDict begin 11.58327 H.L end
 993 2591 a 993
2591 a
SDict begin [/Subtype /Link/Dest (subsection.6.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 2591 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(6)p 0 TeXcolorgray 150 2766 a
SDict begin H.S end
 150
2766 a Fb(7)178 b(Path-\002nding)27 b(\(Stephen)e(Krueger\))1516
2766 y
SDict begin 11.58327 H.L end
 1516 2766 a 1516 2766 a
SDict begin [/Subtype /Link/Dest (section.7) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1516 2766 a 2194 w Fc(6)368
2862 y
SDict begin H.S end
 368 2862 a Fc(7.1)197 b(Curr)o(ent)22 b(Status)1178
2862 y
SDict begin 11.58327 H.L end
 1178 2862 a 1178 2862 a
SDict begin [/Subtype /Link/Dest (subsection.7.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 2862 a 35 w Fc(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)p 0 TeXcolorgray 148 w(6)p 0 TeXcolorgray
368 2958 a
SDict begin H.S end
 368 2958 a Fc(7.2)197 b(Pr)o(oblems)21 b(that)g(have)h
(impeded)g(pr)o(ogr)o(ess)2002 2958 y
SDict begin 11.58327 H.L end
 2002 2958 a 2002
2958 a
SDict begin [/Subtype /Link/Dest (subsection.7.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 2958 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(6)p 0 TeXcolorgray 368 3054 a
SDict begin H.S end
 368
3054 a Fc(7.3)197 b(Solutions)993 3054 y
SDict begin 11.58327 H.L end
 993 3054 a 993
3054 a
SDict begin [/Subtype /Link/Dest (subsection.7.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 3054 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(6)p 0 TeXcolorgray 150 3230 a
SDict begin H.S end
 150
3230 a Fb(8)178 b(Database)23 b(\(Stephen)j(Krueger\))1398
3230 y
SDict begin 11.58327 H.L end
 1398 3230 a 1398 3230 a
SDict begin [/Subtype /Link/Dest (section.8) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1398 3230 a 2312 w Fc(6)368
3326 y
SDict begin H.S end
 368 3326 a Fc(8.1)197 b(Curr)o(ent)22 b(Status)1178
3326 y
SDict begin 11.58327 H.L end
 1178 3326 a 1178 3326 a
SDict begin [/Subtype /Link/Dest (subsection.8.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 3326 a 35 w Fc(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)p 0 TeXcolorgray 148 w(6)p 0 TeXcolorgray
368 3422 a
SDict begin H.S end
 368 3422 a Fc(8.2)197 b(Pr)o(oblems)21 b(that)g(have)h
(impeded)g(pr)o(ogr)o(ess)2002 3422 y
SDict begin 11.58327 H.L end
 2002 3422 a 2002
3422 a
SDict begin [/Subtype /Link/Dest (subsection.8.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 3422 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(6)p 0 TeXcolorgray 368 3518 a
SDict begin H.S end
 368
3518 a Fc(8.3)197 b(Solutions)993 3518 y
SDict begin 11.58327 H.L end
 993 3518 a 993
3518 a
SDict begin [/Subtype /Link/Dest (subsection.8.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 3518 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(7)p 0 TeXcolorgray 150 3694 a
SDict begin H.S end
 150
3694 a Fb(9)178 b(Framework)23 b(\(Matthew)i(Zakrevsky\))1590
3694 y
SDict begin 11.58327 H.L end
 1590 3694 a 1590 3694 a
SDict begin [/Subtype /Link/Dest (section.9) cvn/H /I/Border [0 0 1]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 1590 3694 a 2120 w Fc(7)368
3790 y
SDict begin H.S end
 368 3790 a Fc(9.1)197 b(Curr)o(ent)22 b(Status)1178
3790 y
SDict begin 11.58327 H.L end
 1178 3790 a 1178 3790 a
SDict begin [/Subtype /Link/Dest (subsection.9.1) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 3790 a 35 w Fc(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)p 0 TeXcolorgray 148 w(7)p 0 TeXcolorgray
368 3886 a
SDict begin H.S end
 368 3886 a Fc(9.2)197 b(Pr)o(oblems)21 b(that)g(have)h
(impeded)g(pr)o(ogr)o(ess)2002 3886 y
SDict begin 11.58327 H.L end
 2002 3886 a 2002
3886 a
SDict begin [/Subtype /Link/Dest (subsection.9.2) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 3886 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(7)p 0 TeXcolorgray 368 3982 a
SDict begin H.S end
 368
3982 a Fc(9.3)197 b(Solutions)993 3982 y
SDict begin 11.58327 H.L end
 993 3982 a 993
3982 a
SDict begin [/Subtype /Link/Dest (subsection.9.3) cvn/H /I/Border [0
0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 3982 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(7)p 0 TeXcolorgray 150 4157 a
SDict begin H.S end
 150
4157 a Fb(10)138 b(SVG)24 b(Rendering)h(and)f(Map)g(Drawing)g
(\(Matthew)h(Zakrevsky\))2456 4157 y
SDict begin 11.58327 H.L end
 2456 4157 a 2456
4157 a
SDict begin [/Subtype /Link/Dest (section.10) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2456 4157 a 1254 w Fc(7)368 4254 y
SDict begin H.S end
 368 4254 a
Fc(10.1)157 b(Curr)o(ent)22 b(Status)1178 4254 y
SDict begin 11.58327 H.L end
 1178
4254 a 1178 4254 a
SDict begin [/Subtype /Link/Dest (subsection.10.1) cvn/H /I/Border
[0 0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 4254 a 35 w Fc(.)41 b(.)g(.)h(.)f(.)g(.)h(.)f
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(7)p 0 TeXcolorgray 368 4350 a
SDict begin H.S end
 368
4350 a Fc(10.2)157 b(Pr)o(oblems)21 b(that)g(have)h(impeded)g(pr)o(ogr)
o(ess)2002 4350 y
SDict begin 11.58327 H.L end
 2002 4350 a 2002 4350 a
SDict begin [/Subtype /Link/Dest (subsection.10.2) cvn/H /I/Border
[0 0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 4350 a
69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray
148 w(8)p 0 TeXcolorgray 368 4446 a
SDict begin H.S end
 368 4446 a Fc(10.3)157
b(Solutions)993 4446 y
SDict begin 11.58327 H.L end
 993 4446 a 993 4446 a
SDict begin [/Subtype /Link/Dest (subsection.10.3) cvn/H /I/Border
[0 0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 4446
a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h
(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p 0 TeXcolorgray
148 w(8)p 0 TeXcolorgray 150 4621 a
SDict begin H.S end
 150 4621 a Fb(11)138
b(Search)24 b(Functionality)j(\(Matthew)d(Zakrevsky\))1926
4621 y
SDict begin 11.58327 H.L end
 1926 4621 a 1926 4621 a
SDict begin [/Subtype /Link/Dest (section.11) cvn/H /I/Border [0 0
1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1926 4621 a 1784 w Fc(8)368
4717 y
SDict begin H.S end
 368 4717 a Fc(11.1)157 b(Curr)o(ent)22 b(Status)1178
4717 y
SDict begin 11.58327 H.L end
 1178 4717 a 1178 4717 a
SDict begin [/Subtype /Link/Dest (subsection.11.1) cvn/H /I/Border
[0 0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1178 4717 a 35 w Fc(.)41
b(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g
(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)
h(.)f(.)g(.)p 0 TeXcolorgray 148 w(8)p 0 TeXcolorgray
368 4814 a
SDict begin H.S end
 368 4814 a Fc(11.2)157 b(Pr)o(oblems)21 b(that)g(have)h
(impeded)g(pr)o(ogr)o(ess)2002 4814 y
SDict begin 11.58327 H.L end
 2002 4814 a 2002
4814 a
SDict begin [/Subtype /Link/Dest (subsection.11.2) cvn/H /I/Border
[0 0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 2002 4814 a 69 w Fc(.)41 b(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(8)p 0 TeXcolorgray 368 4910 a
SDict begin H.S end
 368
4910 a Fc(11.3)157 b(Solutions)993 4910 y
SDict begin 11.58327 H.L end
 993 4910 a
993 4910 a
SDict begin [/Subtype /Link/Dest (subsection.11.3) cvn/H /I/Border
[0 0 1]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 993 4910 a 36 w Fc(.)41 b(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)
f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)g(.)h(.)f(.)g(.)p
0 TeXcolorgray 148 w(8)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(3)p 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 11.58327 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 150 0 a 152 96
a Fd(1)96 b(P)t Fe(U)t(R)t(P)t(O)t(S)t(E)33 b Fd(G)t
Fe(OA)t(L)t(S)150 218 y Fc(Libnav)28 b(main)h(purpose)f(is)g(to)h(pr)o
(ovide)g(navigation)f(to)h(desir)o(ed)g(locations)f(thr)o(ough)h(the)g
(use)f(of)h(an)g(interactive)150 314 y(map)d(for)h(patr)o(ons)e(and)i
(visitors)e(of)i(Or)o(egon)g(State)e(University)h(V)-7
b(alley)26 b(Library)-9 b(.)27 b(By)g(using)f(a)g(start)f(location)i
(and)150 411 y(destination,)j(Libnav)g(will)h(pr)o(ovide)f(a)g
(navigation)g(line)g(thr)o(ough)h(the)f(multiple)g(\003oors)h(of)g(the)
f(library)h(to)f(help)150 507 y(guide)j(users.)e(Sear)o(ch)h(for)i
(locations)e(by)h(attributes)e(or)i(name)g(will)f(help)h(make)f
(\002nding)h(a)g(desir)o(ed)f(spaces)g(or)150 603 y(location)22
b(an)g(easier)g(task)269 699 y(Libnavs)f(goal)h(is)g(to)g(make)g(sear)o
(ching)f(and)h(navigating)f(to)i(visitor)e(destination)h(an)g(easier)f
(and)h(quick)h(er)f(task.)150 795 y(Libnav)30 b(will)h(accomplish)f
(thr)o(ough)h(a)f(web)h(application)e(that)h(is)h(mobile)f(friendly)-9
b(,)32 b(and)f(unclutter)o(ed)f(by)h(extra)150 891 y(featur)o(es.)25
b(W)l(ith)i(a)g(fully)g(editable)f(map,)g(members)g(of)i(the)e(library)
h(staf)o(f)f(will)i(be)e(able)g(to)h(update)f(locations)h(and)150
988 y(spaces)f(as)h(needed.)h(Libnav)f(is)h(designed)g(to)f(be)h
(portable)f(and)g(usable)g(with)g(both)h(visitors)f(and)h(staf)o(f)e
(in)i(mine,)150 1084 y(allow)22 b(for)h(the)f(application)f(to)h(be)g
(used)g(for)h(years)e(to)h(come.)150 1236 y
SDict begin H.S end
 150 1236
a 150 1236 a
SDict begin 11.58327 H.A end
 150 1236 a 150 1236 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 150 1236 a 152 1326
a Fd(2)96 b(I)t Fe(N)t(T)t(E)t(L)32 b Fd(N)t(U)t(C)g(\()t(N)t
Fe(A)m(T)t(H)t(A)t(N)h Fd(H)t Fe(E)t(A)t(L)t(E)t(A)t
Fd(\))150 1371 y
SDict begin H.S end
 150 1371 a 150 1371 a
SDict begin 11.58327 H.A end
 150 1371 a 150
1371 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 150 1371 a 77 x Fa(2.1)79 b(Current)23 b(Status)150
1571 y Fc(The)29 b(Intel)f(NUC)h(has)g(become)g(an)g(extra)f(component)
h(of)h(the)f(Libnav)g(pr)o(oject.)f(Curr)o(ently)-9 b(,)29
b(the)g(NUC)g(has)f(been)150 1667 y(r)o(ebuilt)c(thr)o(ee)g(times)f(to)
i(\002x)f(issues)f(r)o(egar)o(ding)h(Gr)o(ub)h(at)f(startup,)e
(partitions,)i(and)g(multiple)g(installed)f(operating)150
1763 y(systems.)f(Gr)o(ub)i(became)e(an)h(issue)g(since)g(it)g(needs)g
(human)g(interaction)h(to)f(continue)h(system)e(startup.)f(By)j(doing)
150 1859 y(a)h(fr)o(esh)g(install)f(of)h(CentOS)g(6.8,)f(r)o(emoving)h
(all)g(partitions,)f(and)h(r)o(emoving)g(Gr)o(ub,)g(we)g(can)g(now)g
(start)g(the)f(NUC)150 1955 y(without)29 b(interaction.)f(At)h(this)f
(time,)h(user)f(accounts)g(have)h(been)f(cr)o(eated)h(for)h(all)e
(members)h(of)g(the)g(team)f(with)150 2051 y(access)21
b(to)h(sudo)g(commands)g(and)h(allows)e(connection)i(via)f(SSH.)269
2148 y(Apache,)28 b(Mysql,)g(PHP)h(and)g(NodeJS)h(have)e(been)h
(installed)g(and)g(con\002gur)o(ed.)g(MySQL)h(has)e(user)h(accounts)150
2244 y(for)c(all)e(members)g(of)i(the)e(team)g(with)h(connections)g(fr)
o(om)g(anywher)o(e)f(via)g(grant)h(permission)f(in)h(the)f(database.)f
(In)150 2340 y(addition)h(to)f(this,)f(a)h(user)g(for)h(the)f
(application)f(has)g(also)h(been)f(added)i(to)f(MySQL.)269
2436 y(Our)g(pr)o(ojects)e(latest)h(version)g(has)g(been)h(cloned,)g
(con\002gur)o(ed,)g(and)g(r)o(uns)f(on)h(the)g(NUC.)f(Necessary)g
(tables)f(for)150 2532 y(Libnav)26 b(have)g(been)g(cr)o(eated)g(in)h
(MySQL)g(and)f(curr)o(ent)h(functionality)f(has)g(been)g(tested)g(on)h
(the)f(NUC)g(to)h(insur)o(e)150 2628 y(compatibility)21
b(of)i(our)f(pr)o(oject.)150 2781 y
SDict begin H.S end
 150 2781 a 150 2781
a
SDict begin 11.58327 H.A end
 150 2781 a 150 2781 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 150 2781 a 74 x Fa(2.2)79 b(Pr)n(ob)o(lems)24
b(that)f(ha)o(ve)f(impeded)h(pr)n(ogress)150 2898 y
SDict begin H.S end
 150
2898 a 150 2898 a
SDict begin 11.58327 H.A end
 150 2898 a 150 2898 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 150 2898 a 0
TeXcolorgray 203 2977 a Fc(1\))p 0 TeXcolorgray 39 w(The)j(pr)o(oblem)f
(we)h(curr)o(ently)g(ar)o(e)g(facing)g(is)g(issues)f(with)h(connecting)
g(to)g(the)g(NUC)g(via)g(port)g(3000.)e(On)i(the)308
3073 y(local)19 b(host)g(of)h(the)f(NUC,)f(the)h(pr)o(oject)f(can)h(be)
g(r)o(eached)f(via)h(port)g(3000)e(but)i(not)g(fr)o(om)g(an)g(outside)g
(sour)o(ce.)f(This)308 3169 y(issue,)h(so)g(far)-6 b(,)21
b(has)e(been)g(narr)o(owed)h(down)h(to)f(the)g(\002r)o(ewall)f(r)o
(ules)h(within)f(the)h(Kelley)g(Engineering)h(building.)150
3321 y
SDict begin H.S end
 150 3321 a 150 3321 a
SDict begin 11.58327 H.A end
 150 3321 a 150 3321 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.3) cvn /DEST pdfmark
end
 150
3321 a 74 x Fa(2.3)79 b(Solutions)150 3423 y
SDict begin H.S end
 150 3423
a 150 3423 a
SDict begin 11.58327 H.A end
 150 3423 a 150 3423 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 150 3423 a 0 TeXcolorgray
203 3517 a Fc(1\))p 0 TeXcolorgray 39 w(T)-7 b(o)21 b(solve)f(the)h
(issue)f(of)i(connection)g(via)e(port)h(3000,)e(we)i(\002rst)g(got)g
(in)g(contact)g(with)g(Kevin.)g(Kevin)g(has)f(placed)308
3613 y(a)28 b(r)o(equest)e(with)i(IT)f(in)h(Kelley)g(to)g(open)f(port)h
(3000.)d(As)i(of)h(now)-7 b(,)28 b(the)f(port)h(is)f(still)g(not)h
(open)g(and)f(Kevin)h(is)308 3710 y(working)23 b(with)f(IT)g(on)g(our)h
(behalf.)150 3862 y
SDict begin H.S end
 150 3862 a 150 3862 a
SDict begin 11.58327 H.A end
 150 3862 a
150 3862 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 150 3862 a 152 3952 a Fd(3)96 b(U)t Fe(S)t(E)t(R)32
b Fd(I)t Fe(N)t(T)t(E)t(R)t(F)n(A)q(C)t(E)i Fd(\()t(N)t
Fe(A)m(T)t(H)t(A)t(N)f Fd(H)t Fe(E)t(A)t(L)t(E)t(A)t
Fd(\))150 3997 y
SDict begin H.S end
 150 3997 a 150 3997 a
SDict begin 11.58327 H.A end
 150 3997 a 150
3997 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.1) cvn /DEST pdfmark
end
 150 3997 a 77 x Fa(3.1)79 b(Current)23 b(Status)150
4196 y Fc(Libnavs)18 b(User)h(Interface)g(is)g(based)g(on)g(a)g
(template)f(Or)o(egon)i(State)e(University)g(uses)g(for)j(Dr)o(upal)e
(sites)f(called)h(Pine.)150 4293 y(Or)o(egon)27 b(State)f(University)h
(of)o(fers)g(a)g(variant)f(of)i(the)f(Dr)o(upal)g(template)f(for)i
(basic)e(web)h(pages.)f(After)h(acquiring)150 4389 y(this)g(template,)g
(major)g(str)o(uctural)g(changes)h(to)g(the)f(HTML)h(had)g(to)g(be)f
(made)h(to)g(\002t)f(the)h(standar)o(d)f(str)o(uctur)o(e)g(of)150
4485 y(Bootstrap.)h(Once)g(the)g(str)o(uctur)o(e)g(was)f(r)o(efactor)o
(ed,)h(new)h(CSS)e(was)h(written)g(to)g(mimic)h(the)f(Pine)g(template.)
e(The)150 4581 y(new)h(template)f(is)h(used)g(for)h(user)e(login,)i
(location)f(forms,)g(Librarian)h(Administration)e(Dashboar)o(d)h
(views,)f(and)150 4677 y(map)i(navigation)g(views.)g(A)h(second)g(r)o
(efactor)h(had)f(to)g(be)g(done)g(to)g(the)g(Libnav)g(template)e(once)j
(the)f(Bootstrap)150 4773 y(SB)c(Admin)g(2)f(template)f(was)h(intr)o
(oduced)i(for)f(the)g(Librarian)g(Administration)f(Dashboar)o(d)g(and)h
(the)g(main)f(map)150 4870 y(navigation)30 b(view)g(needed)h(a)g
(sidebar)-6 b(.)30 b(T)-7 b(o)30 b(keep)g(the)g(design)h(looking)g(the)
f(same,)g(a)g(new)h(CSS)f(was)f(written)i(to)150 4966
y(incorporate)22 b(the)f(Pine)g(color)i(scheme,)e(look,)g(and)h(feel)g
(to)f(the)g(Librarian)h(Administration)f(Dashboar)o(d,)f(and)i(map)150
5062 y(navigation)f(views.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(4)p 0 TeXcolorgray
269 96 a Fc(In)39 b(the)h(Librarian)f(Administration)g(Dashboar)o(d,)g
(the)h(majority)f(of)h(the)f(forms)h(have)f(been)h(cr)o(eated)f(and)150
192 y(str)o(uctur)o(ed)26 b(to)g(follow)h(Bootstrap)f(standar)o(ds.)f
(Users)g(can)h(select)g(a)g(\003oor)h(and)g(have)e(the)h(map)g(change)g
(to)g(r)o(e\003ect)150 288 y(the)20 b(users)g(choice)h(allowing)g(for)g
(new)g(locations)f(to)h(be)g(drawn)f(or)i(selected)e(on)h(the)f(map.)g
(Each)h(\002eld)f(in)h(the)g(forms)150 385 y(has)g(the)g(appr)o
(opriate)e(r)o(equir)o(ed)i(\002eld)h(check)g(that)e(blocks)i
(submission)d(if)j(empty)-9 b(.)21 b(For)h(tags)e(and)h(attributes,)f
(input)150 481 y(sanitization)33 b(has)i(been)f(applied)g(to)h(check)h
(for)g(alphanumeric)e(characters)g(including)h(spaces)f(and)h(commas.)
150 577 y(Anything)28 b(that)g(violates)f(this)h(r)o(ule)g(is)g(r)o
(eplaced)g(with)g(a)g(space.)f(T)-7 b(ext)27 b(is)h(separated)f(into)h
(arrays)g(to)g(be)g(inserted)150 673 y(into)e(corr)o(esponding)f
(tables.)f(The)h(above)g(functionality)g(is)g(written)h(in)f(the)h
(form-contr)o(ol.js)f(JavaScript)f(\002le)i(that)150
769 y(also)d(handles)g(the)g(Ajax)e(call)j(to)f(the)g(appr)o(opriate)e
(r)o(oute)i(method)h(passing)d(data)i(by)g(a)g(POST)f(method.)i(Since)f
(this)150 865 y(\002le)f(is)g(r)o(obust,)f(this)g(\002le)h(can)g(be)g
(used)g(acr)o(oss)f(all)h(input)f(forms)i(in)f(the)g(dashboar)o(d.)269
960 y(In)j(Libnavs)h(main)f(map)g(navigation)g(page,)g(the)h(sidebar)f
(still)h(needs)f(to)h(have)g(functionally)g(developed)g(that)150
1056 y(places)h(queried)i(information)g(fr)o(om)g(the)g(database)d(in)j
(the)f(corr)o(ect)h(nested)f(sidebar)g(navigation.)f(Functionality)150
1152 y(that)e(allows)g(the)h(map)e(to)i(be)f(changed)h(depending)g(on)g
(the)g(\003oor)g(the)g(user)f(would)h(like)g(to)g(select)f(a)g
(location)h(on)150 1248 y(still)18 b(needs)h(to)g(be)g(developed)g(and)
g(implemented.)f(This)g(functionality)h(is)f(similar)h(to)g(\003oor)g
(selection)g(in)g(the)g(forms)150 1345 y(but)i(needs)i(to)f(be)g(r)o
(efactor)o(ed)g(to)g(incorporate)g(button)g(clicks)g(instead)g(of)g(dr)
o(op)g(down)h(changes.)150 1471 y
SDict begin H.S end
 150 1471 a 150 1471
a
SDict begin 11.58327 H.A end
 150 1471 a 150 1471 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2) cvn /DEST pdfmark
end
 150 1471 a 72 x Fa(3.2)79 b(Pr)n(ob)o(lems)24
b(that)f(ha)o(ve)f(impeded)h(pr)n(ogress)150 1586 y
SDict begin H.S end
 150
1586 a 150 1586 a
SDict begin 11.58327 H.A end
 150 1586 a 150 1586 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 150 1586 a 0
TeXcolorgray 203 1665 a Fc(1\))p 0 TeXcolorgray 39 w(Navigation)38
b(and)g(location)h(selection/drawing)g(has)e(taken)h(some)g(time)h(to)f
(get)g(\002nished)h(due)f(to)h(their)308 1761 y(complexity)24
b(and)f(pr)o(oblems)g(the)g(team)g(has)g(to)h(design)f(thr)o(ough.)h
(Since)f(these)g(two)h(parts)e(of)i(the)g(pr)o(oject)f(ar)o(e)308
1857 y(not)h(complete,)f(it)h(is)f(pr)o(eventing)g(the)g(forms)h(and)g
(other)g(UI)f(fr)o(om)h(being)f(completed.)h(Since)f(the)h(navigation)
308 1954 y(and)37 b(location)f(selection/drawing)g(is)g(not)g
(complete,)g(data)g(fr)o(om)g(these)g(featur)o(es)f(cannot)h(be)g
(gather)o(ed,)308 2050 y(formatted,)22 b(and)g(sent)g(to)g(the)g(r)o
(oute)f(in)h(or)o(der)h(to)f(have)f(it)h(saved)g(into)g(the)f
(database.)g(This)g(issue)g(then)g(causes)308 2146 y(another)29
b(issue)f(with)i(the)f(fr)o(ont)g(map)f(navigation)h(sidebar)-6
b(.)28 b(Since)h(data)g(is)g(not)g(stor)o(ed)g(in)g(the)g(database,)e
(it)308 2242 y(cannot)22 b(be)g(r)o(etrieved)g(and)g(displayed)g(in)g
(the)g(sidebar)-6 b(.)150 2368 y
SDict begin H.S end
 150 2368 a 150 2368
a
SDict begin 11.58327 H.A end
 150 2368 a 150 2368 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.3) cvn /DEST pdfmark
end
 150 2368 a 72 x Fa(3.3)79 b(Solutions)150
2468 y
SDict begin H.S end
 150 2468 a 150 2468 a
SDict begin 11.58327 H.A end
 150 2468 a 150 2468 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 150
2468 a 0 TeXcolorgray 203 2563 a Fc(1\))p 0 TeXcolorgray
39 w(T)-7 b(o)21 b(solve)g(the)g(pr)o(oblem,)f(while)h(we)h(wait)e(for)
i(the)f(other)h(portion)f(of)h(the)f(pr)o(oject)f(to)i(be)f(completed,)
g(fake)g(data)308 2659 y(will)26 b(be)g(intr)o(oduced)g(into)g(the)f
(database)f(in)i(or)o(der)g(to)g(move)f(forwar)o(d)i(with)e(the)h
(development)f(of)h(the)g(user)308 2755 y(interface.)150
2860 y
SDict begin H.S end
 150 2860 a 150 2860 a
SDict begin 11.58327 H.A end
 150 2860 a 150 2860 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 150
2860 a 152 2970 a Fd(4)96 b(D)q Fe(A)m(T)m(A)32 b Fd(S)t
Fe(A)t(N)t(I)t(T)t(I)t(Z)t(A)m(T)t(I)5 b(O)t(N)36 b(A)t(N)t(D)31
b Fd(P)t Fe(R)s(O)t(C)t(E)t(S)t(S)t(I)t(N)t(G)k Fd(\()t(N)t
Fe(A)m(T)t(H)t(A)t(N)e Fd(H)t Fe(E)t(A)t(L)t(E)t(A)t
Fd(\))150 3015 y
SDict begin H.S end
 150 3015 a 150 3015 a
SDict begin 11.58327 H.A end
 150 3015 a 150
3015 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.1) cvn /DEST pdfmark
end
 150 3015 a 75 x Fa(4.1)79 b(Current)23 b(Status)150
3211 y Fc(As)18 b(mentioned)h(above,)e(data)h(sanitization)f(has)h
(been)g(applied)g(to)g(all)g(form)i(\002elds)e(that)g(r)o(equir)o(e)g
(it.)g(Form-contr)o(ol.js)150 3307 y(utilizes)38 b(a)g(javascript)f
(library)i(Appr)o(ovedJs)f(to)h(check)g(entry)g(\002eld)g(of)h(forms.)f
(W)l(ith)g(built)f(in)h(functionality)-9 b(,)150 3403
y(Appr)o(ovedJs)33 b(has)g(eased)g(and)h(sped)f(up)g(the)h(pr)o(ocess)f
(of)h(checking)g(data.)f(If)h(no)g(pr)o(e-built)f(function)h(contains)
150 3499 y(the)22 b(appr)o(opriate)e(check,)i(Appr)o(ovedJs)f(allows)h
(the)g(use)f(of)i(r)o(egex)f(expr)o(ess)e(to)i(check)h(data)e(that)h
(has)f(been)h(input.)269 3593 y(Some)h(pr)o(ocessing)f(of)j(data)d
(does)i(take)f(place)g(in)g(the)h(r)o(outes.)e(Once)i(data)f(has)g
(been)g(checked,)h(we)g(have)e(some)150 3690 y(form)f(data)g(that)f
(then)g(needs)h(a)f(for)o(eign)h(key)g(applied)f(befor)o(e)g(being)h
(inserted)g(into)g(the)f(database.)f(Once)i(the)f(main)150
3786 y(location)j(information)g(has)f(been)h(inserted)g(into)g(the)f
(database,)f(the)i(ID)g(of)g(that)f(r)o(ow)h(is)f(r)o(eturned)h(to)g
(be)g(added)g(to)150 3882 y(tags,)j(attributes,)f(and)i(data)g(points)f
(location)h(\(soon)h(to)f(be)g(phased)f(out\).)h(This)f(happens)f(by)i
(calling)g(a)g(series)f(of)150 3978 y(functions)21 b(that)g(have)f
(been)h(cr)o(eated)f(in)i(a)e(location)i(model.)f(The)g(location)g
(model)h(handles)e(the)h(connection)h(to)f(the)150 4074
y(database,)f(r)o(unning)j(the)f(query)-9 b(,)22 b(and)h(closing)f(the)
g(database)e(for)j(any)f(data)g(r)o(egar)o(ding)f(location)i
(information.)150 4201 y
SDict begin H.S end
 150 4201 a 150 4201 a
SDict begin 11.58327 H.A end
 150 4201
a 150 4201 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.2) cvn /DEST pdfmark
end
 150 4201 a 72 x Fa(4.2)79 b(Pr)n(ob)o(lems)24
b(that)f(ha)o(ve)f(impeded)h(pr)n(ogress)150 4316 y
SDict begin H.S end
 150
4316 a 150 4316 a
SDict begin 11.58327 H.A end
 150 4316 a 150 4316 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 150 4316 a 0
TeXcolorgray 203 4395 a Fc(1\))p 0 TeXcolorgray 39 w(The)29
b(same)f(pr)o(oblem)h(that)g(af)o(fects)f(the)h(user)g(interface)g
(also)g(af)o(fects)g(the)g(completion)g(of)h(data)f(sanitization)308
4491 y(and)21 b(pr)o(ocess.)f(As)g(navigation)g(and)h(location)g
(selection/drawing)g(pr)o(ogr)o(esses)e(and)i(data)f(is)h(being)g(r)o
(ecor)o(ded,)308 4587 y(new)i(sanitization)d(and)i(pr)o(ocesses)f(will)
h(need)h(to)f(be)g(completed.)150 4713 y
SDict begin H.S end
 150 4713 a 150
4713 a
SDict begin 11.58327 H.A end
 150 4713 a 150 4713 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.3) cvn /DEST pdfmark
end
 150 4713 a 73 x Fa(4.3)79
b(Solutions)150 4813 y
SDict begin H.S end
 150 4813 a 150 4813 a
SDict begin 11.58327 H.A end
 150 4813
a 150 4813 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 150 4813 a 0 TeXcolorgray 203 4908 a Fc(1\))p
0 TeXcolorgray 39 w(The)29 b(way)h(to)f(solve)g(this)g(pr)o(oblem)g(is)
g(to)h(basically)e(wait)h(until)h(those)f(featur)o(es)f(ar)o(e)h
(closer)h(to)f(completion.)308 5004 y(Befor)o(e)j(a)e(major)h(r)o
(efactor)g(took)g(place,)f(data)g(points)g(wer)o(e)h(able)f(to)h(be)g
(inserted)f(and)h(r)o(etrieved)g(fr)o(om)g(the)308 5100
y(database)21 b(as)g(explained)h(below)g(in)g(a)g(later)g(section.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(5)p 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 11.58327 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 150 0 a 152 96
a Fd(5)96 b(U)t Fe(S)t(E)t(R)32 b Fd(A)p Fe(U)t(T)t(H)t(E)t(N)t(T)t(I)t
(C)t(A)m(T)t(I)5 b(O)t(N)36 b(A)t(N)t(D)31 b Fd(S)t Fe(E)t(S)t(S)t(I)t
(O)t(N)t(S)j Fd(\()t(N)t Fe(A)m(T)t(H)t(A)t(N)f Fd(H)t
Fe(E)t(A)t(L)t(E)t(A)t Fd(\))150 141 y
SDict begin H.S end
 150 141 a 150
141 a
SDict begin 11.58327 H.A end
 150 141 a 150 141 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.1) cvn /DEST pdfmark
end
 150 141 a 77 x Fa(5.1)79 b(Current)23
b(Status)150 340 y Fc(Libnav)35 b(user)g(authentication)f(is)h
(supposed)f(to)i(utilize)f(Or)o(egon)g(State)f(Universitys)h(Central)g
(Access)f(System)150 437 y(\(CAS\).)17 b(But)g(due)g(to)g(issues)e
(with)i(the)g(NUC,)f(as)g(stated)g(above,)g(we)h(cannot)g(develop)g
(the)f(login)i(using)e(CAS)g(because)150 533 y(our)28
b(local)f(machine)g(cannot)h(be)f(har)o(dwir)o(ed)h(into)f(the)h
(schools)f(network.)h(W)l(ith)f(that)g(said,)f(a)h(work)h(ar)o(ound)g
(has)150 629 y(been)17 b(developed)g(that)g(turned)h(into)f(a)g
(necessary)f(part)h(of)h(the)f(pr)o(oject.)f(As)h(of)h(now)-7
b(,)17 b(Libnav)g(has)f(a)h(setup)f(script)h(that)150
725 y(allows)25 b(a)f(user)h(to)g(enter)g(a)g(master)f(username)g(and)h
(passwor)o(d)f(along)h(with)g(database)f(connection)i(information.)150
821 y(This)f(data)g(is)h(validated)f(using)g(Appr)o(ovedJs)g(like)h
(the)f(forms)h(and)g(is)g(saved)f(into)h(a)f(con\002g.json)g(\002le.)h
(Befor)o(e)g(the)150 917 y(data)c(is)g(saved,)f(usernames)g(and)i
(passwor)o(ds)d(ar)o(e)i(r)o(un)h(thr)o(ough)f(crypto)h(using)e(an)i
(aes-256-ctr)e(algorithm)h(with)g(a)150 1014 y(salt.)269
1110 y(When)28 b(a)f(user)h(attempts)e(to)i(login,)g(the)f(username)g
(and)h(passwor)o(d)f(enter)o(ed)h(is)f(encrypted)h(using)f(the)h(same)
150 1206 y(algorithm)g(and)h(salt)e(as)h(above,)f(and)h(is)g(checked)h
(to)g(the)f(username)f(and)i(passwor)o(d)e(encrypted)h(key)h(stor)o(ed)
f(in)150 1302 y(the)e(con\002g.json)f(\002le.)h(Once)g(a)f(user)h(is)f
(authenticated,)g(a)g(session)g(is)h(started)f(for)i(that)e(user)-6
b(.)25 b(Each)h(r)o(oute)g(method)150 1398 y(checks)j(for)i(an)e
(authenticated)f(session)g(befor)o(e)i(allowing)f(the)h(user)e(to)i
(access)e(the)h(view)-7 b(.)29 b(In)g(the)h(case)e(wher)o(e)h(a)150
1494 y(user)22 b(tries)f(to)i(access)e(a)g(page)h(and)g(is)g(not)g
(authenticated,)f(the)h(user)f(is)h(r)o(edir)o(ected)h(to)f(the)g
(login)g(page.)150 1647 y
SDict begin H.S end
 150 1647 a 150 1647 a
SDict begin 11.58327 H.A end
 150 1647
a 150 1647 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.2) cvn /DEST pdfmark
end
 150 1647 a 74 x Fa(5.2)79 b(Pr)n(ob)o(lems)24
b(that)f(ha)o(ve)f(impeded)h(pr)n(ogress)150 1764 y
SDict begin H.S end
 150
1764 a 150 1764 a
SDict begin 11.58327 H.A end
 150 1764 a 150 1764 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 150 1764 a 0
TeXcolorgray 203 1843 a Fc(1\))p 0 TeXcolorgray 39 w(The)h(biggest)f
(pr)o(oblem)h(that)f(has)h(impeded)g(the)g(pr)o(ogr)o(ess)f(of)i(the)f
(user)f(authentication)g(and)i(sessions)d(is)i(the)308
1939 y(NUC.)k(Since)f(we)h(cannot)g(access)f(the)h(NUC)g(thr)o(ough)g
(port)g(3000,)e(we)i(cannot)g(develop)g(and)g(test)f(the)h(CAS)308
2035 y(system)c(with)g(our)h(pr)o(oject.)f(CAS)g(only)h(allows)f
(machines)g(that)g(ar)o(e)g(wir)o(ed)h(into)f(the)h(network)g(to)g
(access)e(the)308 2131 y(CAS)f(system.)f(Until)g(this)h(issue)f(is)h(r)
o(esolved,)f(we)h(have)g(to)g(wait)g(to)g(complete)g(this)f(r)o(equir)o
(ement.)150 2284 y
SDict begin H.S end
 150 2284 a 150 2284 a
SDict begin 11.58327 H.A end
 150 2284 a 150
2284 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.3) cvn /DEST pdfmark
end
 150 2284 a 73 x Fa(5.3)79 b(Solutions)150 2385
y
SDict begin H.S end
 150 2385 a 150 2385 a
SDict begin 11.58327 H.A end
 150 2385 a 150 2385 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 150 2385
a 0 TeXcolorgray 203 2480 a Fc(1\))p 0 TeXcolorgray 39
w(T)-7 b(o)18 b(attempt)e(to)i(solve)f(the)h(pr)o(oblem)f(with)h(user)g
(authentication)e(and)i(the)g(NUC,)f(our)h(team)g(has)f(been)g(working)
308 2576 y(with)22 b(Kevin)h(and)f(the)g(IT)f(department)h(in)g(Kelley)
h(to)f(get)g(the)g(port)g(open)g(and)g(check)g(the)g(NUC)g(for)h
(issues.)150 2728 y
SDict begin H.S end
 150 2728 a 150 2728 a
SDict begin 11.58327 H.A end
 150 2728 a
150 2728 a
SDict begin [/View [/XYZ H.V]/Dest (section.6) cvn /DEST pdfmark end
 150 2728 a 152 2818 a Fd(6)96 b(N)t Fe(A)n(V)t(I)t(G)t(A)m
(T)t(I)t(O)5 b(N)35 b Fd(\()t(S)t Fe(T)t(E)t(P)t(H)t(E)t(N)e
Fd(K)t Fe(R)s(U)t(E)t(G)t(E)t(R)t Fd(\))150 2863 y
SDict begin H.S end
 150
2863 a 150 2863 a
SDict begin 11.58327 H.A end
 150 2863 a 150 2863 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.6.1) cvn /DEST pdfmark
end
 150 2863 a 77
x Fa(6.1)79 b(Current)23 b(Status)150 3062 y Fc(The)e(navigation)g
(system)f(is)i(curr)o(ently)f(functional)h(but)f(not)h(complete.)f(The)
g(navigation)g(system)f(pr)o(oduces)h(a)h(svg)150 3159
y(display)f(grid)h(made)f(of)h(r)o(ectangle)f(objects.)f(This)g(grid)i
(is)f(generated)h(once)f(the)g(map)g(loads.)g(The)g(grid)h(is)f(the)g
(same)150 3255 y(width)j(and)g(height)g(as)f(the)g(map)g(underneath.)h
(On)g(this)f(grid,)h(the)g(admin)g(can)f(mark)h(and)g(unmark)f(squar)o
(es)g(that)150 3351 y(designate)j(whether)h(or)h(not)f(that)f(grid)h
(squar)o(e)f(can)h(be)g(used)f(in)h(the)g(generation)g(of)g(the)g
(navigation)f(path.)g(This)150 3447 y(grid)g(will)g(be)g(completely)f
(transpar)o(ent)f(to)i(the)f(user)g(when)h(they)g(load)g(the)f(map)g
(and)h(only)g(the)f(generated)h(path)150 3543 y(will)c(be)g(shown.)269
3639 y(Ther)o(e)h(is)g(another)h(grid)g(generated)g(for)h(the)e
(purposes)f(of)j(calculating)e(the)g(shortest)g(path.)g(It)g(uses)g
(data)g(fr)o(om)150 3736 y(the)h(display)g(grid)h(to)g(know)g(what)f
(points)g(ar)o(e)g(and)h(ar)o(e)f(not)g(walkable.)g(This)f(graph)i(is)f
(only)h(changed)g(when)f(the)150 3832 y(admin)e(changes)g(the)g
(walkable)f(points.)g(Otherwise,)h(it)g(will)g(be)g(pulled)g(fr)o(om)g
(the)g(database)f(on)h(page)f(load.)150 3984 y
SDict begin H.S end
 150 3984
a 150 3984 a
SDict begin 11.58327 H.A end
 150 3984 a 150 3984 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.6.2) cvn /DEST pdfmark
end
 150 3984 a 74 x Fa(6.2)79
b(Pr)n(ob)o(lems)24 b(that)f(ha)o(ve)f(impeded)h(pr)n(ogress)150
4180 y Fc(Ther)o(e)f(ar)o(e)g(two)h(pr)o(oblems)f(with)h(the)g
(navigation)f(curr)o(ently)-9 b(.)23 b(The)f(\002rst)g(has)g(to)h(do)h
(with)f(setting)f(up)g(the)h(database)150 4276 y(in)f(the)g(corr)o(ect)
h(way)f(in)g(or)o(der)h(to)f(stor)o(e)f(the)h(grid.)269
4372 y(The)h(second)h(is)f(trying)h(to)g(\002gur)o(e)f(out)g(how)h(to)g
(tie)g(the)f(display)g(grid)h(to)g(the)f(location)h(on)g(the)g(svg)f
(map.)f(Since)150 4469 y(they)27 b(ar)o(e)g(two)h(separate)e(layers)h
(they)h(do)g(not)g(shar)o(e)e(information.)i(Even)g(if)g(they)g(did,)g
(how)g(would)g(you)g(\002gur)o(e)150 4565 y(out)22 b(wher)o(e)g(the)g
(entrance)g(to)g(a)g(lar)o(ge)f(r)o(ectangular)h(space)e(is?)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(6)p 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 11.58327 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.6.3) cvn /DEST pdfmark
end
 150 0 a 96 x
Fa(6.3)79 b(Solutions)150 217 y Fc(The)23 b(\002rst)f(solution)h(is)f
(easy)-9 b(,)22 b(it)h(just)f(r)o(equir)o(es)g(a)h(slight)f
(modi\002cation)i(in)f(the)f(database)g(that)g(will)h(cr)o(eate)f(a)h
(table)f(to)150 313 y(stor)o(e)g(the)f(grid.)269 408
y(The)j(second)h(solution)g(is)f(a)g(little)h(mor)o(e)f(complicated.)g
(W)-7 b(e)25 b(have)f(decided)i(to)f(give)f(the)h(admin)f(the)h
(ability)f(to)150 504 y(mark)g(the)g(display)f(grid)i(with)f(an)g(x)g
(y)g(coor)o(dinate)g(point)g(when)g(they)g(cr)o(eate)f(the)h(r)o(oom)h
(and)f(enter)g(the)g(tags)f(and)150 600 y(attributes.)j(Ther)o(e)g
(will)i(be)f(a)g(button)g(that)g(will)g(allow)h(the)f(admin)g(to)h
(load)f(the)h(grid)g(over)f(the)h(map)e(and)i(select)150
696 y(the)20 b(entrance)h(location)f(for)i(the)e(r)o(oom.)h(This)e
(will)i(then)f(be)h(saved)e(along)i(with)f(the)h(r)o(est)e(of)j(the)e
(r)o(oom)h(information.)150 792 y(When)i(the)f(user)g(wants)g(to)h
(navigate)e(between)h(two)h(r)o(ooms,)f(the)h(function)g(will)g(pull)f
(the)g(grid)h(location)g(fr)o(om)g(the)150 889 y(r)o(oom)f(info)h(and)f
(send)h(it)f(to)g(the)g(shortest)f(path)g(algorithm)h(to)h(be)e
(calculated.)150 1019 y
SDict begin H.S end
 150 1019 a 150 1019 a
SDict begin 11.58327 H.A end
 150 1019
a 150 1019 a
SDict begin [/View [/XYZ H.V]/Dest (section.7) cvn /DEST pdfmark end
 150 1019 a 152 1108 a Fd(7)96 b(P)l Fe(A)m(T)t(H)t
Fd(-)t Fe(FI)t(N)t(D)t(I)t(N)t(G)36 b Fd(\()t(S)t Fe(T)t(E)t(P)t(H)t(E)
t(N)c Fd(K)t Fe(R)s(U)t(E)t(G)t(E)t(R)t Fd(\))150 1153
y
SDict begin H.S end
 150 1153 a 150 1153 a
SDict begin 11.58327 H.A end
 150 1153 a 150 1153 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.7.1) cvn /DEST pdfmark
end
 150 1153
a 76 x Fa(7.1)79 b(Current)23 b(Status)150 1349 y Fc(The)j(goal)g(of)h
(the)g(path\002nding)f(part)g(of)h(the)f(pr)o(oject)f(is)i(to)f(make)g
(sur)o(e)g(the)g(path)f(that)h(the)g(navigation)g(system)f(is)150
1446 y(r)o(eturning)g(is)f(the)h(shortest)f(path)f(between)i(the)f(two)
h(locations.)f(As)g(of)i(now)-7 b(,)24 b(the)h(path\002nding)f
(algorithm)h(works)150 1542 y(very)j(well.)g(It)g(uses)f(an)h(A*)g
(path\002nding)g(algorithm)g(fr)o(om)h(the)f(path\002nding.js)f
(library)h(mentioned)h(in)f(the)g(tech)150 1638 y(document)e(to)g(r)o
(eturn)f(the)h(shortest)f(path)g(to)h(the)f(user)-6 b(.)26
b(The)f(user)g(can)h(see)f(the)h(shortest)f(path)g(displayed)g(on)h
(the)150 1734 y(map)21 b(after)h(the)g(beginning)h(and)f(starting)f
(location)h(have)g(been)g(declar)o(ed.)150 1865 y
SDict begin H.S end
 150
1865 a 150 1865 a
SDict begin 11.58327 H.A end
 150 1865 a 150 1865 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.7.2) cvn /DEST pdfmark
end
 150 1865 a 72
x Fa(7.2)79 b(Pr)n(ob)o(lems)24 b(that)f(ha)o(ve)f(impeded)h(pr)n
(ogress)150 2058 y Fc(One)29 b(pr)o(oblem)f(we)h(have)g(is)f(\002nding)
i(the)e(path)g(between)h(\003oors.)g(W)-7 b(e)29 b(had)g(to)g(decide)g
(how)h(to)f(handle)g(the)g(user)150 2154 y(wanting)f(to)g(go)h(fr)o(om)
g(the)f(\002rst)g(\003oor)h(to)f(the)g(\002fth)h(or)g(sixth)e(\003oor)
-6 b(,)30 b(and)e(whether)g(or)h(not)g(they)f(would)h(take)e(the)150
2250 y(stairs)21 b(or)i(the)f(elevator)-6 b(.)150 2360
y
SDict begin H.S end
 150 2360 a 150 2360 a
SDict begin 11.58327 H.A end
 150 2360 a 150 2360 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.7.3) cvn /DEST pdfmark
end
 150 2360
a 93 x Fa(7.3)79 b(Solutions)150 2574 y Fc(The)19 b(decision)g
(actually)g(turned)g(out)g(to)h(be)f(mor)o(e)g(of)h(a)f(UX)f(solution)h
(than)g(the)g(path\002nding)g(solution.)g(W)-7 b(e)19
b(decided)150 2670 y(that)h(if)g(the)h(user)e(would)i(change)f
(\003oors)h(that)f(wed)g(give)h(them)f(the)g(option)g(of)h(going)g
(either)f(to)h(the)f(stairs)f(or)i(to)f(the)150 2766
y(elevator)-6 b(.)22 b(Then)f(fr)o(om)i(the,)f(the)g(user)f(would)i(be)
f(pr)o(esented)f(with)h(an)g(arr)o(ow)g(that)f(would)i(load)f(the)g
(next)g(\003oor)-6 b(.)269 2861 y(For)32 b(the)g(path\002nding)g
(algorithm,)g(we)g(use)f(the)h(location)g(of)h(the)f(stairs)f(or)i
(elevator)e(as)g(the)h(end)h(point)f(on)150 2957 y(the)d(users)e(curr)o
(ent)i(\003oor)-6 b(,)30 b(and)e(the)h(start)f(point)g(on)h(the)g
(users)f(destination)g(\003oor)-6 b(.)29 b(When)g(the)g(new)g(\003oor)g
(loads,)150 3053 y(the)d(path\002nding)f(algorithm)h(is)g(r)o(un)g
(again.)g(The)f(destination)h(of)g(the)g(user)g(will)g(be)g(saved)f(in)
h(their)g(session)f(and)150 3149 y(r)o(eloaded.)k(The)f(path\002nding)g
(algorithm)g(is)g(very)h(fast)f(as)f(it)i(is)f(just)f(a)h(fr)o(ont)h
(end)g(script)f(so)g(we)g(do)i(not)e(have)g(to)150 3246
y(worry)i(about)e(the)h(algorithm)g(incr)o(easing)g(load)g(times.)f(T)
-7 b(rying)29 b(to)g(calculate)f(the)h(path)f(between)h(\003oors)h
(would)150 3342 y(have)21 b(been)h(complicated)g(and)g(ultimately)g
(unnecessary)f(as)g(it)h(wouldnt)g(have)g(any)g(major)f(bene\002t.)150
3472 y
SDict begin H.S end
 150 3472 a 150 3472 a
SDict begin 11.58327 H.A end
 150 3472 a 150 3472 a
SDict begin [/View [/XYZ H.V]/Dest (section.8) cvn /DEST pdfmark end
 150
3472 a 152 3561 a Fd(8)96 b(D)q Fe(A)m(T)m(A)t(B)r(A)t(S)t(E)34
b Fd(\()t(S)t Fe(T)t(E)t(P)t(H)t(E)t(N)f Fd(K)t Fe(R)s(U)t(E)t(G)t(E)t
(R)t Fd(\))150 3606 y
SDict begin H.S end
 150 3606 a 150 3606 a
SDict begin 11.58327 H.A end
 150 3606
a 150 3606 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.8.1) cvn /DEST pdfmark
end
 150 3606 a 76 x Fa(8.1)79 b(Current)23 b(Status)150
3803 y Fc(The)h(database)e(is)i(curr)o(ently)g(set)g(up)f(and)i(r)o
(unning.)f(W)-7 b(e)25 b(can)f(write)g(location)g(data)g(and)g(user)g
(session)f(data)h(to)g(the)150 3899 y(database)e(and)i(also)g(query)g
(the)g(database)e(to)i(r)o(eturn)f(that)h(data.)f(The)g(database)f(is)i
(also)f(curr)o(ently)h(setup)f(to)h(stor)o(e)150 3995
y(custom)c(drawn)g(locations.)g(W)-7 b(e)20 b(can)g(get)g(the)g(data)g
(points)f(back)h(fr)o(om)g(the)h(database)d(and)i(r)o(edraw)g(those)g
(locations)150 4091 y(on)i(the)g(map.)150 4222 y
SDict begin H.S end
 150
4222 a 150 4222 a
SDict begin 11.58327 H.A end
 150 4222 a 150 4222 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.8.2) cvn /DEST pdfmark
end
 150 4222 a 72
x Fa(8.2)79 b(Pr)n(ob)o(lems)24 b(that)f(ha)o(ve)f(impeded)h(pr)n
(ogress)150 4337 y
SDict begin H.S end
 150 4337 a 150 4337 a
SDict begin 11.58327 H.A end
 150 4337 a 150
4337 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 150 4337 a 0 TeXcolorgray 203 4416 a Fc(1\))p
0 TeXcolorgray 39 w(How)g(to)f(stor)o(e)f(the)h(grid)150
4439 y
SDict begin H.S end
 150 4439 a 150 4439 a
SDict begin 11.58327 H.A end
 150 4439 a 150 4439 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 150
4439 a 0 TeXcolorgray 203 4513 a Fc(2\))p 0 TeXcolorgray
39 w(Stor)o(e)g(points)f(as)h(json)f(object)150 4621
y(One)32 b(pr)o(oblem)g(we)g(ran)g(into)g(was)f(\002guring)i(out)e(how)
i(we)f(wer)o(e)g(going)g(to)g(stor)o(e)g(the)g(navigation)f(grid)i(in)f
(the)150 4717 y(database.)24 b(Its)h(a)h(series)f(of)i(\(x,y\))f(coor)o
(dinates)g(and)g(we)g(need)g(to)g(r)o(ecor)o(d)h(both)e(the)h(walkable)
f(and)h(non-walkable)150 4813 y(coor)o(dinates.)269 4908
y(The)21 b(second)i(pr)o(oblem)e(we)h(had)h(was)e(\002guring)h(out)g
(how)h(to)f(stor)o(e)f(the)h(location)g(objects)g(as)f(a)h(json)f
(object.)g(The)150 5004 y(location)26 b(data)f(was)g(originally)h(stor)
o(ed)g(as)f(individual)h(data)f(points)g(and)h(when)g(we)f(went)h(to)g
(pull)f(the)h(data)f(and)150 5100 y(loop)20 b(thr)o(ough)g(the)g
(points)f(it)h(was)f(painfully)g(slow)-7 b(.)19 b(W)-7
b(e)20 b(decided)h(that)f(we)g(would)g(need)g(to)g(r)o(efactor)g(the)g
(database.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(7)p 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 11.58327 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.8.3) cvn /DEST pdfmark
end
 150 0 a 96 x
Fa(8.3)79 b(Solutions)150 124 y
SDict begin H.S end
 150 124 a 150 124 a
SDict begin 11.58327 H.A end
 150
124 a 150 124 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 150 124 a 0 TeXcolorgray 203 218 a Fc(1\))p
0 TeXcolorgray 150 331 a(The)29 b(solution)g(to)h(storing)f(the)h(grid)
g(was)f(fairly)g(simple.)g(The)g(set)g(of)h(walkable)e(and)i
(non-walkable)f(points)g(ar)o(e)150 427 y(stor)o(ed)22
b(in)h(arrays.)f(W)-7 b(e)22 b(simply)g(ar)o(e)f(going)i(to)g(put)f
(these)f(arrays)h(into)h(a)f(javascript)f(object)g(and)i(then)f
(stringify)h(the)150 523 y(javascript)h(object)i(and)g(stor)o(e)g(the)g
(string)h(in)f(the)g(database.)f(The)h(tables)f(still)h(need)g(to)h(be)
f(set)g(up,)f(but)h(after)g(they)150 620 y(ar)o(e)19
b(the)h(functionality)g(to)g(pull)f(that)h(string)f(out)h(of)h(the)e
(database)g(is)g(alr)o(eady)h(ther)o(e.)f(Fr)o(om)h(ther)o(e)f(we)h
(just)f(turn)h(that)150 716 y(string)i(back)g(into)g(a)g(json)f(object)
h(and)g(pulling)g(out)g(the)g(arrays)269 812 y(The)h(\002x)g(for)h
(storing)f(the)g(points)g(of)h(the)f(custom)f(drawn)i(locations)f(is)g
(essentially)f(the)h(same.)f(The)h(tables)f(that)150
908 y(wer)o(e)j(used)f(to)h(stor)o(e)f(the)h(individual)f(data)h
(points)f(ar)o(e)g(going)h(to)g(be)f(deleted.)h(Instead)f(we)h(will)g
(opt)f(to)h(stor)o(e)f(the)150 1004 y(data)e(points)g(in)g(a)g(json)g
(object)g(like)g(the)h(grid.)g(W)-7 b(e)22 b(will)h(then)f(stringify)h
(the)f(object)g(of)h(points)f(and)g(stor)o(e)g(the)g(string)150
1100 y(in)i(the)f(database.)f(This)g(will)i(make)f(it)h(so)f(when)h(we)
f(pull)g(out)h(the)f(points)g(it's)g(alr)o(eady)g(in)h(an)f(nice)h
(iterable)f(object)150 1197 y(format)f(instead)g(of)h(a)e(bunch)h(of)h
(individual)f(coor)o(dinates.)150 1328 y
SDict begin H.S end
 150 1328 a 150
1328 a
SDict begin 11.58327 H.A end
 150 1328 a 150 1328 a
SDict begin [/View [/XYZ H.V]/Dest (section.9) cvn /DEST pdfmark end
 150 1328 a 152 1439 a Fd(9)96
b(F)t Fe(R)t(A)t(M)t(E)t(W)s(O)t(R)t(K)34 b Fd(\()t(M)t
Fe(A)m(T)t(T)t(H)t(E)t(W)g Fd(Z)t Fe(A)t(K)t(R)t(E)t(V)t(S)t(K)t(Y)t
Fd(\))150 1484 y
SDict begin H.S end
 150 1484 a 150 1484 a
SDict begin 11.58327 H.A end
 150 1484 a 150
1484 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.9.1) cvn /DEST pdfmark
end
 150 1484 a 77 x Fa(9.1)79 b(Current)23 b(Status)150
1683 y Fc(As)34 b(it)g(curr)o(ently)g(stands)f(the)i(web)f(framework)h
(that)e(we)i(ar)o(e)e(using)h(is)g(the)g(Expr)o(ess)f(framework)i(pr)o
(eviously)150 1780 y(discussed)22 b(in)g(our)g(design)h(and)f(r)o
(equir)o(ements)f(documents.)h(This)f(framework)i(contr)o(ols)f(the)g
(r)o(outing)g(of)h(the)f(web)150 1876 y(pages)j(and)i(is)f(fully)h
(functional)g(with)f(the)h(bootstrapping,)e(mysql)h(post)g(and)h(get)f
(queries.)g(The)g(use)g(of)h(Expr)o(ess)150 1972 y(has)f(allowed)g(us)g
(to)g(use)g(r)o(outes)f(to)h(move)h(between)e(the)h(various)g(web)g
(pages)f(without)h(err)o(or)-6 b(,)27 b(.The)e(framework)150
2068 y(has)i(been)h(meeting)f(our)h(needs)g(though)f(we)h(have)f(some)h
(minor)g(pr)o(oblems)f(in)h(how)g(we)g(want)f(to)h(to)g(pass)e(data)150
2164 y(along)c(to)f(the)h(mysql)g(contr)o(oller)-6 b(.)22
b(This)f(had)h(to)f(do)i(with)e(the)h(need)g(to)g(use)f(asynchr)o
(onous)g(ajax)f(calls.)h(Overall)h(this)150 2260 y(major)g(dif)o
(\002culty)g(that)f(we)h(have)g(had)g(is)g(learning)g(the)g(framework.)
150 2413 y
SDict begin H.S end
 150 2413 a 150 2413 a
SDict begin 11.58327 H.A end
 150 2413 a 150 2413
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.9.2) cvn /DEST pdfmark
end
 150 2413 a 73 x Fa(9.2)79 b(Pr)n(ob)o(lems)24 b(that)f(ha)o(ve)f
(impeded)h(pr)n(ogress)150 2530 y
SDict begin H.S end
 150 2530 a 150 2530
a
SDict begin 11.58327 H.A end
 150 2530 a 150 2530 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 150 2530 a 0 TeXcolorgray 203
2609 a Fc(1\))p 0 TeXcolorgray 39 w(The)f(need)g(to)h(use)e(asynchr)o
(onous)g(ajax)g(calls)h(to)g(use)f(the)h(mysql)g(contr)o(oller)150
2761 y
SDict begin H.S end
 150 2761 a 150 2761 a
SDict begin 11.58327 H.A end
 150 2761 a 150 2761 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.9.3) cvn /DEST pdfmark
end
 150
2761 a 74 x Fa(9.3)79 b(Solutions)150 2862 y
SDict begin H.S end
 150 2862
a 150 2862 a
SDict begin 11.58327 H.A end
 150 2862 a 150 2862 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 150 2862 a 0 TeXcolorgray
203 2957 a Fc(1\))p 0 TeXcolorgray 39 w(The)21 b(need)g(to)f(use)g
(asynchr)o(onous)g(ajax)f(calls)h(r)o(esulted)g(in)h(how)g(we)g(need)g
(to)f(r)o(oute)h(thr)o(ough)f(the)h(framework.)308 3053
y(W)-7 b(e)19 b(had)f(to)h(have)f(separate)f(r)o(oute)h(going)h(fr)o
(om)f(form)i(submit)d(and)i(thr)o(ough)f(the)g(our)h(form)g(submission)
f(code.)150 3205 y
SDict begin H.S end
 150 3205 a 150 3205 a
SDict begin 11.58327 H.A end
 150 3205 a 150
3205 a
SDict begin [/View [/XYZ H.V]/Dest (section.10) cvn /DEST pdfmark end
 150 3205 a 152 3296 a Fd(1)t(0)97 b(S)t(V)o(G)32
b(R)t Fe(E)t(N)t(D)t(E)t(R)t(I)t(N)t(G)j(A)t(N)t(D)30
b Fd(M)t Fe(A)t(P)i Fd(D)t Fe(R)t(AW)t(I)t(N)t(G)h Fd(\()t(M)t
Fe(A)m(T)t(T)t(H)t(E)t(W)h Fd(Z)t Fe(A)t(K)t(R)t(E)t(V)t(S)t(K)t(Y)t
Fd(\))150 3341 y
SDict begin H.S end
 150 3341 a 150 3341 a
SDict begin 11.58327 H.A end
 150 3341 a 150
3341 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.10.1) cvn /DEST pdfmark
end
 150 3341 a 77 x Fa(10.1)79 b(Current)23 b(Status)150
3540 y Fc(SVG)e(r)o(endering)g(has)f(been)g(one)h(of)h(the)e(primary)h
(focuses)f(of)h(our)g(gr)o(oup)f(when)h(developing)g(the)f(LibNav)g(pr)
o(oject.)150 3636 y(This)29 b(is)h(because)f(this)g(is)h(one)g(of)h
(the)f(primary)g(featur)o(es)e(that)i(must)f(exist)g(in)h(or)o(der)h
(to)f(make)g(this)f(application)150 3732 y(function.)c(One)g(of)g(the)g
(featur)o(es)e(that)h(has)g(been)g(developed)h(is)f(to)h(be)g(able)f
(to)g(draw)h(shapes)e(thr)o(ough)i(of)g(a)f(point)150
3828 y(and)d(click)h(interface)g(that)e(allows)h(a)g(library)h(staf)o
(f)e(member)h(to)h(connect)g(a)f(series)f(of)i(points)f(and)g(cr)o
(eate)g(a)g(polygon)150 3924 y(that)g(is)h(saved)g(to)g(the)g
(database.)269 4021 y(Additionally)31 b(the)g(LibNav)f(application)g
(can)h(access)f(the)h(shapes)f(stor)o(ed)h(in)g(the)g(SVG)g(\002les)g
(that)f(we)h(wer)o(e)150 4117 y(given)21 b(by)f(the)h(library)g
(faculty)-9 b(.)20 b(These)g(\002les)g(contain)h(shapes)e(that)i(will)g
(be)f(used)h(to)f(cr)o(eate)h(the)f(dif)o(fer)o(ent)h(locations)150
4213 y(within)35 b(the)h(library)-9 b(.)35 b(The)g(biggest)g(advantage)
f(to)h(using)g(this)g(rather)g(than)g(the)h(point)f(and)g(click)h
(method)g(as)150 4309 y(mentioned)24 b(above)g(is)f(that)h(this)f
(method)h(will)h(make)e(the)h(most)f(use)h(of)g(the)g(data)f(alr)o
(eady)h(available)e(to)i(the)g(staf)o(f.)150 4405 y(They)e(will)g(only)
h(have)e(to)h(select)g(the)g(spaces)e(in)j(question)e(and)i(enter)f
(the)g(r)o(elevant)f(form)i(data.)269 4501 y(Conversely)g(we)g(ar)o(e)f
(also)h(able)f(to)i(draw)f(shapes)e(fr)o(om)j(the)f(database.)e(This)h
(is)h(done)h(with)f(an)g(asynchr)o(onous)150 4598 y(ajax)16
b(call)i(which)g(performs)f(a)h(callback)e(to)i(r)o(eturn)f(the)h(data)
f(points)g(that)g(match)g(the)g(select)g(query)-9 b(,)18
b(which)g(curr)o(ently)150 4694 y(r)o(eturns)25 b(all)h(points)f(fr)o
(om)i(the)f(database.)e(Thr)o(ough)h(the)h(pr)o(ocess)f(of)i
(developing)f(the)f(application)g(it)h(was)f(found)150
4790 y(that)19 b(the)g(use)g(of)h(using)e(the)i(database)d(would)j
(take)f(a)g(lar)o(ge)g(amount)f(of)i(over)o(head)f(to)h(draw)g(all)f
(shapes,)e(especially)150 4886 y(when)22 b(all)g(\003oors)h(ar)o(e)e
(fully)i(populated)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 142
-164 a 0 TeXcolorgray 3718 -56 a Fj(8)p 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 11.58327 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.10.2) cvn /DEST pdfmark
end
 150 0 a 96 x
Fa(10.2)79 b(Pr)n(ob)o(lems)24 b(that)f(ha)o(ve)f(impeded)i(pr)n
(ogress)150 139 y
SDict begin H.S end
 150 139 a 150 139 a
SDict begin 11.58327 H.A end
 150 139 a 150 139
a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 150 139 a 0 TeXcolorgray 203 218 a Fc(1\))p 0 TeXcolorgray
39 w(Need)e(to)h(r)o(edesign)f(how)g(location)g(information)h(is)f
(stor)o(ed)g(into)g(the)g(database.)150 241 y
SDict begin H.S end
 150 241
a 150 241 a
SDict begin 11.58327 H.A end
 150 241 a 150 241 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 150 241 a 0 TeXcolorgray
203 314 a Fc(2\))p 0 TeXcolorgray 39 w(Exporting)f(data)e(to)h(the)g
(database)f(based)g(upon)h(r)o(ooms)g(selected)g(fr)o(om)g(the)g(SVG)g
(vs)g(drawn)g(with)g(the)g(added)308 411 y(drawing)j(functionality)-9
b(.)150 433 y
SDict begin H.S end
 150 433 a 150 433 a
SDict begin 11.58327 H.A end
 150 433 a 150 433 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end

150 433 a 0 TeXcolorgray 203 507 a Fc(3\))p 0 TeXcolorgray
39 w(Passing)32 b(the)h(necessary)f(data)g(on)i(form)f(submission)f
(based)g(upon)h(whether)g(the)g(selected)f(shape)g(was)g(a)308
603 y(r)o(ectangle,)22 b(ellipse,)f(or)h(polygon.)150
755 y
SDict begin H.S end
 150 755 a 150 755 a
SDict begin 11.58327 H.A end
 150 755 a 150 755 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.10.3) cvn /DEST pdfmark
end
 150 755
a 74 x Fa(10.3)79 b(Solutions)150 857 y
SDict begin H.S end
 150 857 a 150
857 a
SDict begin 11.58327 H.A end
 150 857 a 150 857 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 150 857 a 0 TeXcolorgray 203
951 a Fc(1\))p 0 TeXcolorgray 39 w(The)26 b(solution)g(that)f(we)h
(came)g(up)f(with)h(as)f(a)h(team)f(was)h(to)g(r)o(efactor)g(our)g
(code)h(such)f(that)f(when)h(we)g(insert)308 1047 y(data)f(into)h(the)g
(query)g(into)g(the)g(database)e(we)h(instead)h(ar)o(e)f(inserting)g(a)
h(single)f(string)h(of)g(points)f(instead)g(of)308 1144
y(a)j(single)f(point.)h(This)f(does)g(two)h(things)g(for)g(the)g
(application.The)e(\002rst)h(is)h(that)f(ther)o(e)g(is)h(less)e(over)o
(head)i(to)308 1240 y(iterate)h(thr)o(ough)g(each)f(point,)h(match)g
(that)f(point)h(with)g(the)g(corr)o(ect)g(location)g(and)g(then)g(draw)
h(the)e(shape,)308 1336 y(instead)e(we)h(r)o(ead)f(the)h(needed)g
(information)g(for)h(polygons.)e(The)g(second)h(thing)g(this)f(does)g
(is)h(that)f(we)g(can)308 1432 y(r)o(educe)c(the)g(number)g(of)h
(tables)e(used)h(in)g(the)g(database,)e(allowing)i(for)h(faster)f
(query)g(r)o(esults.)150 1454 y
SDict begin H.S end
 150 1454 a 150 1454 a
SDict begin 11.58327 H.A end

150 1454 a 150 1454 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 150 1454 a 0 TeXcolorgray 203 1528
a Fc(2\))p 0 TeXcolorgray 39 w(The)30 b(pr)o(oblem)f(that)g(had)i(to)f
(be)f(solved)h(was)f(how)i(do)f(we)g(dif)o(fer)o(entiate)g(between)f
(the)h(dif)o(fer)o(ent)h(types)d(of)308 1624 y(shapes)23
b(being)h(selected)g(by)g(the)g(user)g(instead)g(of)g(the)h(user)e
(drawing)i(functionality)-9 b(.)24 b(The)g(user)g(could)h(select)308
1721 y(an)35 b(ellipse,)f(r)o(ectangle,)g(or)h(polygon)g(as)f(the)h
(shape)f(for)h(use)f(in)h(the)g(new)g(location)g(being)g(added)g(to)g
(the)308 1817 y(database.)29 b(This)g(is)h(dif)o(fer)o(ent)h(than)f
(the)g(information)h(needed)g(to)g(r)o(edraw)f(a)g(user)g(drawn)h
(polygon.)f(Since)308 1913 y(Javascript)f(does)h(not)f(r)o(eally)g(car)
o(e)h(about)f(what)g(is)g(being)h(passed)e(between)h(the)h(r)o(outer)f
(so)h(long)g(as)f(it)g(is)g(a)308 2009 y(JSON)24 b(object)g(we)f(wer)o
(e)h(able)f(to)h(leverage)g(this)f(by)h(saving)f(dif)o(fer)o(ent)h
(versions)f(of)i(the)f(data)f(object)g(with)h(the)308
2105 y(needed)f(attributes)d(to)i(r)o(edraw)h(the)e(shape)g(on)i(the)e
(map)g(when)i(pulled)e(fr)o(om)i(the)f(database.)e(This)h(is)h(handed)
308 2201 y(to)f(the)g(AJAX)f(call)h(to)g(be)g(passed)f(to)h(the)f
(insert)h(query)-9 b(.)21 b(The)g(goal)g(is)f(to)h(have)g(a)f(single)h
(data)f(object)h(that)f(when)308 2298 y(submitted)h(the)h(r)o(outer)-6
b(,)22 b(the)g(information)h(will)f(be)g(inserted)g(without)g(any)g(pr)
o(oblems.)150 2320 y
SDict begin H.S end
 150 2320 a 150 2320 a
SDict begin 11.58327 H.A end
 150 2320 a
150 2320 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 150 2320 a 0 TeXcolorgray 203 2394 a Fc(3\))p
0 TeXcolorgray 39 w(Similar)29 b(to)h(the)f(second)h(pr)o(oblem)e(that)
h(we)g(found,)h(when)g(a)f(shape)f(is)h(selected)g(the)g(issue)f(is)h
(how)h(do)g(we)308 2490 y(get)25 b(the)f(corr)o(ect)h(data)f(sent)g(to)
g(the)g(database.)f(On)i(selection)f(the)g(necessary)g(attributes)f
(such)h(as)g(height)g(and)308 2586 y(width)j(for)f(a)g(r)o(ectangle)f
(ar)o(e)g(saved)h(into)g(a)f(json)g(object)h(which)g(is)g(then)f
(passed)g(to)h(the)g(mysql)f(contr)o(oller)i(to)308 2682
y(be)22 b(sent)g(to)g(the)g(database)150 2813 y
SDict begin H.S end
 150 2813
a 150 2813 a
SDict begin 11.58327 H.A end
 150 2813 a 150 2813 a
SDict begin [/View [/XYZ H.V]/Dest (section.11) cvn /DEST pdfmark end
 150 2813 a 152 2925
a Fd(1)t(1)97 b(S)t Fe(E)t(A)t(R)t(C)t(H)32 b Fd(F)t
Fe(U)t(N)t(C)t(T)t(I)t(O)t(N)t(A)t(L)t(I)5 b(T)t(Y)36
b Fd(\()t(M)t Fe(A)m(T)t(T)t(H)t(E)t(W)d Fd(Z)t Fe(A)t(K)t(R)t(E)t(V)t
(S)t(K)t(Y)t Fd(\))150 2970 y
SDict begin H.S end
 150 2970 a 150 2970 a
SDict begin 11.58327 H.A end
 150
2970 a 150 2970 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.11.1) cvn /DEST pdfmark
end
 150 2970 a 77 x Fa(11.1)79 b(Current)23
b(Status)150 3169 y Fc(This)32 b(has)g(yet)h(to)g(be)f(started.)h(This)
f(is)g(due)h(to)g(the)g(fact)g(that)f(the)g(database)g(has)g(to)h(be)f
(tweaked)h(and)g(we)g(ar)o(e)150 3265 y(still)23 b(working)h(out)g(the)
f(kinks)g(for)i(data)e(submission.)f(W)-7 b(e)23 b(will)h(be)f
(\002lling)h(in)f(the)h(database)e(with)h(simulated)g(data)150
3361 y(when)f(we)f(do)h(begin)g(to)g(test.)e(This)h(is)g(a)g(pr)o
(oblem)g(inhibited)h(by)f(the)h(UI)f(and)g(the)h(path\002nding.)f(T)-7
b(o)21 b(have)g(this)g(fully)150 3458 y(functional)f(we)f(will)h(need)g
(to)g(be)f(able)g(to)h(load)f(all)h(shapes)e(in)h(the)h(database)e(and)
h(also)g(be)h(able)e(to)i(change)g(between)150 3554 y(the)i(curr)o
(ently)g(displayed)g(map)f(and)h(the)g(map)f(wher)o(e)h(the)g(space)f
(is)h(located.)150 3706 y
SDict begin H.S end
 150 3706 a 150 3706 a
SDict begin 11.58327 H.A end
 150 3706
a 150 3706 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.11.2) cvn /DEST pdfmark
end
 150 3706 a 74 x Fa(11.2)79 b(Pr)n(ob)o(lems)24
b(that)f(ha)o(ve)f(impeded)i(pr)n(ogress)150 3823 y
SDict begin H.S end
 150
3823 a 150 3823 a
SDict begin 11.58327 H.A end
 150 3823 a 150 3823 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 150 3823 a 0
TeXcolorgray 203 3902 a Fc(1\))p 0 TeXcolorgray 39 w(The)f(ability)f
(to)i(easily)e(change)h(between)f(maps)g(or)i(load)f(maps)f(with)h
(dynamically)g(without)f(r)o(efr)o(eshing)h(the)308 3998
y(page)150 4150 y
SDict begin H.S end
 150 4150 a 150 4150 a
SDict begin 11.58327 H.A end
 150 4150 a 150
4150 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.11.3) cvn /DEST pdfmark
end
 150 4150 a 74 x Fa(11.3)79 b(Solutions)150 4252
y
SDict begin H.S end
 150 4252 a 150 4252 a
SDict begin 11.58327 H.A end
 150 4252 a 150 4252 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 150 4252
a 0 TeXcolorgray 203 4346 a Fc(1\))p 0 TeXcolorgray 39
w(This)28 b(pr)o(oblem)g(is)g(being)h(solved)f(by)h(r)o(efactoring)g
(how)g(the)f(map)g(is)g(loaded)h(and)g(populated)e(with)i(shapes)308
4443 y(within)e(the)f(database.)e(Pr)o(eviously)h(ther)o(e)h(wer)o(e)f
(pr)o(oblems)h(with)g(the)g(onload)g(functionality)g(happening)g(at)308
4539 y(the)18 b(same)f(time)g(so)h(ther)o(e)f(was)g(a)h(pr)o(oblem)f
(with)h(having)f(both)h(the)g(ability)f(to)h(load)g(shapes)e(fr)o(om)i
(the)g(database)308 4635 y(and)j(having)g(these)f(shapes)g(be)h
(selectable..)e(By)i(r)o(efactoring)h(the)f(ability)f(to)h(r)o(ender)h
(shapes)d(so)i(that)f(these)h(ar)o(e)308 4731 y(now)27
b(callable)e(functions)h(that)f(can)g(be)h(used)g(to)g(draw)g(the)f
(map)g(as)h(needed)g(instead)f(of)i(on)f(load,)g(allowing)308
4827 y(for)d(the)f(application)f(to)h(load)h(the)f(map)f(with)h(the)g
(location)g(that)g(is)g(being)g(sear)o(ched)f(for)-6
b(.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
